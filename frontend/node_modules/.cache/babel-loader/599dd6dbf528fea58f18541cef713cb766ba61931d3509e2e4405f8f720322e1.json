{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddharth\\\\Documents\\\\GitHub\\\\WhisperNet\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport ChatBox from './components/ChatBox';\nimport UserList from './components/UserList';\nimport VerificationModal from './components/VerificationModal';\n// Import the icon directly\nimport appIcon from './assets/icon.png';\nimport { saveChatHistory, loadChatHistory, getActiveChats, clearAllChatHistory, saveUnreadCounts, loadUnreadCounts, resetUnreadCount, incrementUnreadCount } from './utils/chatStorage';\nimport { storeVerifiedKey, getVerifiedKey, hasVerifiedKey, verifyKey, generateKeyFingerprint, detectStorageReset, clearAllVerifiedKeys } from './utils/keyVerification';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Encryption utilities\nconst generateKeyPair = async () => {\n  try {\n    const keyPair = await window.crypto.subtle.generateKey({\n      name: \"RSA-OAEP\",\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: \"SHA-256\"\n    }, true, [\"encrypt\", \"decrypt\"]);\n\n    // Export the keys to JWK format\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\n    return {\n      publicKey,\n      privateKey\n    };\n  } catch (error) {\n    console.error('Error generating key pair:', error);\n    throw error;\n  }\n};\nconst encryptMessage = async (message, publicKeyJwk) => {\n  try {\n    // Import the public key\n    const publicKey = await window.crypto.subtle.importKey(\"jwk\", publicKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"encrypt\"]);\n\n    // Convert the message to ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n\n    // Encrypt the data\n    const encryptedData = await window.crypto.subtle.encrypt({\n      name: \"RSA-OAEP\"\n    }, publicKey, data);\n\n    // Convert the encrypted data to base64\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n  } catch (error) {\n    console.error('Error encrypting message:', error);\n    throw error;\n  }\n};\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\n  try {\n    // Import the private key\n    const privateKey = await window.crypto.subtle.importKey(\"jwk\", privateKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"decrypt\"]);\n\n    // Convert the base64 encrypted message to ArrayBuffer\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\n\n    // Decrypt the data\n    const decryptedData = await window.crypto.subtle.decrypt({\n      name: \"RSA-OAEP\"\n    }, privateKey, encryptedData);\n\n    // Convert the decrypted data to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n  } catch (error) {\n    console.error('Error decrypting message:', error);\n    return '[Encrypted message - cannot decrypt]';\n  }\n};\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [status, setStatus] = useState('Checking relay status...');\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [showAboutPage, setShowAboutPage] = useState(false);\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [typing, setTyping] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\n  const [relayStatus, setRelayStatus] = useState('checking');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [recipientStatus, setRecipientStatus] = useState({\n    exists: false,\n    online: false\n  });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\n\n  // New state variables for chat management\n  const [activeChats, setActiveChats] = useState({}); // username -> boolean (is chat open)\n  const [chatMessages, setChatMessages] = useState({}); // username -> messages array\n  const [currentChat, setCurrentChat] = useState(null); // currently selected chat username\n  const [typingUsers, setTypingUsers] = useState({}); // username -> boolean (is typing)\n  const [recipientStatuses, setRecipientStatuses] = useState({}); // username -> status object\n  const [unreadCounts, setUnreadCounts] = useState({}); // username -> count\n\n  // Key verification state\n  const [verificationStatuses, setVerificationStatuses] = useState({}); // username -> verification status\n  const [showVerificationModal, setShowVerificationModal] = useState(false);\n  const [currentVerification, setCurrentVerification] = useState(null);\n  const [storageResetDetected, setStorageResetDetected] = useState(false);\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const recipientCheckTimeoutRef = useRef(null);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeDevice = async () => {\n      try {\n        // Check if localStorage has been reset\n        const isReset = detectStorageReset();\n        setStorageResetDetected(isReset);\n        if (isReset) {\n          setSecurityAlert({\n            username: 'System',\n            message: 'Your browser storage has been reset. You will need to verify contacts again.',\n            type: 'warning'\n          });\n        }\n\n        // Get device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n\n        // Initialize encryption\n        await initializeEncryption(visitorId);\n      } catch (error) {\n        console.error('Failed to initialize device:', error);\n        // Generate a fallback device ID\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\n        setDeviceId(fallbackId);\n\n        // Initialize encryption with fallback ID\n        await initializeEncryption(fallbackId);\n      }\n    };\n    initializeDevice();\n  }, []);\n\n  // Initialize encryption\n  const initializeEncryption = async deviceIdentifier => {\n    try {\n      setEncryptionStatus('initializing');\n\n      // Check if we have keys in localStorage\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\n      if (storedKeys) {\n        // We have stored keys, check if they're valid\n        try {\n          const parsedKeys = JSON.parse(storedKeys);\n\n          // Validate the keys by testing encryption/decryption\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\n            try {\n              // Test encryption with the stored keys\n              const testMessage = \"test-encryption-\" + Date.now();\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\n              if (decrypted === testMessage) {\n                // Keys are valid\n                setKeyPair(parsedKeys);\n                console.log('Loaded and validated existing encryption keys');\n                setEncryptionStatus('ready');\n              } else {\n                console.warn('Stored keys failed validation test');\n                await generateAndStoreNewKeys(deviceIdentifier);\n              }\n            } catch (testError) {\n              console.error('Error testing stored keys:', testError);\n              await generateAndStoreNewKeys(deviceIdentifier);\n            }\n          } else {\n            console.warn('Stored keys are incomplete');\n            await generateAndStoreNewKeys(deviceIdentifier);\n          }\n        } catch (parseError) {\n          console.error('Error parsing stored keys:', parseError);\n          await generateAndStoreNewKeys(deviceIdentifier);\n        }\n      } else {\n        // No stored keys, generate new ones\n        await generateAndStoreNewKeys(deviceIdentifier);\n      }\n    } catch (error) {\n      console.error('Error initializing encryption:', error);\n      setEncryptionStatus('error');\n      setSecurityAlert({\n        username: 'System',\n        message: 'Failed to initialize encryption. Messages will not be secure.',\n        type: 'error'\n      });\n      setEncryptionEnabled(false);\n    }\n  };\n\n  // Generate and store new keys\n  const generateAndStoreNewKeys = async deviceIdentifier => {\n    try {\n      console.log('Generating new encryption keys...');\n      const newKeyPair = await generateKeyPair();\n      setKeyPair(newKeyPair);\n\n      // Store keys in localStorage\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\n      console.log('Generated and stored new encryption keys');\n      setEncryptionStatus('ready');\n    } catch (error) {\n      console.error('Error generating new keys:', error);\n      throw error;\n    }\n  };\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking connection status...');\n    setRelayStatus('checking');\n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, {\n        timeout: 5000\n      });\n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Connection online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n\n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Server may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Connection online. Please login.');\n      tempSocket.disconnect();\n    });\n    tempSocket.on('connect_error', err => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Connection offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Chat management functions\n  const openChat = async chatUsername => {\n    // Check if we already have messages for this chat\n    if (!chatMessages[chatUsername]) {\n      // Load chat history from localStorage\n      const history = loadChatHistory(username, chatUsername);\n\n      // Update chat messages\n      setChatMessages(prev => ({\n        ...prev,\n        [chatUsername]: history\n      }));\n    }\n\n    // Mark chat as active\n    setActiveChats(prev => ({\n      ...prev,\n      [chatUsername]: true\n    }));\n\n    // Set as current chat\n    setCurrentChat(chatUsername);\n\n    // Reset unread count\n    setUnreadCounts(prev => ({\n      ...prev,\n      [chatUsername]: 0\n    }));\n    resetUnreadCount(username, chatUsername);\n\n    // Check recipient status\n    checkUserStatus(chatUsername);\n  };\n  const closeChat = chatUsername => {\n    // Mark chat as inactive\n    setActiveChats(prev => {\n      const newActiveChats = {\n        ...prev\n      };\n      delete newActiveChats[chatUsername];\n      return newActiveChats;\n    });\n\n    // If this was the current chat, set current chat to null\n    if (currentChat === chatUsername) {\n      setCurrentChat(null);\n    }\n  };\n  const checkUserStatus = chatUsername => {\n    if (!socketRef.current || !chatUsername) return;\n\n    // First check if the user is in the online users list\n    const isOnline = onlineUsers.includes(chatUsername);\n    if (isOnline) {\n      setRecipientStatuses(prev => ({\n        ...prev,\n        [chatUsername]: {\n          exists: true,\n          online: true\n        }\n      }));\n      return;\n    }\n\n    // Otherwise, check with the server\n    socketRef.current.emit('checkRecipient', {\n      username: chatUsername\n    }, response => {\n      if (response && response.exists) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: {\n            exists: true,\n            online: response.online || false\n          }\n        }));\n      } else {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: {\n            exists: false,\n            online: false\n          }\n        }));\n      }\n    });\n  };\n  const handleClearAllHistory = () => {\n    if (window.confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {\n      // Ask if they also want to clear verification keys\n      const clearKeys = window.confirm('Do you also want to clear all identity verification keys?\\n\\n' + 'If you choose YES, you will need to re-verify all contacts.\\n' + 'If you choose NO, your contacts will remain verified but chat history will be cleared.');\n\n      // Clear all chat history from localStorage\n      clearAllChatHistory(username);\n\n      // Clear verification keys if requested\n      if (clearKeys) {\n        clearAllVerifiedKeys(username);\n        setVerificationStatuses({});\n      }\n\n      // Reset state\n      setChatMessages({});\n      setUnreadCounts({});\n      setActiveChats({});\n      setCurrentChat(null);\n\n      // Show confirmation\n      setSecurityAlert({\n        username: 'System',\n        message: clearKeys ? 'All chat history and verification keys have been cleared.' : 'All chat history has been cleared.',\n        type: 'info'\n      });\n    }\n  };\n  const handleNewChat = chatUsername => {\n    if (chatUsername === username) {\n      setSecurityAlert({\n        username: 'System',\n        message: 'You cannot chat with yourself.',\n        type: 'error'\n      });\n      return;\n    }\n\n    // Open the chat\n    openChat(chatUsername);\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n    }\n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        clearTimeout(recipientCheckTimeoutRef.current);\n        clearTimeout(typingTimeoutRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n\n  // Effect to save chat messages to localStorage when they change\n  useEffect(() => {\n    if (username && Object.keys(chatMessages).length > 0) {\n      // Save each chat's messages to localStorage\n      Object.keys(chatMessages).forEach(chatUser => {\n        saveChatHistory(username, chatUser, chatMessages[chatUser]);\n      });\n    }\n  }, [username, chatMessages]);\n  useEffect(() => {\n    if (connected && socketRef.current) {\n      const fetchRelayInfo = () => {\n        console.log('Fetching relay info...');\n\n        // First try to get relay info directly from the socket\n        socketRef.current.emit('getRelayInfo', {}, info => {\n          if (info && info.relayId) {\n            console.log('Received relay info from socket:', info);\n            // Update relay server information\n            setRelayServerUrl(info.relayId);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: info.relayId,\n              relayStatus: info.status || 'connected',\n              connectedUsers: info.connectedUsers,\n              ip: info.ip,\n              port: info.port\n            }));\n\n            // Show connection info automatically on first connect\n            if (!showConnectionInfo) {\n              setShowConnectionInfo(true);\n\n              // Auto-hide after 5 seconds\n              setTimeout(() => {\n                setShowConnectionInfo(false);\n              }, 5000);\n            }\n          } else {\n            console.warn('No relay info received from socket, checking with base node');\n\n            // If we're connected to the base node, try to get our relay assignment\n            socketRef.current.emit('getMyRelayInfo', {\n              username\n            }, relayInfo => {\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\n                console.log('Received relay assignment from base node:', relayInfo);\n                if (relayInfo.isDirect) {\n                  // We're directly connected to the base node\n                  setRelayServerUrl('Direct to Base Node');\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: 'direct',\n                    relayStatus: 'direct_to_base'\n                  }));\n                } else {\n                  // We're assigned to a relay\n                  setRelayServerUrl(relayInfo.relayId);\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: relayInfo.relayId,\n                    relayStatus: 'assigned_by_base'\n                  }));\n                }\n              } else {\n                console.warn('No relay assignment from base node, assuming direct connection');\n\n                // If we can't get relay info, we're probably directly connected to the base node\n                const socketId = socketRef.current.id;\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\n                setConnectionDetails(prev => ({\n                  ...prev,\n                  relayId: 'direct',\n                  relayStatus: 'direct_to_base'\n                }));\n              }\n            });\n          }\n        });\n      };\n\n      // Get relay info immediately and then every 10 seconds\n      fetchRelayInfo();\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\n      return () => clearInterval(relayInfoInterval);\n    }\n  }, [connected, showConnectionInfo, username]);\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    // Always connect to base node first for handshake and relay discovery\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\n    setStatus('Connecting to base node for handshake...');\n\n    // Connect to base node\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n\n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node for handshake');\n      setRelayStatus('online');\n\n      // When connecting to the base node, set the relay information accordingly\n      setRelayServerUrl(`Base Node (Handshake)`);\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL,\n        relayId: 'base_handshake',\n        relayStatus: 'handshake'\n      });\n\n      // Get available relays first\n      socketRef.current.emit('getAvailableRelays', {}, response => {\n        console.log('Available relays:', response);\n        if (response && response.relays && response.relays.length > 0) {\n          // Cache relay information\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\n            timestamp: Date.now(),\n            relays: response.relays\n          }));\n\n          // Register with base node temporarily\n          registerWithBaseNode(() => {\n            // After successful registration, connect to a relay\n            connectToRelay(response.relays);\n          });\n        } else {\n          // No relays available, register directly with base node\n          registerWithBaseNode(() => {\n            // Set UI to indicate we're using base node as fallback\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            setStatus('Using Base Node as fallback (no relays available)');\n\n            // Start polling for available relays\n            startRelayPolling();\n          });\n        }\n      });\n    });\n    const registerWithBaseNode = callback => {\n      // Register with base node\n      socketRef.current.emit('registerUser', {\n        username,\n        deviceId\n      }, response => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully with base node');\n\n          // Set up socket event handlers\n          connectSocketEvents();\n\n          // Get initial data\n          getOnlineUsers();\n          startPingInterval();\n\n          // Execute callback if provided\n          if (callback && typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`,\n            type: 'error'\n          });\n        }\n      });\n    };\n    socketRef.current.on('connect_error', err => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n\n      // Try to use cached relays if available\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\n      let cachedRelays = [];\n      if (cachedRelayInfo) {\n        try {\n          const parsedCache = JSON.parse(cachedRelayInfo);\n          if (parsedCache.timestamp && Date.now() - parsedCache.timestamp < 3600000) {\n            // Cache valid for 1 hour\n            cachedRelays = parsedCache.relays || [];\n            console.log('Using cached relay information:', cachedRelays);\n            if (cachedRelays.length > 0) {\n              setTimeout(() => {\n                connectToRelay(cachedRelays);\n              }, 1000);\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing cached relay info:', error);\n        }\n      }\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n\n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect' && connected) {\n        setTimeout(() => {\n          if (connected) {\n            // Try to reconnect to base node first\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n  };\n\n  // Function to connect to a relay server\n  const connectToRelay = relays => {\n    if (!relays || !relays.length) {\n      console.log('No relays available to connect to');\n      return;\n    }\n\n    // Use the first available relay\n    const relay = relays[0];\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\n    console.log(`Switching to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay server: ${relay.id}...`);\n\n    // Disconnect from base node first\n    if (socketRef.current) {\n      // Keep a reference to the old socket for cleanup\n      const oldSocket = socketRef.current;\n\n      // Create new socket for relay\n      socketRef.current = io(relayUrl, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 2000,\n        forceNew: true\n      });\n\n      // Set a timeout to disconnect from base node after relay connection is established\n      const relayConnectionTimeout = setTimeout(() => {\n        if (!socketRef.current || !socketRef.current.connected) {\n          console.log('Relay connection timed out, staying with base node');\n          socketRef.current = oldSocket; // Restore old socket\n          setStatus('Using Base Node (relay connection failed)');\n          setRelayServerUrl('Base Node (Fallback)');\n          setConnectionDetails(prev => ({\n            ...prev,\n            relayId: 'direct',\n            relayStatus: 'direct_to_base'\n          }));\n\n          // Start polling for available relays\n          startRelayPolling();\n        }\n      }, 5000);\n      socketRef.current.on('connect', () => {\n        clearTimeout(relayConnectionTimeout);\n        console.log(`Connected to relay server: ${relayUrl}`);\n\n        // Register with the relay\n        socketRef.current.emit('register', {\n          username,\n          deviceId\n        }, response => {\n          if (response && response.success) {\n            console.log('Successfully registered with relay');\n\n            // Now we can safely disconnect from the base node\n            oldSocket.disconnect();\n            setStatus(`Connected to relay server: ${relay.id}`);\n            setRelayServerUrl(relay.id);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: relay.id,\n              socketId: socketRef.current.id,\n              transport: socketRef.current.io.engine.transport.name,\n              relayStatus: 'connected_to_relay'\n            }));\n\n            // Set up socket event handlers\n            connectSocketEvents();\n\n            // Start ping interval\n            startPingInterval();\n\n            // Show connection info automatically\n            setShowConnectionInfo(true);\n            setTimeout(() => {\n              setShowConnectionInfo(false);\n            }, 5000);\n          } else {\n            console.error('Failed to register with relay:', response);\n            setStatus('Failed to register with relay server');\n\n            // Disconnect from relay and stay with base node\n            socketRef.current.disconnect();\n            socketRef.current = oldSocket;\n            setStatus('Using Base Node (relay registration failed)');\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n\n            // Start polling for available relays\n            startRelayPolling();\n          }\n        });\n      });\n      socketRef.current.on('connect_error', err => {\n        clearTimeout(relayConnectionTimeout);\n        console.error(`Relay connection error: ${err.message}`);\n\n        // Stay with base node\n        socketRef.current = oldSocket;\n        setStatus('Using Base Node (relay connection error)');\n        setRelayServerUrl('Base Node (Fallback)');\n        setConnectionDetails(prev => ({\n          ...prev,\n          relayId: 'direct',\n          relayStatus: 'direct_to_base'\n        }));\n\n        // Start polling for available relays\n        startRelayPolling();\n      });\n      socketRef.current.on('disconnect', reason => {\n        console.log(`Disconnected from relay: ${reason}`);\n\n        // If we were previously connected to a relay and lost connection\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\n          setStatus(`Disconnected from relay: ${reason}`);\n\n          // Try to reconnect to base node\n          setTimeout(() => {\n            if (connected) {\n              connectToBaseNode();\n            }\n          }, 1000);\n        }\n      });\n    }\n  };\n\n  // Function to periodically poll for available relays when using base node as fallback\n  const startRelayPolling = () => {\n    // Clear any existing polling interval\n    if (window.relayPollingInterval) {\n      clearInterval(window.relayPollingInterval);\n    }\n\n    // Set up polling interval\n    window.relayPollingInterval = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected && connectionDetails.relayStatus === 'direct_to_base') {\n        console.log('Polling for available relays...');\n        socketRef.current.emit('getAvailableRelays', {}, response => {\n          if (response && response.relays && response.relays.length > 0) {\n            console.log('Found available relays:', response.relays);\n\n            // Cache relay information\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\n              timestamp: Date.now(),\n              relays: response.relays\n            }));\n\n            // Connect to a relay\n            connectToRelay(response.relays);\n\n            // Clear polling interval\n            clearInterval(window.relayPollingInterval);\n          } else {\n            console.log('No relays available, continuing to use base node');\n          }\n        });\n      }\n    }, 30000); // Poll every 30 seconds\n\n    // Clean up on component unmount\n    return () => {\n      if (window.relayPollingInterval) {\n        clearInterval(window.relayPollingInterval);\n      }\n    };\n  };\n  const connectSocketEvents = () => {\n    // Message handling\n    socketRef.current.on('receiveMessage', async data => {\n      console.log('Received message:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp,\n        encrypted,\n        publicKey,\n        bounced\n      } = data;\n\n      // Store sender's public key if provided\n      if (publicKey && from) {\n        console.log(`Storing public key for ${from}`);\n        setPublicKeys(prev => ({\n          ...prev,\n          [from]: publicKey\n        }));\n\n        // Check if this is the first message from this user\n        const previousMessages = chatMessages[from] || [];\n        const isFirstMessage = previousMessages.length === 0;\n\n        // Verify the key if we have a stored key for this user\n        if (hasVerifiedKey(username, from)) {\n          // We have a verified key, check if it matches\n          const verificationResult = await verifyKey(username, from, publicKey, fromDeviceId);\n\n          // Generate fingerprint and then update verification status\n          generateKeyFingerprint(publicKey).then(fingerprint => {\n            setVerificationStatuses(prev => ({\n              ...prev,\n              [from]: {\n                verified: verificationResult.verified,\n                status: verificationResult.status,\n                message: verificationResult.message,\n                verifiedAt: verificationResult.verifiedAt,\n                fingerprint: fingerprint\n              }\n            }));\n          });\n\n          // Show warning if key doesn't match\n          if (!verificationResult.verified) {\n            setSecurityAlert({\n              username: from,\n              message: `Warning: ${from}'s identity could not be verified. ${verificationResult.message}`,\n              type: 'warning'\n            });\n          }\n        } else if (isFirstMessage) {\n          // This is the first message and we don't have a verified key\n          // Set as unverified and prompt for verification\n          generateKeyFingerprint(publicKey).then(fingerprint => {\n            setVerificationStatuses(prev => ({\n              ...prev,\n              [from]: {\n                verified: false,\n                status: 'unverified',\n                message: 'Identity not verified',\n                fingerprint\n              }\n            }));\n\n            // Show verification prompt\n            setSecurityAlert({\n              username: 'System',\n              message: `New message from ${from}. Click on \"UNVERIFIED\" to verify their identity.`,\n              type: 'info'\n            });\n          });\n        }\n      }\n\n      // If this is a bounced message, show a notification\n      if (bounced) {\n        console.log(`Received bounced message from ${from}`);\n        setSecurityAlert({\n          username: 'System',\n          message: `Received delayed message from ${from} that was sent while you were offline.`,\n          type: 'info'\n        });\n      }\n\n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`,\n          type: 'warning'\n        });\n      }\n      let decryptedMessage = message;\n      let decryptionStatus = 'plaintext';\n\n      // Decrypt the message if it's encrypted and we have our private key\n      if (encrypted && keyPair !== null && keyPair !== void 0 && keyPair.privateKey) {\n        try {\n          console.log('Decrypting message...');\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\n          decryptionStatus = 'decrypted';\n          console.log('Message decrypted successfully');\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\n          decryptionStatus = 'failed';\n          setSecurityAlert({\n            username: 'System',\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\n            type: 'warning'\n          });\n        }\n      }\n\n      // Create the message object\n      const messageObj = {\n        from,\n        message: decryptedMessage,\n        fromDeviceId,\n        timestamp: new Date(timestamp || new Date()),\n        encrypted,\n        decryptionStatus,\n        bounced: bounced || false\n      };\n\n      // Add to global messages for backward compatibility\n      setMessages(msgs => [...msgs, messageObj]);\n\n      // Add message to the appropriate chat\n      setChatMessages(prev => {\n        const updatedMessages = {\n          ...prev,\n          [from]: [...(prev[from] || []), messageObj]\n        };\n\n        // Save to localStorage\n        saveChatHistory(username, from, updatedMessages[from]);\n        return updatedMessages;\n      });\n\n      // If this chat is not the current chat, increment unread count\n      if (currentChat !== from) {\n        setUnreadCounts(prev => {\n          const newCounts = {\n            ...prev,\n            [from]: (prev[from] || 0) + 1\n          };\n\n          // Save to localStorage\n          saveUnreadCounts(username, newCounts);\n          return newCounts;\n        });\n\n        // Also increment in localStorage\n        incrementUnreadCount(username, from);\n      }\n\n      // Make sure this user is in our active chats\n      setActiveChats(prev => {\n        if (!prev[from]) {\n          return {\n            ...prev,\n            [from]: true\n          };\n        }\n        return prev;\n      });\n\n      // Check user status\n      checkUserStatus(from);\n    });\n\n    // Handle public key requests\n    socketRef.current.on('publicKeyRequest', ({\n      from\n    }, ack) => {\n      console.log(`Public key requested by ${from}`);\n      if (keyPair && keyPair.publicKey) {\n        console.log(`Sending public key to ${from}`);\n        if (ack) ack({\n          success: true,\n          publicKey: keyPair.publicKey\n        });\n      } else {\n        console.warn('No public key available to share');\n        if (ack) ack({\n          success: false,\n          reason: 'Public key not available'\n        });\n      }\n    });\n\n    // User status updates\n    socketRef.current.on('userStatusUpdate', data => {\n      console.log('User status update:', data);\n      const {\n        username: user,\n        online\n      } = data;\n\n      // If this is our current recipient, update their status\n      if (user === recipient) {\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\n        setRecipientStatus(prev => ({\n          ...prev,\n          exists: true,\n          // If we got a status update, the user definitely exists\n          online,\n          notRegisteredYet: false // Clear this flag since we know the user exists\n        }));\n      }\n\n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          console.log(`Adding ${user} to online users list`);\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          console.log(`Removing ${user} from online users list`);\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n\n      // Update recipient status for all active chats\n      if (activeChats[user]) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [user]: {\n            ...prev[user],\n            exists: true,\n            online\n          }\n        }));\n      }\n\n      // If we're currently checking a recipient, refresh their status\n      if (recipient) {\n        checkRecipientStatus();\n      }\n    });\n\n    // Handle bulk online users updates\n    socketRef.current.on('onlineUsersUpdate', data => {\n      console.log('Online users update:', data);\n      if (data && Array.isArray(data.users)) {\n        setOnlineUsers(data.users);\n\n        // If we have a recipient, check if they're in the online users list\n        if (recipient && data.users.includes(recipient)) {\n          setRecipientStatus(prev => ({\n            ...prev,\n            exists: true,\n            online: true,\n            notRegisteredYet: false\n          }));\n        } else if (recipient) {\n          // If recipient is not in the online users list, refresh their status\n          checkRecipientStatus();\n        }\n\n        // Update status for all active chats\n        Object.keys(activeChats).forEach(chatUser => {\n          const isOnline = data.users.includes(chatUser);\n          setRecipientStatuses(prev => {\n            var _prev$chatUser;\n            return {\n              ...prev,\n              [chatUser]: {\n                ...prev[chatUser],\n                exists: ((_prev$chatUser = prev[chatUser]) === null || _prev$chatUser === void 0 ? void 0 : _prev$chatUser.exists) || isOnline,\n                online: isOnline\n              }\n            };\n          });\n        });\n      }\n    });\n\n    // Typing indicators\n    socketRef.current.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n\n      // Update typing status for this user\n      setTypingUsers(prev => ({\n        ...prev,\n        [typingUser]: true\n      }));\n\n      // For backward compatibility\n      if (typingUser === recipient) {\n        setTyping(true);\n      }\n\n      // Clear any existing timeout\n      clearTimeout(typingTimeoutRef.current);\n\n      // Set a timeout to clear the typing indicator after 3 seconds\n      typingTimeoutRef.current = setTimeout(() => {\n        setTypingUsers(prev => ({\n          ...prev,\n          [typingUser]: false\n        }));\n\n        // For backward compatibility\n        if (typingUser === recipient) {\n          setTyping(false);\n        }\n      }, 3000);\n    });\n\n    // Error handling\n    socketRef.current.on('error', error => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`,\n        type: 'error'\n      });\n    });\n  };\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, users => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        // Send ping to keep connection alive\n        socketRef.current.emit('ping', {}, response => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n\n        // Also refresh online users list\n        getOnlineUsers();\n\n        // If we have a recipient, check their status\n        if (recipient) {\n          checkRecipientStatus();\n        }\n      }\n    }, 30000); // Every 30 seconds\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient || !socketRef.current) {\n      setRecipientStatus({\n        exists: false,\n        online: false,\n        checking: false\n      });\n      return;\n    }\n    console.log(`Checking status for recipient: ${recipient}`);\n\n    // Set status to checking while we wait for the response\n    setRecipientStatus(prev => ({\n      ...prev,\n      checking: true\n    }));\n\n    // Set a timeout to clear the checking status if we don't get a response\n    const checkingTimeout = setTimeout(() => {\n      setRecipientStatus(prev => {\n        if (prev.checking) {\n          return {\n            ...prev,\n            checking: false\n          };\n        }\n        return prev;\n      });\n    }, 3000); // 3 seconds timeout\n\n    // First check if the recipient is in the online users list\n    if (onlineUsers.includes(recipient)) {\n      clearTimeout(checkingTimeout);\n      console.log(`${recipient} found in online users list`);\n      setRecipientStatus({\n        exists: true,\n        online: true,\n        checking: false\n      });\n      return;\n    }\n\n    // If we're connected to a relay, use the checkRecipient event\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\n      socketRef.current.emit('checkRecipient', {\n        username: recipient\n      }, relayResponse => {\n        clearTimeout(checkingTimeout);\n        console.log('Relay recipient check response:', relayResponse);\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\n          // Only update if we got a valid response\n          setRecipientStatus({\n            ...relayResponse,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    } else {\n      // If connected directly to base node, use checkUser\n      socketRef.current.emit('checkUser', {\n        username: recipient\n      }, response => {\n        clearTimeout(checkingTimeout);\n        console.log('Base node recipient check response:', response);\n\n        // If we got a valid response, use it\n        if (response && typeof response.exists === 'boolean') {\n          setRecipientStatus({\n            ...response,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    }\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Key verification functions\n  const initializeVerificationStatuses = () => {\n    // Load verification statuses for all active chats\n    const activeChats = getActiveChats(username);\n    const initialVerificationStatuses = {};\n    activeChats.forEach(chatUser => {\n      const verifiedKey = getVerifiedKey(username, chatUser);\n      if (verifiedKey) {\n        initialVerificationStatuses[chatUser] = {\n          verified: true,\n          status: 'verified',\n          message: 'Identity verified',\n          verifiedAt: verifiedKey.verifiedAt,\n          fingerprint: verifiedKey.fingerprint\n        };\n      } else {\n        initialVerificationStatuses[chatUser] = {\n          verified: false,\n          status: 'unverified',\n          message: 'Identity not verified'\n        };\n      }\n    });\n    setVerificationStatuses(initialVerificationStatuses);\n  };\n  const handleVerifyIdentity = contactUsername => {\n    // Get the public key for this contact\n    const contactPublicKey = publicKeys[contactUsername];\n    if (!contactPublicKey) {\n      setSecurityAlert({\n        username: 'System',\n        message: `Cannot verify ${contactUsername}'s identity: No public key available.`,\n        type: 'error'\n      });\n      return;\n    }\n\n    // Generate fingerprint for the key\n    generateKeyFingerprint(contactPublicKey).then(fingerprint => {\n      // Check if we already have a verified key for this contact\n      const verifiedKey = getVerifiedKey(username, contactUsername);\n      let verificationInfo = {\n        contactUsername,\n        fingerprint,\n        status: 'new_contact',\n        message: 'New contact verification'\n      };\n      if (verifiedKey) {\n        // We have a verified key, check if it matches\n        if (verifiedKey.fingerprint !== fingerprint) {\n          // Key mismatch\n          verificationInfo = {\n            contactUsername,\n            fingerprint,\n            previousFingerprint: verifiedKey.fingerprint,\n            status: 'key_mismatch',\n            message: 'Public key has changed since last verification',\n            verifiedAt: verifiedKey.verifiedAt\n          };\n        } else {\n          // Key matches\n          verificationInfo = {\n            contactUsername,\n            fingerprint,\n            status: 'verified',\n            message: 'Identity verified',\n            verifiedAt: verifiedKey.verifiedAt\n          };\n        }\n      }\n\n      // Show verification modal\n      setCurrentVerification(verificationInfo);\n      setShowVerificationModal(true);\n    }).catch(error => {\n      console.error('Error generating key fingerprint:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error verifying identity: ${error.message}`,\n        type: 'error'\n      });\n    });\n  };\n  const handleConfirmVerification = () => {\n    if (!currentVerification || !currentVerification.contactUsername) return;\n    const {\n      contactUsername\n    } = currentVerification;\n    const contactPublicKey = publicKeys[contactUsername];\n    if (!contactPublicKey) {\n      setSecurityAlert({\n        username: 'System',\n        message: `Cannot verify ${contactUsername}'s identity: No public key available.`,\n        type: 'error'\n      });\n      setShowVerificationModal(false);\n      return;\n    }\n\n    // Store the verified key\n    storeVerifiedKey(username, contactUsername, contactPublicKey, deviceId);\n\n    // Update verification status\n    setVerificationStatuses(prev => ({\n      ...prev,\n      [contactUsername]: {\n        verified: true,\n        status: 'verified',\n        message: 'Identity verified',\n        verifiedAt: Date.now(),\n        fingerprint: currentVerification.fingerprint\n      }\n    }));\n\n    // Show confirmation\n    setSecurityAlert({\n      username: 'System',\n      message: `${contactUsername}'s identity has been verified.`,\n      type: 'success'\n    });\n\n    // Close modal\n    setShowVerificationModal(false);\n  };\n  const handleCancelVerification = () => {\n    setShowVerificationModal(false);\n  };\n\n  // Initialize chat data from localStorage\n  const initializeChatData = () => {\n    // Load active chats\n    const activeChats = getActiveChats(username);\n\n    // Initialize chat data\n    const initialChatMessages = {};\n    const initialUnreadCounts = loadUnreadCounts(username);\n    const initialRecipientStatuses = {};\n\n    // Load chat history for each active chat\n    activeChats.forEach(chatUser => {\n      initialChatMessages[chatUser] = loadChatHistory(username, chatUser);\n      initialRecipientStatuses[chatUser] = {\n        exists: true,\n        online: onlineUsers.includes(chatUser)\n      };\n    });\n\n    // Update state\n    setChatMessages(initialChatMessages);\n    setUnreadCounts(initialUnreadCounts);\n    setRecipientStatuses(initialRecipientStatuses);\n\n    // Set active chats\n    const activeChatsObj = {};\n    activeChats.forEach(chatUser => {\n      activeChatsObj[chatUser] = true;\n    });\n    setActiveChats(activeChatsObj);\n\n    // Initialize verification statuses\n    initializeVerificationStatuses();\n  };\n  const handleUsernameSubmit = async e => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      setIsCheckingUsername(true);\n      const tempSocket = io(BASE_NODE_URL, {\n        forceNew: true,\n        timeout: 5000\n      });\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', {\n          username: username.trim()\n        }, response => {\n          setIsCheckingUsername(false);\n          if (response && response.exists) {\n            setUsernameAvailable(false);\n            setSecurityAlert({\n              username: 'System',\n              message: `Username \"${username}\" is already taken.`,\n              type: 'error'\n            });\n            // Explicitly disconnect and do NOT set connected to true\n            tempSocket.disconnect();\n          } else {\n            setUsernameAvailable(true);\n            setConnected(true);\n\n            // Initialize chat data from localStorage\n            initializeChatData();\n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', error => {\n        console.error('Connection error during username check:', error);\n        setIsCheckingUsername(false);\n        setSecurityAlert({\n          username: 'System',\n          message: 'Could not verify username. Base node may be offline.',\n          type: 'error'\n        });\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        username: 'System',\n        message: 'Cannot connect: Server is offline',\n        type: 'error'\n      });\n    }\n  };\n  const handleRecipientChange = e => {\n    const newRecipient = e.target.value.trim();\n    setRecipient(newRecipient);\n\n    // Reset recipient status when the recipient changes\n    setRecipientStatus({\n      exists: false,\n      online: false,\n      checking: false\n    });\n\n    // If the recipient is not empty, check their status\n    if (newRecipient && socketRef.current) {\n      // Use a small delay to avoid too many checks while typing\n      if (recipientCheckTimeoutRef.current) {\n        clearTimeout(recipientCheckTimeoutRef.current);\n      }\n      recipientCheckTimeoutRef.current = setTimeout(() => {\n        checkRecipientStatus();\n      }, 500); // 500ms delay\n    }\n  };\n  const handleSend = async (e, bounce = false) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    try {\n      // Show sending indicator\n      setStatus('Sending message...');\n\n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\n      if (!bounce) {\n        // For direct messages, we need to check if the recipient exists and is online\n        const recipientOnline = recipientStatus.online;\n\n        // If recipient is not online, suggest using relay\n        if (!recipientOnline) {\n          setSecurityAlert({\n            username: 'System',\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\n            type: 'warning'\n          });\n          setStatus('Registered successfully');\n          return;\n        }\n      }\n\n      // Get recipient's public key if we don't have it and encryption is enabled\n      if (encryptionEnabled && !publicKeys[recipient]) {\n        try {\n          await requestPublicKey(recipient);\n        } catch (error) {\n          console.error('Failed to get public key:', error);\n          // Continue without encryption if we can't get the key\n        }\n      }\n\n      // Check if this is the first message to this recipient\n      const previousMessages = chatMessages[recipient] || [];\n      const isFirstMessage = previousMessages.length === 0;\n\n      // If this is the first message and we have the recipient's public key but haven't verified it\n      if (isFirstMessage && publicKeys[recipient] && !hasVerifiedKey(username, recipient)) {\n        // Show verification warning\n        const shouldProceed = window.confirm(`⚠️ You haven't previously verified the identity of ${recipient}.\\n\\n` + `Proceed only if you trust them. You can verify their identity after sending the message.`);\n        if (!shouldProceed) {\n          setStatus('Registered successfully');\n          return;\n        }\n\n        // Generate fingerprint for the key\n        const fingerprint = await generateKeyFingerprint(publicKeys[recipient]);\n\n        // Set as unverified\n        setVerificationStatuses(prev => ({\n          ...prev,\n          [recipient]: {\n            verified: false,\n            status: 'unverified',\n            message: 'Identity not verified',\n            fingerprint\n          }\n        }));\n      }\n      let finalMessage = message.trim();\n      let isEncrypted = false;\n\n      // Encrypt the message if encryption is enabled and we have the recipient's public key\n      if (encryptionEnabled && publicKeys[recipient]) {\n        try {\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\n          isEncrypted = true;\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          setSecurityAlert({\n            username: 'System',\n            message: 'Failed to encrypt message. Sending as plaintext.',\n            type: 'warning'\n          });\n        }\n      }\n      const messageData = {\n        to: recipient,\n        message: finalMessage,\n        deviceId,\n        timestamp: new Date().toISOString(),\n        bounce: bounce,\n        // Always use the bounce parameter directly\n        encrypted: isEncrypted,\n        publicKey: keyPair === null || keyPair === void 0 ? void 0 : keyPair.publicKey // Send our public key with the message\n      };\n      console.log('Sending message:', {\n        ...messageData,\n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\n        bounce: bounce\n      });\n\n      // Add a timeout to handle cases where the server doesn't respond\n      const messageTimeout = setTimeout(() => {\n        setSecurityAlert({\n          username: 'System',\n          message: 'Message sending timed out. Server may be offline.',\n          type: 'error'\n        });\n        setStatus('Registered successfully');\n      }, 10000);\n      socketRef.current.emit('sendMessage', messageData, response => {\n        clearTimeout(messageTimeout);\n        console.log('Send message response:', response);\n        setStatus('Registered successfully');\n        if (response && (response.delivered || response.bounced)) {\n          // Create message object\n          const messageObj = {\n            from: username,\n            message: message.trim(),\n            // Store original message for display\n            fromDeviceId: deviceId,\n            timestamp: new Date(),\n            status: response.delivered ? 'delivered' : 'bounced',\n            expiresAt: response.expiresAt,\n            encrypted: isEncrypted\n          };\n\n          // Add to global messages for backward compatibility\n          setMessages(msgs => [...msgs, messageObj]);\n\n          // Add message to the appropriate chat\n          setChatMessages(prev => {\n            const updatedMessages = {\n              ...prev,\n              [recipient]: [...(prev[recipient] || []), messageObj]\n            };\n\n            // Save to localStorage\n            saveChatHistory(username, recipient, updatedMessages[recipient]);\n            return updatedMessages;\n          });\n\n          // Make sure this user is in our active chats\n          setActiveChats(prev => {\n            if (!prev[recipient]) {\n              return {\n                ...prev,\n                [recipient]: true\n              };\n            }\n            return prev;\n          });\n\n          // Clear message input\n          setMessage('');\n\n          // Show notification if message was bounced\n          if (response.bounced) {\n            setSecurityAlert({\n              username: 'System',\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\n              type: 'info'\n            });\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Message delivery failed';\n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\n            if (bounce) {\n              // For bounced messages to non-existent users, show a special message\n              setSecurityAlert({\n                username: 'System',\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\n                type: 'info'\n              });\n\n              // Create message object\n              const messageObj = {\n                from: username,\n                message: message.trim(),\n                fromDeviceId: deviceId,\n                timestamp: new Date(),\n                status: 'bounced',\n                expiresAt: Date.now() + 14400000,\n                // 4 hours\n                encrypted: isEncrypted\n              };\n\n              // Add to global messages for backward compatibility\n              setMessages(msgs => [...msgs, messageObj]);\n\n              // Add message to the appropriate chat\n              setChatMessages(prev => {\n                const updatedMessages = {\n                  ...prev,\n                  [recipient]: [...(prev[recipient] || []), messageObj]\n                };\n\n                // Save to localStorage\n                saveChatHistory(username, recipient, updatedMessages[recipient]);\n                return updatedMessages;\n              });\n\n              // Make sure this user is in our active chats\n              setActiveChats(prev => {\n                if (!prev[recipient]) {\n                  return {\n                    ...prev,\n                    [recipient]: true\n                  };\n                }\n                return prev;\n              });\n\n              // Clear message input\n              setMessage('');\n            } else {\n              setSecurityAlert({\n                username: 'System',\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\n                type: 'warning'\n              });\n            }\n          } else if (errorMsg.includes('offline')) {\n            setSecurityAlert({\n              username: 'System',\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\n              type: 'warning'\n            });\n          } else {\n            setSecurityAlert({\n              username: 'System',\n              message: `Failed to send message: ${errorMsg}`,\n              type: 'error'\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error sending message: ${error.message}`,\n        type: 'error'\n      });\n      setStatus('Registered successfully');\n    }\n  };\n\n  // Request public key from a user\n  const requestPublicKey = async username => {\n    return new Promise((resolve, reject) => {\n      if (!socketRef.current) {\n        reject(new Error('Not connected'));\n        return;\n      }\n      console.log(`Requesting public key for ${username}...`);\n\n      // Set a timeout in case the server doesn't respond\n      const requestTimeout = setTimeout(() => {\n        console.error(`Public key request for ${username} timed out`);\n        reject(new Error('Request timed out'));\n      }, 10000);\n      socketRef.current.emit('requestPublicKey', {\n        username\n      }, response => {\n        clearTimeout(requestTimeout);\n        if (response && response.success && response.publicKey) {\n          console.log(`Received public key for ${username}`);\n          setPublicKeys(prev => ({\n            ...prev,\n            [username]: response.publicKey\n          }));\n          resolve(response.publicKey);\n        } else {\n          const reason = (response === null || response === void 0 ? void 0 : response.reason) || 'Public key not available';\n          console.log(`No public key available for ${username}: ${reason}`);\n          reject(new Error(reason));\n        }\n      });\n    });\n  };\n\n  // Handle relay bounce for any user\n  const handleRelayBounce = e => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) {\n      console.log('Cannot send relay message: missing recipient, message, or socket');\n      return;\n    }\n\n    // Show confirmation before bouncing\n    const confirmBounce = window.confirm(`RELAY MESSAGE\\n\\n` + `Your message to \"${recipient}\" will be securely encrypted and will continuously bounce across the relay network\\n` + `until ${recipient} comes online or registers with the network.\\n\\n` + `It will not be stored at any single point for long, ensuring privacy and delivery reliability.\\n\\n` + `Do you want to continue?`);\n    if (confirmBounce) {\n      // Create a synthetic event object with preventDefault method\n      const syntheticEvent = {\n        preventDefault: () => {}\n      };\n\n      // Call handleSend with our synthetic event and bounce=true\n      handleSend(syntheticEvent, true);\n    }\n  };\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n\n    // Send typing indicator\n    if (socketRef.current && recipient && e.target.value.length > 0) {\n      socketRef.current.emit('typing', {\n        to: recipient\n      });\n    }\n  };\n  const handleDisconnect = () => {\n    // Store the current socket reference\n    const currentSocket = socketRef.current;\n\n    // Reset all state immediately to ensure the UI updates right away\n    setConnected(false);\n    setUsername('');\n    setOnlineUsers([]);\n    setActiveChats({});\n    setChatMessages({});\n    setCurrentChat(null);\n    setStatus('Disconnected');\n    setPublicKeys({});\n    setEncryptionStatus('disconnected');\n    setRecipientStatuses({});\n    setMessages([]);\n    setRecipientStatus({\n      exists: false,\n      online: false\n    });\n\n    // Clear intervals\n    if (pingIntervalRef.current) {\n      clearInterval(pingIntervalRef.current);\n      pingIntervalRef.current = null;\n    }\n\n    // Notify the server and disconnect only if socket exists\n    if (currentSocket) {\n      try {\n        // Notify the server that we're intentionally disconnecting\n        currentSocket.emit('userLogout', {\n          username,\n          deviceId\n        });\n\n        // Give a small delay to ensure the logout message is sent before disconnecting\n        setTimeout(() => {\n          try {\n            if (currentSocket.connected) {\n              currentSocket.disconnect();\n            }\n          } catch (error) {\n            console.error('Error disconnecting socket:', error);\n          }\n          // Clear the socket reference\n          socketRef.current = null;\n        }, 100);\n      } catch (error) {\n        console.error('Error during disconnect:', error);\n        // Ensure socket reference is cleared even if there's an error\n        socketRef.current = null;\n      }\n    } else {\n      console.log('No active socket connection to disconnect');\n      socketRef.current = null;\n    }\n\n    // Set relay status to offline\n    setRelayStatus('offline');\n  };\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  const formatMessageTime = timestamp => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#0a0e14',\n      minHeight: '100vh',\n      width: '100vw',\n      height: '100vh',\n      color: '#a2aabc',\n      display: 'flex',\n      flexDirection: 'column',\n      fontFamily: '\"Fira Code\", monospace',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#171c28',\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          padding: '16px 24px',\n          borderBottom: '1px solid #1e2d3d'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: 0,\n            color: '#5ccfe6',\n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          },\n          children: \"WhisperNet_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1996,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n              color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n              cursor: 'pointer'\n            },\n            onClick: () => setShowConnectionInfo(!showConnectionInfo),\n            children: relayStatus === 'online' ? 'Online' : relayStatus === 'checking' ? 'Checking...' : 'Offline'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2003,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: '#1c3b4b',\n              color: '#5ccfe6',\n              cursor: 'pointer'\n            },\n            onClick: () => setShowAboutPage(true),\n            children: \"About\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2014,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2002,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1989,\n        columnNumber: 9\n      }, this), showConnectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#0d1117',\n          padding: '8px 24px',\n          fontSize: 12,\n          fontFamily: 'monospace',\n          borderBottom: '1px solid #1e2d3d',\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '8px 24px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2038,\n          columnNumber: 13\n        }, this), connected && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Socket ID: \", connectionDetails.socketId || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2041,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Transport: \", connectionDetails.transport || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2042,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Base Node: \", connectionDetails.baseNodeUrl || BASE_NODE_URL]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2043,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#5ccfe6'\n              },\n              children: relayServerUrl || 'Unknown'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2044,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2044,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40'\n              },\n              children: connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2045,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2045,\n            columnNumber: 17\n          }, this), connectionDetails.connectedUsers !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Users on Relay: \", connectionDetails.connectedUsers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2054,\n            columnNumber: 19\n          }, this), connectionDetails.ip && connectionDetails.port && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Address: \", connectionDetails.ip, \":\", connectionDetails.port]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2057,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Connection Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            },\n            children: relayStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2061,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2061,\n          columnNumber: 13\n        }, this), deviceId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Device ID: \", deviceId.substring(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2064,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2028,\n        columnNumber: 11\n      }, this), showAboutPage && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          background: 'rgba(13, 17, 23, 0.95)',\n          zIndex: 1000,\n          padding: '20px',\n          overflowY: 'auto',\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              margin: 0,\n              color: '#5ccfe6',\n              fontFamily: '\"Fira Code\", monospace',\n              letterSpacing: '1px'\n            },\n            children: \"About WhisperNet_\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2088,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              background: 'none',\n              border: 'none',\n              color: '#636b78',\n              cursor: 'pointer',\n              fontSize: 24\n            },\n            onClick: () => setShowAboutPage(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2094,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2082,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#a2aabc',\n            fontFamily: '\"Fira Code\", monospace',\n            fontSize: '14px',\n            lineHeight: '1.6',\n            maxWidth: '800px',\n            margin: '0 auto',\n            padding: '20px',\n            background: '#171c28',\n            borderRadius: '8px',\n            border: '1px solid #1e2d3d'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e',\n              marginTop: 0\n            },\n            children: \"What is WhisperNet?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"WhisperNet is a secure, decentralized messaging platform designed for private communications. It uses end-to-end encryption and a distributed relay network to ensure your messages remain private and secure.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: \"How It Works\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#5ccfe6'\n              },\n              children: \"End-to-End Encryption:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2128,\n              columnNumber: 17\n            }, this), \" All messages are encrypted on your device before being sent. Only the intended recipient can decrypt and read them.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#5ccfe6'\n              },\n              children: \"Distributed Relay Network:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2132,\n              columnNumber: 17\n            }, this), \" Instead of storing messages on a central server, WhisperNet uses a network of relay nodes to pass messages between users. This prevents any single point of failure or surveillance.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#5ccfe6'\n              },\n              children: \"Message Bouncing:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2136,\n              columnNumber: 17\n            }, this), \" When a recipient is offline, messages \\\"bounce\\\" through the relay network until delivery. Messages are never stored permanently on any server.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: \"Key Features\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              paddingLeft: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#ff8f40'\n                },\n                children: \"Direct Messaging:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2142,\n                columnNumber: 21\n              }, this), \" Send encrypted messages directly when both users are online.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2142,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#ff8f40'\n                },\n                children: \"Relay Messaging:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2143,\n                columnNumber: 21\n              }, this), \" Send messages that will be delivered when the recipient comes online.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#ff8f40'\n                },\n                children: \"Identity Verification:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2144,\n                columnNumber: 21\n              }, this), \" Verify the identity of your contacts to prevent man-in-the-middle attacks.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#ff8f40'\n                },\n                children: \"Offline Message Delivery:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2145,\n                columnNumber: 21\n              }, this), \" Messages sent while you're offline will be delivered when you reconnect.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2145,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: \"Security Model\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"WhisperNet uses asymmetric cryptography (public/private key pairs) to secure communications:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              paddingLeft: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Each user generates a unique cryptographic identity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2153,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Messages are encrypted with the recipient's public key\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Only the recipient's private key can decrypt the messages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2155,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Key verification ensures you're talking to the right person\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2156,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2152,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: \"The Relay Network\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The relay network is what makes WhisperNet unique:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              paddingLeft: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Messages bounce between relay nodes until delivered\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No message is stored permanently on any single server\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2165,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"The network is resilient to outages and censorship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2166,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Your IP address is obscured from the recipient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2167,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: \"Privacy Considerations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"WhisperNet is designed with privacy in mind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              paddingLeft: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No phone number or email required to register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No metadata collection or user tracking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No permanent storage of messages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2177,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Open-source code for transparency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2178,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2174,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: \"Application Workflow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              margin: '20px 0'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                background: '#0d1117',\n                padding: '20px',\n                borderRadius: '8px',\n                border: '1px solid #1e2d3d',\n                display: 'inline-block',\n                maxWidth: '100%',\n                overflowX: 'auto'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  color: '#a2aabc',\n                  margin: 0,\n                  textAlign: 'left',\n                  fontFamily: '\"Fira Code\", monospace',\n                  fontSize: '12px',\n                  lineHeight: '1.5'\n                },\n                children: `┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│                 │     │                 │     │                 │\n│  User Interface │     │  Relay Network  │     │  Encryption     │\n│                 │     │                 │     │  System         │\n└────────┬────────┘     └────────┬────────┘     └────────┬────────┘\n         │                       │                       │\n         │                       │                       │\n         ▼                       ▼                       ▼\n┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│ - Login         │     │ - Message       │     │ - Key           │\n│ - Chat UI       │     │   Routing       │     │   Generation    │\n│ - User List     │     │ - Relay         │     │ - Encryption    │\n│ - Message Input │     │   Bouncing      │     │ - Decryption    │\n│ - Verification  │     │ - User Status   │     │ - Verification  │\n└────────┬────────┘     └────────┬────────┘     └────────┬────────┘\n         │                       │                       │\n         │                       │                       │\n         ▼                       ▼                       ▼\n┌───────────────────────────────────────────────────────────────┐\n│                                                               │\n│                    Secure Communication                       │\n│                                                               │\n└───────────────────────────────────────────────────────────────┘`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2192,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2183,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: \"Collaborators\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              gap: '30px',\n              flexWrap: 'wrap',\n              margin: '20px 0'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'center'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://github.com/Prathamesh0901\",\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                style: {\n                  color: '#5ccfe6',\n                  textDecoration: 'none'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    fontSize: '16px',\n                    marginBottom: '5px'\n                  },\n                  children: \"Prathmesh Mane\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2242,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: '#636b78',\n                    fontSize: '12px'\n                  },\n                  children: \"github.com/Prathamesh0901\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2243,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2236,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2235,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'center'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://github.com/JaidTamboli\",\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                style: {\n                  color: '#5ccfe6',\n                  textDecoration: 'none'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    fontSize: '16px',\n                    marginBottom: '5px'\n                  },\n                  children: \"Jaid Tamboli\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2254,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: '#636b78',\n                    fontSize: '12px'\n                  },\n                  children: \"github.com/JaidTamboli\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2255,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2248,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2247,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'center'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://github.com/sidinsearch\",\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                style: {\n                  color: '#5ccfe6',\n                  textDecoration: 'none'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    fontSize: '16px',\n                    marginBottom: '5px'\n                  },\n                  children: \"Siddharth Shinde\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2266,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: '#636b78',\n                    fontSize: '12px'\n                  },\n                  children: \"github.com/sidinsearch\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2267,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2260,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2259,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2228,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '30px',\n              textAlign: 'center',\n              color: '#636b78',\n              fontSize: '12px'\n            },\n            children: \"WhisperNet \\xA9 2023 - Secure, Private, Decentralized Communications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2272,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2069,\n        columnNumber: 11\n      }, this), securityAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#4b1c1c',\n          color: '#ff8f40',\n          padding: '12px 24px',\n          borderBottom: '1px solid #1e2d3d',\n          position: 'relative',\n          fontSize: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 20\n          },\n          children: securityAlert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            position: 'absolute',\n            top: 12,\n            right: 24,\n            background: 'none',\n            border: 'none',\n            color: '#ff8f40',\n            cursor: 'pointer',\n            fontSize: 16\n          },\n          onClick: dismissAlert,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2289,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2280,\n        columnNumber: 11\n      }, this), !connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: '0 24px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxWidth: '400px',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              marginBottom: 24\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: appIcon,\n              alt: \"WhisperNet Logo\",\n              style: {\n                width: '120px',\n                height: '120px',\n                marginBottom: 16,\n                borderRadius: '50%',\n                border: '2px solid #1e2d3d'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2326,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 14,\n                color: '#5ccfe6',\n                marginTop: 8\n              },\n              children: [getTimestamp(), \" Initializing secure connection...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2337,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2320,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleUsernameSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                width: '100%',\n                padding: 10,\n                marginBottom: 12,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 16,\n                fontFamily: '\"Fira Code\", monospace',\n                boxSizing: 'border-box'\n              },\n              placeholder: \"Enter username\",\n              value: username,\n              onChange: e => {\n                setUsername(e.target.value);\n                setUsernameAvailable(true);\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2342,\n              columnNumber: 17\n            }, this), !usernameAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: '#ff8f40',\n                fontSize: 12,\n                marginTop: -8,\n                marginBottom: 8\n              },\n              children: \"Username not available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2363,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                width: '100%',\n                padding: 10,\n                borderRadius: 4,\n                background: relayStatus === 'online' ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n                color: '#171c28',\n                fontWeight: 'bold',\n                fontSize: 16,\n                border: 'none',\n                cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              type: \"submit\",\n              disabled: relayStatus !== 'online' || isCheckingUsername,\n              children: isCheckingUsername ? 'CHECKING...' : relayStatus === 'online' ? 'AUTHENTICATE' : 'SERVER OFFLINE'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2364,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2341,\n            columnNumber: 15\n          }, this), relayStatus !== 'online' && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '100%',\n              padding: 8,\n              marginTop: 8,\n              borderRadius: 4,\n              background: '#4b1c1c',\n              color: '#ff8f40',\n              fontSize: 14,\n              border: 'none',\n              cursor: 'pointer',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            onClick: retryConnection,\n            children: \"RETRY CONNECTION\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2386,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 12,\n              color: '#ff3333',\n              textAlign: 'center',\n              fontSize: 14\n            },\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2404,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2316,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2308,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: 'flex',\n          overflow: 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(UserList, {\n          users: onlineUsers.map(user => ({\n            username: user,\n            online: true\n          })),\n          activeChats: activeChats,\n          unreadCounts: unreadCounts,\n          onSelectUser: openChat,\n          currentUser: username,\n          onClearHistory: handleClearAllHistory,\n          onNewChat: handleNewChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden'\n          },\n          children: [!currentChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              padding: '0 24px',\n              background: '#0d1117'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 24,\n                color: '#5ccfe6',\n                marginBottom: 16,\n                fontWeight: 'bold'\n              },\n              children: \"Welcome to WhisperNet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2444,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 16,\n                color: '#a2aabc',\n                textAlign: 'center',\n                maxWidth: 500,\n                lineHeight: 1.5\n              },\n              children: \"Select a user from the sidebar to start a conversation or click on a username when you receive a message.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2452,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: 32,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: 14,\n                  color: '#636b78',\n                  marginBottom: 8\n                },\n                children: \"Connected as:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2467,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: 20,\n                  color: '#bae67e',\n                  fontWeight: 'bold'\n                },\n                children: username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2474,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2461,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                marginTop: 32,\n                padding: '8px 16px',\n                borderRadius: 4,\n                background: '#4b1c1c',\n                color: '#ff8f40',\n                fontSize: 14,\n                border: 'none',\n                cursor: 'pointer',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              onClick: handleDisconnect,\n              children: \"DISCONNECT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2482,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2435,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(ChatBox, {\n            recipient: currentChat,\n            messages: chatMessages[currentChat] || [],\n            username: username,\n            onSendMessage: (recipient, messageText) => {\n              console.log('Send message called with:', recipient, messageText);\n\n              // Store the current values\n              const currentRecipient = recipient;\n              const currentMessage = messageText;\n\n              // Set state\n              setRecipient(currentRecipient);\n              setMessage(currentMessage);\n\n              // Check if recipient is online\n              const isRecipientOnline = recipientStatuses[currentRecipient] && recipientStatuses[currentRecipient].online;\n              if (!isRecipientOnline) {\n                // Recipient is offline, suggest using relay\n                const useRelay = window.confirm(`${currentRecipient} appears to be offline.\\n\\n` + `Would you like to send this as a relay message instead?\\n` + `(The message will be delivered when they come online)`);\n                if (useRelay) {\n                  // Use the relay function instead\n                  const relayEvent = {\n                    preventDefault: () => {}\n                  };\n\n                  // Show confirmation before relaying\n                  const confirmRelay = window.confirm(`RELAY MESSAGE\\n\\n` + `Your message to \"${currentRecipient}\" will be securely encrypted and will continuously bounce across the relay network\\n` + `until ${currentRecipient} comes online or registers with the network.\\n\\n` + `It will not be stored at any single point for long, ensuring privacy and delivery reliability.\\n\\n` + `Do you want to continue?`);\n                  if (confirmRelay) {\n                    // Call relay function\n                    sendRelayMessage(currentRecipient, currentMessage);\n                  }\n                  return;\n                } else {\n                  // User wants to try direct message anyway\n                  console.log('Attempting direct message to offline user:', currentRecipient);\n                }\n              }\n\n              // Function to add message to chat history\n              function addMessageToChat(from, to, messageText, encrypted) {\n                const newMessage = {\n                  from: from,\n                  to: to,\n                  message: messageText,\n                  timestamp: Date.now(),\n                  fromDeviceId: deviceId,\n                  encrypted: encrypted\n                };\n\n                // Update chat messages\n                setChatMessages(prev => {\n                  const updatedMessages = {\n                    ...prev\n                  };\n                  if (!updatedMessages[to]) {\n                    updatedMessages[to] = [];\n                  }\n                  updatedMessages[to] = [...updatedMessages[to], newMessage];\n\n                  // Save to localStorage\n                  saveChatHistory(username, to, updatedMessages[to]);\n                  return updatedMessages;\n                });\n              }\n\n              // Function to send unencrypted message\n              function sendUnencryptedMessage() {\n                console.log('Sending unencrypted direct message to:', currentRecipient);\n                if (!socketRef.current) {\n                  console.error('Socket not available for direct message');\n                  setSecurityAlert({\n                    username: 'System',\n                    message: 'Cannot send message: Connection not available',\n                    type: 'error'\n                  });\n                  return;\n                }\n                socketRef.current.emit('sendMessage', {\n                  to: currentRecipient,\n                  message: currentMessage,\n                  from: username,\n                  fromDeviceId: deviceId,\n                  timestamp: Date.now(),\n                  publicKey: keyPair ? keyPair.publicKey : null,\n                  encrypted: false\n                });\n\n                // Add message to chat\n                addMessageToChat(username, currentRecipient, currentMessage, false);\n              }\n\n              // Function to send relay message\n              function sendRelayMessage(to, msg) {\n                if (!socketRef.current) {\n                  console.error('Socket not available for relay message');\n                  setSecurityAlert({\n                    username: 'System',\n                    message: 'Cannot send relay message: Connection not available',\n                    type: 'error'\n                  });\n                  return;\n                }\n\n                // Show sending indicator\n                setStatus('Sending relay message...');\n\n                // Function to add relay message to chat\n                function addRelayMessageToChat(from, to, messageText, encrypted) {\n                  const newMessage = {\n                    from: from,\n                    to: to,\n                    message: messageText,\n                    timestamp: Date.now(),\n                    fromDeviceId: deviceId,\n                    relayed: true,\n                    encrypted: encrypted\n                  };\n\n                  // Update chat messages\n                  setChatMessages(prev => {\n                    const updatedMessages = {\n                      ...prev\n                    };\n                    if (!updatedMessages[to]) {\n                      updatedMessages[to] = [];\n                    }\n                    updatedMessages[to] = [...updatedMessages[to], newMessage];\n\n                    // Save to localStorage\n                    saveChatHistory(username, to, updatedMessages[to]);\n                    return updatedMessages;\n                  });\n\n                  // Show success message\n                  setSecurityAlert({\n                    username: 'System',\n                    message: `Message to ${to} will be delivered when they come online.`,\n                    type: 'info'\n                  });\n                  setStatus('Registered successfully');\n                }\n\n                // Send unencrypted relay message\n                socketRef.current.emit('relayMessage', {\n                  to: to,\n                  message: msg,\n                  from: username,\n                  fromDeviceId: deviceId,\n                  timestamp: Date.now(),\n                  publicKey: keyPair ? keyPair.publicKey : null,\n                  encrypted: false\n                }, response => {\n                  if (response && response.success) {\n                    // Add message to chat\n                    addRelayMessageToChat(username, to, msg, false);\n                  } else {\n                    // Show error message\n                    setSecurityAlert({\n                      username: 'System',\n                      message: `Failed to relay message: ${response && response.error ? response.error : 'Unknown error'}`,\n                      type: 'error'\n                    });\n                    setStatus('Registered successfully');\n                  }\n                });\n              }\n\n              // Encrypt message if possible\n              if (encryptionEnabled && publicKeys[currentRecipient]) {\n                try {\n                  console.log('Attempting to encrypt direct message for:', currentRecipient);\n\n                  // Try to encrypt the message\n                  encryptMessage(currentMessage, publicKeys[currentRecipient]).then(encryptedMessage => {\n                    console.log('Successfully encrypted direct message');\n                    if (!socketRef.current) {\n                      console.error('Socket not available for encrypted message');\n                      setSecurityAlert({\n                        username: 'System',\n                        message: 'Cannot send message: Connection not available',\n                        type: 'error'\n                      });\n                      return;\n                    }\n\n                    // Send the encrypted message\n                    socketRef.current.emit('sendMessage', {\n                      to: currentRecipient,\n                      message: encryptedMessage,\n                      from: username,\n                      fromDeviceId: deviceId,\n                      timestamp: Date.now(),\n                      publicKey: keyPair ? keyPair.publicKey : null,\n                      encrypted: true\n                    });\n\n                    // Update chat messages with the unencrypted version for display\n                    addMessageToChat(username, currentRecipient, currentMessage, true);\n                  }).catch(error => {\n                    console.error('Failed to encrypt message:', error);\n                    // Send unencrypted as fallback\n                    sendUnencryptedMessage();\n                  });\n                } catch (error) {\n                  console.error('Error in encryption:', error);\n                  // Send unencrypted as fallback\n                  sendUnencryptedMessage();\n                }\n              } else {\n                // Send unencrypted\n                sendUnencryptedMessage();\n              }\n            },\n            onRelayMessage: (recipient, messageText) => {\n              console.log('Relay message called with:', recipient, messageText);\n\n              // Store the current values\n              const currentRecipient = recipient;\n              const currentMessage = messageText;\n\n              // Set state\n              setRecipient(currentRecipient);\n              setMessage(currentMessage);\n\n              // Show confirmation before relaying\n              const confirmRelay = window.confirm(`RELAY MESSAGE\\n\\n` + `Your message to \"${currentRecipient}\" will be securely encrypted and will continuously bounce across the relay network\\n` + `until ${currentRecipient} comes online or registers with the network.\\n\\n` + `It will not be stored at any single point for long, ensuring privacy and delivery reliability.\\n\\n` + `Do you want to continue?`);\n              if (!confirmRelay) {\n                return; // User cancelled\n              }\n\n              // Call relay function directly with the values\n              if (socketRef.current) {\n                // Show sending indicator\n                setStatus('Sending relay message...');\n\n                // Function to add message to chat history\n                function addRelayMessageToChat(from, to, messageText, encrypted) {\n                  const newMessage = {\n                    from: from,\n                    to: to,\n                    message: messageText,\n                    timestamp: Date.now(),\n                    fromDeviceId: deviceId,\n                    relayed: true,\n                    encrypted: encrypted\n                  };\n\n                  // Update chat messages\n                  setChatMessages(prev => {\n                    const updatedMessages = {\n                      ...prev\n                    };\n                    if (!updatedMessages[to]) {\n                      updatedMessages[to] = [];\n                    }\n                    updatedMessages[to] = [...updatedMessages[to], newMessage];\n\n                    // Save to localStorage\n                    saveChatHistory(username, to, updatedMessages[to]);\n                    return updatedMessages;\n                  });\n\n                  // Show success message\n                  setSecurityAlert({\n                    username: 'System',\n                    message: `Message to ${to} will be delivered when they come online.`,\n                    type: 'info'\n                  });\n                  setStatus('Registered successfully');\n                }\n\n                // Send unencrypted message first as a fallback\n                function sendUnencryptedRelayMessage() {\n                  console.log('Sending unencrypted relay message to:', currentRecipient);\n                  socketRef.current.emit('relayMessage', {\n                    to: currentRecipient,\n                    message: currentMessage,\n                    from: username,\n                    fromDeviceId: deviceId,\n                    timestamp: Date.now(),\n                    publicKey: keyPair ? keyPair.publicKey : null,\n                    encrypted: false\n                  }, response => {\n                    if (response && response.success) {\n                      // Add message to chat\n                      addRelayMessageToChat(username, currentRecipient, currentMessage, false);\n                    } else {\n                      // Show error message\n                      setSecurityAlert({\n                        username: 'System',\n                        message: `Failed to relay message: ${response && response.error ? response.error : 'Unknown error'}`,\n                        type: 'error'\n                      });\n                      setStatus('Registered successfully');\n                    }\n                  });\n                }\n\n                // Try to encrypt if possible\n                if (encryptionEnabled && publicKeys[currentRecipient]) {\n                  try {\n                    console.log('Attempting to encrypt relay message for:', currentRecipient);\n\n                    // Try to encrypt the message\n                    encryptMessage(currentMessage, publicKeys[currentRecipient]).then(encryptedMessage => {\n                      console.log('Successfully encrypted relay message');\n\n                      // Send the encrypted message\n                      socketRef.current.emit('relayMessage', {\n                        to: currentRecipient,\n                        message: encryptedMessage,\n                        from: username,\n                        fromDeviceId: deviceId,\n                        timestamp: Date.now(),\n                        publicKey: keyPair ? keyPair.publicKey : null,\n                        encrypted: true\n                      }, response => {\n                        if (response && response.success) {\n                          // Add message to chat with the unencrypted version for display\n                          addRelayMessageToChat(username, currentRecipient, currentMessage, true);\n                        } else {\n                          console.error('Relay message failed:', response);\n                          // Show error message\n                          setSecurityAlert({\n                            username: 'System',\n                            message: `Failed to relay message: ${response && response.error ? response.error : 'Unknown error'}`,\n                            type: 'error'\n                          });\n                          setStatus('Registered successfully');\n                        }\n                      });\n                    }).catch(error => {\n                      console.error('Failed to encrypt relay message:', error);\n                      // Send unencrypted as fallback\n                      sendUnencryptedRelayMessage();\n                    });\n                  } catch (error) {\n                    console.error('Error in relay encryption:', error);\n                    // Send unencrypted as fallback\n                    sendUnencryptedRelayMessage();\n                  }\n                } else {\n                  // Send unencrypted\n                  sendUnencryptedRelayMessage();\n                }\n              } else {\n                console.error('Socket not available for relay message');\n                setSecurityAlert({\n                  username: 'System',\n                  message: 'Cannot send relay message: Connection not available',\n                  type: 'error'\n                });\n              }\n            },\n            recipientStatus: recipientStatuses[currentChat] || {\n              exists: false,\n              online: false\n            },\n            typing: typingUsers[currentChat] || false,\n            onMessageChange: message => {\n              // Send typing indicator\n              if (socketRef.current && currentChat && message.length > 0) {\n                socketRef.current.emit('typing', {\n                  to: currentChat\n                });\n              }\n            },\n            onClose: () => closeChat(currentChat),\n            verificationStatus: verificationStatuses[currentChat],\n            onVerifyIdentity: handleVerifyIdentity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2500,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '8px 16px',\n              borderTop: '1px solid #1e2d3d',\n              background: '#171c28'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 12,\n                color: '#636b78',\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 8,\n                  height: 8,\n                  borderRadius: '50%',\n                  background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                  marginRight: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2909,\n                columnNumber: 19\n              }, this), status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2903,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '4px 12px',\n                borderRadius: 4,\n                background: '#4b1c1c',\n                color: '#ff8f40',\n                fontSize: 12,\n                border: 'none',\n                cursor: 'pointer',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              onClick: handleDisconnect,\n              children: \"DISCONNECT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2919,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2896,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2427,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2410,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1982,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VerificationModal, {\n      isOpen: showVerificationModal,\n      onClose: handleCancelVerification,\n      verificationInfo: currentVerification || {},\n      onVerify: handleConfirmVerification,\n      onCancel: handleCancelVerification,\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2941,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1971,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"a2UIsn2PYpjvxIy9cmAbLGtodFg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","axios","FingerprintJS","ChatBox","UserList","VerificationModal","appIcon","saveChatHistory","loadChatHistory","getActiveChats","clearAllChatHistory","saveUnreadCounts","loadUnreadCounts","resetUnreadCount","incrementUnreadCount","storeVerifiedKey","getVerifiedKey","hasVerifiedKey","verifyKey","generateKeyFingerprint","detectStorageReset","clearAllVerifiedKeys","jsxDEV","_jsxDEV","Fragment","_Fragment","BASE_NODE_URL","process","env","REACT_APP_BASE_NODE_URL","generateKeyPair","keyPair","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","publicKey","exportKey","privateKey","error","console","encryptMessage","message","publicKeyJwk","importKey","encoder","TextEncoder","data","encode","encryptedData","encrypt","btoa","String","fromCharCode","decryptMessage","encryptedMessage","privateKeyJwk","from","atob","c","charCodeAt","decryptedData","decrypt","decoder","TextDecoder","decode","fpPromise","load","App","_s","username","setUsername","recipient","setRecipient","setMessage","messages","setMessages","connected","setConnected","status","setStatus","deviceId","setDeviceId","connectionDetails","setConnectionDetails","showConnectionInfo","setShowConnectionInfo","showAboutPage","setShowAboutPage","securityAlert","setSecurityAlert","typing","setTyping","relayServerUrl","setRelayServerUrl","relayStatus","setRelayStatus","onlineUsers","setOnlineUsers","recipientStatus","setRecipientStatus","exists","online","isCheckingUsername","setIsCheckingUsername","usernameAvailable","setUsernameAvailable","setKeyPair","publicKeys","setPublicKeys","encryptionEnabled","setEncryptionEnabled","encryptionStatus","setEncryptionStatus","activeChats","setActiveChats","chatMessages","setChatMessages","currentChat","setCurrentChat","typingUsers","setTypingUsers","recipientStatuses","setRecipientStatuses","unreadCounts","setUnreadCounts","verificationStatuses","setVerificationStatuses","showVerificationModal","setShowVerificationModal","currentVerification","setCurrentVerification","storageResetDetected","setStorageResetDetected","socketRef","messagesEndRef","typingTimeoutRef","pingIntervalRef","recipientCheckTimeoutRef","initializeDevice","isReset","type","fp","result","get","visitorId","initializeEncryption","fallbackId","Math","random","toString","substr","deviceIdentifier","storedKeys","localStorage","getItem","parsedKeys","JSON","parse","testMessage","Date","now","encrypted","decrypted","log","warn","generateAndStoreNewKeys","testError","parseError","newKeyPair","setItem","stringify","checkRelayStatus","response","timeout","tempSocket","transports","reconnectionAttempts","reconnectionDelay","forceNew","connectionTimeout","setTimeout","disconnect","on","clearTimeout","err","openChat","chatUsername","history","prev","checkUserStatus","closeChat","newActiveChats","current","isOnline","includes","emit","handleClearAllHistory","confirm","clearKeys","handleNewChat","connectToBaseNode","clearInterval","Object","keys","length","forEach","chatUser","fetchRelayInfo","info","relayId","connectedUsers","ip","port","relayInfo","success","isDirect","socketId","id","substring","relayInfoInterval","setInterval","query","transport","engine","baseNodeUrl","relays","timestamp","registerWithBaseNode","connectToRelay","startRelayPolling","callback","connectSocketEvents","getOnlineUsers","startPingInterval","errorMsg","reason","cachedRelayInfo","cachedRelays","parsedCache","relay","relayUrl","startsWith","oldSocket","relayConnectionTimeout","relayPollingInterval","fromDeviceId","bounced","previousMessages","isFirstMessage","verificationResult","then","fingerprint","verified","verifiedAt","filter","msg","decryptedMessage","decryptionStatus","messageObj","msgs","updatedMessages","newCounts","ack","user","notRegisteredYet","u","checkRecipientStatus","Array","isArray","users","_prev$chatUser","typingUser","checking","checkingTimeout","relayResponse","timeoutId","_messagesEndRef$curre","scrollIntoView","behavior","initializeVerificationStatuses","initialVerificationStatuses","verifiedKey","handleVerifyIdentity","contactUsername","contactPublicKey","verificationInfo","previousFingerprint","catch","handleConfirmVerification","handleCancelVerification","initializeChatData","initialChatMessages","initialUnreadCounts","initialRecipientStatuses","activeChatsObj","handleUsernameSubmit","e","preventDefault","trim","handleRecipientChange","newRecipient","target","value","handleSend","bounce","recipientOnline","requestPublicKey","shouldProceed","finalMessage","isEncrypted","messageData","to","toISOString","messageTimeout","delivered","expiresAt","Promise","resolve","reject","Error","requestTimeout","handleRelayBounce","confirmBounce","syntheticEvent","handleMessageChange","handleDisconnect","currentSocket","dismissAlert","retryConnection","getTimestamp","getHours","padStart","getMinutes","getSeconds","formatMessageTime","date","style","background","minHeight","width","height","color","display","flexDirection","fontFamily","overflow","children","flex","justifyContent","alignItems","padding","borderBottom","margin","letterSpacing","fileName","_jsxFileName","lineNumber","columnNumber","gap","fontSize","borderRadius","cursor","onClick","flexWrap","undefined","position","top","left","right","bottom","zIndex","overflowY","marginBottom","border","lineHeight","maxWidth","marginTop","paddingLeft","textAlign","overflowX","href","rel","textDecoration","marginRight","src","alt","onSubmit","boxSizing","placeholder","onChange","required","fontWeight","disabled","map","onSelectUser","currentUser","onClearHistory","onNewChat","onSendMessage","messageText","currentRecipient","currentMessage","isRecipientOnline","useRelay","relayEvent","confirmRelay","sendRelayMessage","addMessageToChat","newMessage","sendUnencryptedMessage","addRelayMessageToChat","relayed","onRelayMessage","sendUnencryptedRelayMessage","onMessageChange","onClose","verificationStatus","onVerifyIdentity","borderTop","isOpen","onVerify","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/siddharth/Documents/GitHub/WhisperNet/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport ChatBox from './components/ChatBox';\nimport UserList from './components/UserList';\nimport VerificationModal from './components/VerificationModal';\n// Import the icon directly\nimport appIcon from './assets/icon.png';\nimport { \n  saveChatHistory, \n  loadChatHistory, \n  getActiveChats, \n  clearAllChatHistory,\n  saveUnreadCounts,\n  loadUnreadCounts,\n  resetUnreadCount,\n  incrementUnreadCount\n} from './utils/chatStorage';\nimport {\n  storeVerifiedKey,\n  getVerifiedKey,\n  hasVerifiedKey,\n  verifyKey,\n  generateKeyFingerprint,\n  detectStorageReset,\n  clearAllVerifiedKeys\n} from './utils/keyVerification';\n\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Encryption utilities\nconst generateKeyPair = async () => {\n  try {\n    const keyPair = await window.crypto.subtle.generateKey(\n      {\n        name: \"RSA-OAEP\",\n        modulusLength: 2048,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n      },\n      true,\n      [\"encrypt\", \"decrypt\"]\n    );\n    \n    // Export the keys to JWK format\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\n    \n    return { publicKey, privateKey };\n  } catch (error) {\n    console.error('Error generating key pair:', error);\n    throw error;\n  }\n};\n\nconst encryptMessage = async (message, publicKeyJwk) => {\n  try {\n    // Import the public key\n    const publicKey = await window.crypto.subtle.importKey(\n      \"jwk\",\n      publicKeyJwk,\n      {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\",\n      },\n      false,\n      [\"encrypt\"]\n    );\n    \n    // Convert the message to ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n    \n    // Encrypt the data\n    const encryptedData = await window.crypto.subtle.encrypt(\n      {\n        name: \"RSA-OAEP\"\n      },\n      publicKey,\n      data\n    );\n    \n    // Convert the encrypted data to base64\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n  } catch (error) {\n    console.error('Error encrypting message:', error);\n    throw error;\n  }\n};\n\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\n  try {\n    // Import the private key\n    const privateKey = await window.crypto.subtle.importKey(\n      \"jwk\",\n      privateKeyJwk,\n      {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\",\n      },\n      false,\n      [\"decrypt\"]\n    );\n    \n    // Convert the base64 encrypted message to ArrayBuffer\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\n    \n    // Decrypt the data\n    const decryptedData = await window.crypto.subtle.decrypt(\n      {\n        name: \"RSA-OAEP\"\n      },\n      privateKey,\n      encryptedData\n    );\n    \n    // Convert the decrypted data to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n  } catch (error) {\n    console.error('Error decrypting message:', error);\n    return '[Encrypted message - cannot decrypt]';\n  }\n};\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [status, setStatus] = useState('Checking relay status...');\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [showAboutPage, setShowAboutPage] = useState(false);\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [typing, setTyping] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\n  const [relayStatus, setRelayStatus] = useState('checking');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [recipientStatus, setRecipientStatus] = useState({ exists: false, online: false });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\n  \n  // New state variables for chat management\n  const [activeChats, setActiveChats] = useState({}); // username -> boolean (is chat open)\n  const [chatMessages, setChatMessages] = useState({}); // username -> messages array\n  const [currentChat, setCurrentChat] = useState(null); // currently selected chat username\n  const [typingUsers, setTypingUsers] = useState({}); // username -> boolean (is typing)\n  const [recipientStatuses, setRecipientStatuses] = useState({}); // username -> status object\n  const [unreadCounts, setUnreadCounts] = useState({}); // username -> count\n  \n  // Key verification state\n  const [verificationStatuses, setVerificationStatuses] = useState({}); // username -> verification status\n  const [showVerificationModal, setShowVerificationModal] = useState(false);\n  const [currentVerification, setCurrentVerification] = useState(null);\n  const [storageResetDetected, setStorageResetDetected] = useState(false);\n  \n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const recipientCheckTimeoutRef = useRef(null);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeDevice = async () => {\n      try {\n        // Check if localStorage has been reset\n        const isReset = detectStorageReset();\n        setStorageResetDetected(isReset);\n        \n        if (isReset) {\n          setSecurityAlert({\n            username: 'System',\n            message: 'Your browser storage has been reset. You will need to verify contacts again.',\n            type: 'warning'\n          });\n        }\n        \n        // Get device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n        \n        // Initialize encryption\n        await initializeEncryption(visitorId);\n      } catch (error) {\n        console.error('Failed to initialize device:', error);\n        // Generate a fallback device ID\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\n        setDeviceId(fallbackId);\n        \n        // Initialize encryption with fallback ID\n        await initializeEncryption(fallbackId);\n      }\n    };\n    \n    initializeDevice();\n  }, []);\n  \n  // Initialize encryption\n  const initializeEncryption = async (deviceIdentifier) => {\n    try {\n      setEncryptionStatus('initializing');\n      \n      // Check if we have keys in localStorage\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\n      \n      if (storedKeys) {\n        // We have stored keys, check if they're valid\n        try {\n          const parsedKeys = JSON.parse(storedKeys);\n          \n          // Validate the keys by testing encryption/decryption\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\n            try {\n              // Test encryption with the stored keys\n              const testMessage = \"test-encryption-\" + Date.now();\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\n              \n              if (decrypted === testMessage) {\n                // Keys are valid\n                setKeyPair(parsedKeys);\n                console.log('Loaded and validated existing encryption keys');\n                setEncryptionStatus('ready');\n              } else {\n                console.warn('Stored keys failed validation test');\n                await generateAndStoreNewKeys(deviceIdentifier);\n              }\n            } catch (testError) {\n              console.error('Error testing stored keys:', testError);\n              await generateAndStoreNewKeys(deviceIdentifier);\n            }\n          } else {\n            console.warn('Stored keys are incomplete');\n            await generateAndStoreNewKeys(deviceIdentifier);\n          }\n        } catch (parseError) {\n          console.error('Error parsing stored keys:', parseError);\n          await generateAndStoreNewKeys(deviceIdentifier);\n        }\n      } else {\n        // No stored keys, generate new ones\n        await generateAndStoreNewKeys(deviceIdentifier);\n      }\n    } catch (error) {\n      console.error('Error initializing encryption:', error);\n      setEncryptionStatus('error');\n      setSecurityAlert({\n        username: 'System',\n        message: 'Failed to initialize encryption. Messages will not be secure.',\n        type: 'error'\n      });\n      setEncryptionEnabled(false);\n    }\n  };\n  \n  // Generate and store new keys\n  const generateAndStoreNewKeys = async (deviceIdentifier) => {\n    try {\n      console.log('Generating new encryption keys...');\n      const newKeyPair = await generateKeyPair();\n      setKeyPair(newKeyPair);\n      \n      // Store keys in localStorage\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\n      \n      console.log('Generated and stored new encryption keys');\n      setEncryptionStatus('ready');\n    } catch (error) {\n      console.error('Error generating new keys:', error);\n      throw error;\n    }\n  };\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking connection status...');\n    setRelayStatus('checking');\n    \n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, { \n        timeout: 5000 \n      });\n      \n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Connection online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n    \n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    \n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Server may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    \n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Connection online. Please login.');\n      tempSocket.disconnect();\n    });\n    \n    tempSocket.on('connect_error', (err) => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Connection offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n  \n  // Chat management functions\n  const openChat = async (chatUsername) => {\n    // Check if we already have messages for this chat\n    if (!chatMessages[chatUsername]) {\n      // Load chat history from localStorage\n      const history = loadChatHistory(username, chatUsername);\n      \n      // Update chat messages\n      setChatMessages(prev => ({\n        ...prev,\n        [chatUsername]: history\n      }));\n    }\n    \n    // Mark chat as active\n    setActiveChats(prev => ({\n      ...prev,\n      [chatUsername]: true\n    }));\n    \n    // Set as current chat\n    setCurrentChat(chatUsername);\n    \n    // Reset unread count\n    setUnreadCounts(prev => ({\n      ...prev,\n      [chatUsername]: 0\n    }));\n    resetUnreadCount(username, chatUsername);\n    \n    // Check recipient status\n    checkUserStatus(chatUsername);\n  };\n  \n  const closeChat = (chatUsername) => {\n    // Mark chat as inactive\n    setActiveChats(prev => {\n      const newActiveChats = { ...prev };\n      delete newActiveChats[chatUsername];\n      return newActiveChats;\n    });\n    \n    // If this was the current chat, set current chat to null\n    if (currentChat === chatUsername) {\n      setCurrentChat(null);\n    }\n  };\n  \n  const checkUserStatus = (chatUsername) => {\n    if (!socketRef.current || !chatUsername) return;\n    \n    // First check if the user is in the online users list\n    const isOnline = onlineUsers.includes(chatUsername);\n    \n    if (isOnline) {\n      setRecipientStatuses(prev => ({\n        ...prev,\n        [chatUsername]: { exists: true, online: true }\n      }));\n      return;\n    }\n    \n    // Otherwise, check with the server\n    socketRef.current.emit('checkRecipient', { username: chatUsername }, (response) => {\n      if (response && response.exists) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: { exists: true, online: response.online || false }\n        }));\n      } else {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: { exists: false, online: false }\n        }));\n      }\n    });\n  };\n  \n  const handleClearAllHistory = () => {\n    if (window.confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {\n      // Ask if they also want to clear verification keys\n      const clearKeys = window.confirm(\n        'Do you also want to clear all identity verification keys?\\n\\n' +\n        'If you choose YES, you will need to re-verify all contacts.\\n' +\n        'If you choose NO, your contacts will remain verified but chat history will be cleared.'\n      );\n      \n      // Clear all chat history from localStorage\n      clearAllChatHistory(username);\n      \n      // Clear verification keys if requested\n      if (clearKeys) {\n        clearAllVerifiedKeys(username);\n        setVerificationStatuses({});\n      }\n      \n      // Reset state\n      setChatMessages({});\n      setUnreadCounts({});\n      setActiveChats({});\n      setCurrentChat(null);\n      \n      // Show confirmation\n      setSecurityAlert({\n        username: 'System',\n        message: clearKeys ? \n          'All chat history and verification keys have been cleared.' : \n          'All chat history has been cleared.',\n        type: 'info'\n      });\n    }\n  };\n  \n  const handleNewChat = (chatUsername) => {\n    if (chatUsername === username) {\n      setSecurityAlert({\n        username: 'System',\n        message: 'You cannot chat with yourself.',\n        type: 'error'\n      });\n      return;\n    }\n    \n    // Open the chat\n    openChat(chatUsername);\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n    }\n    \n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        clearTimeout(recipientCheckTimeoutRef.current);\n        clearTimeout(typingTimeoutRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n  \n  // Effect to save chat messages to localStorage when they change\n  useEffect(() => {\n    if (username && Object.keys(chatMessages).length > 0) {\n      // Save each chat's messages to localStorage\n      Object.keys(chatMessages).forEach(chatUser => {\n        saveChatHistory(username, chatUser, chatMessages[chatUser]);\n      });\n    }\n  }, [username, chatMessages]);\n\n  useEffect(() => {\n    if (connected && socketRef.current) {\n      const fetchRelayInfo = () => {\n        console.log('Fetching relay info...');\n        \n        // First try to get relay info directly from the socket\n        socketRef.current.emit('getRelayInfo', {}, (info) => {\n          if (info && info.relayId) {\n            console.log('Received relay info from socket:', info);\n            // Update relay server information\n            setRelayServerUrl(info.relayId);\n            setConnectionDetails(prev => ({ \n              ...prev, \n              relayId: info.relayId,\n              relayStatus: info.status || 'connected',\n              connectedUsers: info.connectedUsers,\n              ip: info.ip,\n              port: info.port\n            }));\n            \n            // Show connection info automatically on first connect\n            if (!showConnectionInfo) {\n              setShowConnectionInfo(true);\n              \n              // Auto-hide after 5 seconds\n              setTimeout(() => {\n                setShowConnectionInfo(false);\n              }, 5000);\n            }\n          } else {\n            console.warn('No relay info received from socket, checking with base node');\n            \n            // If we're connected to the base node, try to get our relay assignment\n            socketRef.current.emit('getMyRelayInfo', { username }, (relayInfo) => {\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\n                console.log('Received relay assignment from base node:', relayInfo);\n                \n                if (relayInfo.isDirect) {\n                  // We're directly connected to the base node\n                  setRelayServerUrl('Direct to Base Node');\n                  setConnectionDetails(prev => ({ \n                    ...prev, \n                    relayId: 'direct',\n                    relayStatus: 'direct_to_base',\n                  }));\n                } else {\n                  // We're assigned to a relay\n                  setRelayServerUrl(relayInfo.relayId);\n                  setConnectionDetails(prev => ({ \n                    ...prev, \n                    relayId: relayInfo.relayId,\n                    relayStatus: 'assigned_by_base',\n                  }));\n                }\n              } else {\n                console.warn('No relay assignment from base node, assuming direct connection');\n                \n                // If we can't get relay info, we're probably directly connected to the base node\n                const socketId = socketRef.current.id;\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\n                setConnectionDetails(prev => ({ \n                  ...prev, \n                  relayId: 'direct',\n                  relayStatus: 'direct_to_base',\n                }));\n              }\n            });\n          }\n        });\n      };\n      \n      // Get relay info immediately and then every 10 seconds\n      fetchRelayInfo();\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\n      \n      return () => clearInterval(relayInfoInterval);\n    }\n  }, [connected, showConnectionInfo, username]);\n\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    \n    // Always connect to base node first for handshake and relay discovery\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\n    setStatus('Connecting to base node for handshake...');\n    \n    // Connect to base node\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: { \n        deviceId,\n        username \n      },\n      forceNew: true\n    });\n    \n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node for handshake');\n      setRelayStatus('online');\n      \n      // When connecting to the base node, set the relay information accordingly\n      setRelayServerUrl(`Base Node (Handshake)`);\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL,\n        relayId: 'base_handshake',\n        relayStatus: 'handshake'\n      });\n      \n      // Get available relays first\n      socketRef.current.emit('getAvailableRelays', {}, (response) => {\n        console.log('Available relays:', response);\n        \n        if (response && response.relays && response.relays.length > 0) {\n          // Cache relay information\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\n            timestamp: Date.now(),\n            relays: response.relays\n          }));\n          \n          // Register with base node temporarily\n          registerWithBaseNode(() => {\n            // After successful registration, connect to a relay\n            connectToRelay(response.relays);\n          });\n        } else {\n          // No relays available, register directly with base node\n          registerWithBaseNode(() => {\n            // Set UI to indicate we're using base node as fallback\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            setStatus('Using Base Node as fallback (no relays available)');\n            \n            // Start polling for available relays\n            startRelayPolling();\n          });\n        }\n      });\n    });\n    \n    const registerWithBaseNode = (callback) => {\n      // Register with base node\n      socketRef.current.emit('registerUser', { \n        username, \n        deviceId \n      }, (response) => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully with base node');\n          \n          // Set up socket event handlers\n          connectSocketEvents();\n          \n          // Get initial data\n          getOnlineUsers();\n          startPingInterval();\n          \n          // Execute callback if provided\n          if (callback && typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = response?.reason || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`,\n            type: 'error'\n          });\n        }\n      });\n    };\n    \n    socketRef.current.on('connect_error', (err) => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n      \n      // Try to use cached relays if available\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\n      let cachedRelays = [];\n      \n      if (cachedRelayInfo) {\n        try {\n          const parsedCache = JSON.parse(cachedRelayInfo);\n          if (parsedCache.timestamp && (Date.now() - parsedCache.timestamp < 3600000)) { // Cache valid for 1 hour\n            cachedRelays = parsedCache.relays || [];\n            console.log('Using cached relay information:', cachedRelays);\n            \n            if (cachedRelays.length > 0) {\n              setTimeout(() => {\n                connectToRelay(cachedRelays);\n              }, 1000);\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing cached relay info:', error);\n        }\n      }\n    });\n    \n    socketRef.current.on('disconnect', (reason) => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n      \n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect' && connected) {\n        setTimeout(() => {\n          if (connected) {\n            // Try to reconnect to base node first\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n  };\n  \n  // Function to connect to a relay server\n  const connectToRelay = (relays) => {\n    if (!relays || !relays.length) {\n      console.log('No relays available to connect to');\n      return;\n    }\n    \n    // Use the first available relay\n    const relay = relays[0];\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\n    \n    console.log(`Switching to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay server: ${relay.id}...`);\n    \n    // Disconnect from base node first\n    if (socketRef.current) {\n      // Keep a reference to the old socket for cleanup\n      const oldSocket = socketRef.current;\n      \n      // Create new socket for relay\n      socketRef.current = io(relayUrl, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 2000,\n        forceNew: true\n      });\n      \n      // Set a timeout to disconnect from base node after relay connection is established\n      const relayConnectionTimeout = setTimeout(() => {\n        if (!socketRef.current || !socketRef.current.connected) {\n          console.log('Relay connection timed out, staying with base node');\n          socketRef.current = oldSocket; // Restore old socket\n          setStatus('Using Base Node (relay connection failed)');\n          setRelayServerUrl('Base Node (Fallback)');\n          setConnectionDetails(prev => ({\n            ...prev,\n            relayId: 'direct',\n            relayStatus: 'direct_to_base'\n          }));\n          \n          // Start polling for available relays\n          startRelayPolling();\n        }\n      }, 5000);\n      \n      socketRef.current.on('connect', () => {\n        clearTimeout(relayConnectionTimeout);\n        console.log(`Connected to relay server: ${relayUrl}`);\n        \n        // Register with the relay\n        socketRef.current.emit('register', { \n          username, \n          deviceId \n        }, (response) => {\n          if (response && response.success) {\n            console.log('Successfully registered with relay');\n            \n            // Now we can safely disconnect from the base node\n            oldSocket.disconnect();\n            \n            setStatus(`Connected to relay server: ${relay.id}`);\n            setRelayServerUrl(relay.id);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: relay.id,\n              socketId: socketRef.current.id,\n              transport: socketRef.current.io.engine.transport.name,\n              relayStatus: 'connected_to_relay'\n            }));\n            \n            // Set up socket event handlers\n            connectSocketEvents();\n            \n            // Start ping interval\n            startPingInterval();\n            \n            // Show connection info automatically\n            setShowConnectionInfo(true);\n            setTimeout(() => {\n              setShowConnectionInfo(false);\n            }, 5000);\n          } else {\n            console.error('Failed to register with relay:', response);\n            setStatus('Failed to register with relay server');\n            \n            // Disconnect from relay and stay with base node\n            socketRef.current.disconnect();\n            socketRef.current = oldSocket;\n            \n            setStatus('Using Base Node (relay registration failed)');\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            \n            // Start polling for available relays\n            startRelayPolling();\n          }\n        });\n      });\n      \n      socketRef.current.on('connect_error', (err) => {\n        clearTimeout(relayConnectionTimeout);\n        console.error(`Relay connection error: ${err.message}`);\n        \n        // Stay with base node\n        socketRef.current = oldSocket;\n        \n        setStatus('Using Base Node (relay connection error)');\n        setRelayServerUrl('Base Node (Fallback)');\n        setConnectionDetails(prev => ({\n          ...prev,\n          relayId: 'direct',\n          relayStatus: 'direct_to_base'\n        }));\n        \n        // Start polling for available relays\n        startRelayPolling();\n      });\n      \n      socketRef.current.on('disconnect', (reason) => {\n        console.log(`Disconnected from relay: ${reason}`);\n        \n        // If we were previously connected to a relay and lost connection\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\n          setStatus(`Disconnected from relay: ${reason}`);\n          \n          // Try to reconnect to base node\n          setTimeout(() => {\n            if (connected) {\n              connectToBaseNode();\n            }\n          }, 1000);\n        }\n      });\n    }\n  };\n  \n  // Function to periodically poll for available relays when using base node as fallback\n  const startRelayPolling = () => {\n    // Clear any existing polling interval\n    if (window.relayPollingInterval) {\n      clearInterval(window.relayPollingInterval);\n    }\n    \n    // Set up polling interval\n    window.relayPollingInterval = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected && \n          connectionDetails.relayStatus === 'direct_to_base') {\n        console.log('Polling for available relays...');\n        \n        socketRef.current.emit('getAvailableRelays', {}, (response) => {\n          if (response && response.relays && response.relays.length > 0) {\n            console.log('Found available relays:', response.relays);\n            \n            // Cache relay information\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\n              timestamp: Date.now(),\n              relays: response.relays\n            }));\n            \n            // Connect to a relay\n            connectToRelay(response.relays);\n            \n            // Clear polling interval\n            clearInterval(window.relayPollingInterval);\n          } else {\n            console.log('No relays available, continuing to use base node');\n          }\n        });\n      }\n    }, 30000); // Poll every 30 seconds\n    \n    // Clean up on component unmount\n    return () => {\n      if (window.relayPollingInterval) {\n        clearInterval(window.relayPollingInterval);\n      }\n    };\n  };\n\n  const connectSocketEvents = () => {\n    // Message handling\n    socketRef.current.on('receiveMessage', async (data) => {\n      console.log('Received message:', data);\n      const { from, message, fromDeviceId, timestamp, encrypted, publicKey, bounced } = data;\n      \n      // Store sender's public key if provided\n      if (publicKey && from) {\n        console.log(`Storing public key for ${from}`);\n        setPublicKeys(prev => ({ ...prev, [from]: publicKey }));\n        \n        // Check if this is the first message from this user\n        const previousMessages = chatMessages[from] || [];\n        const isFirstMessage = previousMessages.length === 0;\n        \n        // Verify the key if we have a stored key for this user\n        if (hasVerifiedKey(username, from)) {\n          // We have a verified key, check if it matches\n          const verificationResult = await verifyKey(username, from, publicKey, fromDeviceId);\n          \n          // Generate fingerprint and then update verification status\n          generateKeyFingerprint(publicKey).then(fingerprint => {\n            setVerificationStatuses(prev => ({\n              ...prev,\n              [from]: {\n                verified: verificationResult.verified,\n                status: verificationResult.status,\n                message: verificationResult.message,\n                verifiedAt: verificationResult.verifiedAt,\n                fingerprint: fingerprint\n              }\n            }));\n          });\n          \n          // Show warning if key doesn't match\n          if (!verificationResult.verified) {\n            setSecurityAlert({\n              username: from,\n              message: `Warning: ${from}'s identity could not be verified. ${verificationResult.message}`,\n              type: 'warning'\n            });\n          }\n        } else if (isFirstMessage) {\n          // This is the first message and we don't have a verified key\n          // Set as unverified and prompt for verification\n          generateKeyFingerprint(publicKey).then(fingerprint => {\n            setVerificationStatuses(prev => ({\n              ...prev,\n              [from]: {\n                verified: false,\n                status: 'unverified',\n                message: 'Identity not verified',\n                fingerprint\n              }\n            }));\n            \n            // Show verification prompt\n            setSecurityAlert({\n              username: 'System',\n              message: `New message from ${from}. Click on \"UNVERIFIED\" to verify their identity.`,\n              type: 'info'\n            });\n          });\n        }\n      }\n      \n      // If this is a bounced message, show a notification\n      if (bounced) {\n        console.log(`Received bounced message from ${from}`);\n        setSecurityAlert({\n          username: 'System',\n          message: `Received delayed message from ${from} that was sent while you were offline.`,\n          type: 'info'\n        });\n      }\n      \n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && \n          previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`,\n          type: 'warning'\n        });\n      }\n      \n      let decryptedMessage = message;\n      let decryptionStatus = 'plaintext';\n      \n      // Decrypt the message if it's encrypted and we have our private key\n      if (encrypted && keyPair?.privateKey) {\n        try {\n          console.log('Decrypting message...');\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\n          decryptionStatus = 'decrypted';\n          console.log('Message decrypted successfully');\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\n          decryptionStatus = 'failed';\n          \n          setSecurityAlert({\n            username: 'System',\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\n            type: 'warning'\n          });\n        }\n      }\n      \n      // Create the message object\n      const messageObj = { \n        from, \n        message: decryptedMessage, \n        fromDeviceId, \n        timestamp: new Date(timestamp || new Date()),\n        encrypted,\n        decryptionStatus,\n        bounced: bounced || false\n      };\n      \n      // Add to global messages for backward compatibility\n      setMessages(msgs => [...msgs, messageObj]);\n      \n      // Add message to the appropriate chat\n      setChatMessages(prev => {\n        const updatedMessages = { \n          ...prev,\n          [from]: [...(prev[from] || []), messageObj]\n        };\n        \n        // Save to localStorage\n        saveChatHistory(username, from, updatedMessages[from]);\n        \n        return updatedMessages;\n      });\n      \n      // If this chat is not the current chat, increment unread count\n      if (currentChat !== from) {\n        setUnreadCounts(prev => {\n          const newCounts = {\n            ...prev,\n            [from]: (prev[from] || 0) + 1\n          };\n          \n          // Save to localStorage\n          saveUnreadCounts(username, newCounts);\n          \n          return newCounts;\n        });\n        \n        // Also increment in localStorage\n        incrementUnreadCount(username, from);\n      }\n      \n      // Make sure this user is in our active chats\n      setActiveChats(prev => {\n        if (!prev[from]) {\n          return {\n            ...prev,\n            [from]: true\n          };\n        }\n        return prev;\n      });\n      \n      // Check user status\n      checkUserStatus(from);\n    });\n    \n    // Handle public key requests\n    socketRef.current.on('publicKeyRequest', ({ from }, ack) => {\n      console.log(`Public key requested by ${from}`);\n      \n      if (keyPair && keyPair.publicKey) {\n        console.log(`Sending public key to ${from}`);\n        if (ack) ack({ success: true, publicKey: keyPair.publicKey });\n      } else {\n        console.warn('No public key available to share');\n        if (ack) ack({ success: false, reason: 'Public key not available' });\n      }\n    });\n    \n    // User status updates\n    socketRef.current.on('userStatusUpdate', (data) => {\n      console.log('User status update:', data);\n      const { username: user, online } = data;\n      \n      // If this is our current recipient, update their status\n      if (user === recipient) {\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\n        setRecipientStatus(prev => ({ \n          ...prev, \n          exists: true, // If we got a status update, the user definitely exists\n          online,\n          notRegisteredYet: false // Clear this flag since we know the user exists\n        }));\n      }\n      \n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          console.log(`Adding ${user} to online users list`);\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          console.log(`Removing ${user} from online users list`);\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n      \n      // Update recipient status for all active chats\n      if (activeChats[user]) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [user]: { \n            ...prev[user],\n            exists: true, \n            online \n          }\n        }));\n      }\n      \n      // If we're currently checking a recipient, refresh their status\n      if (recipient) {\n        checkRecipientStatus();\n      }\n    });\n    \n    // Handle bulk online users updates\n    socketRef.current.on('onlineUsersUpdate', (data) => {\n      console.log('Online users update:', data);\n      if (data && Array.isArray(data.users)) {\n        setOnlineUsers(data.users);\n        \n        // If we have a recipient, check if they're in the online users list\n        if (recipient && data.users.includes(recipient)) {\n          setRecipientStatus(prev => ({ \n            ...prev, \n            exists: true,\n            online: true,\n            notRegisteredYet: false\n          }));\n        } else if (recipient) {\n          // If recipient is not in the online users list, refresh their status\n          checkRecipientStatus();\n        }\n        \n        // Update status for all active chats\n        Object.keys(activeChats).forEach(chatUser => {\n          const isOnline = data.users.includes(chatUser);\n          setRecipientStatuses(prev => ({\n            ...prev,\n            [chatUser]: { \n              ...prev[chatUser],\n              exists: prev[chatUser]?.exists || isOnline, \n              online: isOnline \n            }\n          }));\n        });\n      }\n    });\n    \n    // Typing indicators\n    socketRef.current.on('userTyping', (data) => {\n      const { username: typingUser } = data;\n      \n      // Update typing status for this user\n      setTypingUsers(prev => ({\n        ...prev,\n        [typingUser]: true\n      }));\n      \n      // For backward compatibility\n      if (typingUser === recipient) {\n        setTyping(true);\n      }\n      \n      // Clear any existing timeout\n      clearTimeout(typingTimeoutRef.current);\n      \n      // Set a timeout to clear the typing indicator after 3 seconds\n      typingTimeoutRef.current = setTimeout(() => {\n        setTypingUsers(prev => ({\n          ...prev,\n          [typingUser]: false\n        }));\n        \n        // For backward compatibility\n        if (typingUser === recipient) {\n          setTyping(false);\n        }\n      }, 3000);\n    });\n    \n    // Error handling\n    socketRef.current.on('error', (error) => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`,\n        type: 'error'\n      });\n    });\n  };\n\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, (users) => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        // Send ping to keep connection alive\n        socketRef.current.emit('ping', {}, (response) => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n        \n        // Also refresh online users list\n        getOnlineUsers();\n        \n        // If we have a recipient, check their status\n        if (recipient) {\n          checkRecipientStatus();\n        }\n      }\n    }, 30000); // Every 30 seconds\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient || !socketRef.current) {\n      setRecipientStatus({ exists: false, online: false, checking: false });\n      return;\n    }\n    \n    console.log(`Checking status for recipient: ${recipient}`);\n    \n    // Set status to checking while we wait for the response\n    setRecipientStatus(prev => ({ ...prev, checking: true }));\n    \n    // Set a timeout to clear the checking status if we don't get a response\n    const checkingTimeout = setTimeout(() => {\n      setRecipientStatus(prev => {\n        if (prev.checking) {\n          return { ...prev, checking: false };\n        }\n        return prev;\n      });\n    }, 3000); // 3 seconds timeout\n    \n    // First check if the recipient is in the online users list\n    if (onlineUsers.includes(recipient)) {\n      clearTimeout(checkingTimeout);\n      console.log(`${recipient} found in online users list`);\n      setRecipientStatus({ exists: true, online: true, checking: false });\n      return;\n    }\n    \n    // If we're connected to a relay, use the checkRecipient event\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\n      socketRef.current.emit('checkRecipient', { username: recipient }, (relayResponse) => {\n        clearTimeout(checkingTimeout);\n        console.log('Relay recipient check response:', relayResponse);\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\n          // Only update if we got a valid response\n          setRecipientStatus({\n            ...relayResponse,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({ \n            exists: false, \n            online: false, \n            checking: false \n          });\n        }\n      });\n    } else {\n      // If connected directly to base node, use checkUser\n      socketRef.current.emit('checkUser', { username: recipient }, (response) => {\n        clearTimeout(checkingTimeout);\n        console.log('Base node recipient check response:', response);\n        \n        // If we got a valid response, use it\n        if (response && typeof response.exists === 'boolean') {\n          setRecipientStatus({\n            ...response,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({ \n            exists: false, \n            online: false, \n            checking: false \n          });\n        }\n      });\n    }\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n    \n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Key verification functions\n  const initializeVerificationStatuses = () => {\n    // Load verification statuses for all active chats\n    const activeChats = getActiveChats(username);\n    const initialVerificationStatuses = {};\n    \n    activeChats.forEach(chatUser => {\n      const verifiedKey = getVerifiedKey(username, chatUser);\n      if (verifiedKey) {\n        initialVerificationStatuses[chatUser] = {\n          verified: true,\n          status: 'verified',\n          message: 'Identity verified',\n          verifiedAt: verifiedKey.verifiedAt,\n          fingerprint: verifiedKey.fingerprint\n        };\n      } else {\n        initialVerificationStatuses[chatUser] = {\n          verified: false,\n          status: 'unverified',\n          message: 'Identity not verified'\n        };\n      }\n    });\n    \n    setVerificationStatuses(initialVerificationStatuses);\n  };\n  \n  const handleVerifyIdentity = (contactUsername) => {\n    // Get the public key for this contact\n    const contactPublicKey = publicKeys[contactUsername];\n    \n    if (!contactPublicKey) {\n      setSecurityAlert({\n        username: 'System',\n        message: `Cannot verify ${contactUsername}'s identity: No public key available.`,\n        type: 'error'\n      });\n      return;\n    }\n    \n    // Generate fingerprint for the key\n    generateKeyFingerprint(contactPublicKey).then(fingerprint => {\n      // Check if we already have a verified key for this contact\n      const verifiedKey = getVerifiedKey(username, contactUsername);\n      \n      let verificationInfo = {\n        contactUsername,\n        fingerprint,\n        status: 'new_contact',\n        message: 'New contact verification'\n      };\n      \n      if (verifiedKey) {\n        // We have a verified key, check if it matches\n        if (verifiedKey.fingerprint !== fingerprint) {\n          // Key mismatch\n          verificationInfo = {\n            contactUsername,\n            fingerprint,\n            previousFingerprint: verifiedKey.fingerprint,\n            status: 'key_mismatch',\n            message: 'Public key has changed since last verification',\n            verifiedAt: verifiedKey.verifiedAt\n          };\n        } else {\n          // Key matches\n          verificationInfo = {\n            contactUsername,\n            fingerprint,\n            status: 'verified',\n            message: 'Identity verified',\n            verifiedAt: verifiedKey.verifiedAt\n          };\n        }\n      }\n      \n      // Show verification modal\n      setCurrentVerification(verificationInfo);\n      setShowVerificationModal(true);\n    }).catch(error => {\n      console.error('Error generating key fingerprint:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error verifying identity: ${error.message}`,\n        type: 'error'\n      });\n    });\n  };\n  \n  const handleConfirmVerification = () => {\n    if (!currentVerification || !currentVerification.contactUsername) return;\n    \n    const { contactUsername } = currentVerification;\n    const contactPublicKey = publicKeys[contactUsername];\n    \n    if (!contactPublicKey) {\n      setSecurityAlert({\n        username: 'System',\n        message: `Cannot verify ${contactUsername}'s identity: No public key available.`,\n        type: 'error'\n      });\n      setShowVerificationModal(false);\n      return;\n    }\n    \n    // Store the verified key\n    storeVerifiedKey(username, contactUsername, contactPublicKey, deviceId);\n    \n    // Update verification status\n    setVerificationStatuses(prev => ({\n      ...prev,\n      [contactUsername]: {\n        verified: true,\n        status: 'verified',\n        message: 'Identity verified',\n        verifiedAt: Date.now(),\n        fingerprint: currentVerification.fingerprint\n      }\n    }));\n    \n    // Show confirmation\n    setSecurityAlert({\n      username: 'System',\n      message: `${contactUsername}'s identity has been verified.`,\n      type: 'success'\n    });\n    \n    // Close modal\n    setShowVerificationModal(false);\n  };\n  \n  const handleCancelVerification = () => {\n    setShowVerificationModal(false);\n  };\n\n  // Initialize chat data from localStorage\n  const initializeChatData = () => {\n    // Load active chats\n    const activeChats = getActiveChats(username);\n    \n    // Initialize chat data\n    const initialChatMessages = {};\n    const initialUnreadCounts = loadUnreadCounts(username);\n    const initialRecipientStatuses = {};\n    \n    // Load chat history for each active chat\n    activeChats.forEach(chatUser => {\n      initialChatMessages[chatUser] = loadChatHistory(username, chatUser);\n      initialRecipientStatuses[chatUser] = { exists: true, online: onlineUsers.includes(chatUser) };\n    });\n    \n    // Update state\n    setChatMessages(initialChatMessages);\n    setUnreadCounts(initialUnreadCounts);\n    setRecipientStatuses(initialRecipientStatuses);\n    \n    // Set active chats\n    const activeChatsObj = {};\n    activeChats.forEach(chatUser => {\n      activeChatsObj[chatUser] = true;\n    });\n    setActiveChats(activeChatsObj);\n    \n    // Initialize verification statuses\n    initializeVerificationStatuses();\n  };\n\n  const handleUsernameSubmit = async (e) => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      setIsCheckingUsername(true);\n      const tempSocket = io(BASE_NODE_URL, { forceNew: true, timeout: 5000 });\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', { username: username.trim() }, (response) => {\n          setIsCheckingUsername(false);\n          if (response && response.exists) {\n            setUsernameAvailable(false);\n            setSecurityAlert({\n              username: 'System',\n              message: `Username \"${username}\" is already taken.`,\n              type: 'error'\n            });\n            // Explicitly disconnect and do NOT set connected to true\n            tempSocket.disconnect();\n          } else {\n            setUsernameAvailable(true);\n            setConnected(true);\n            \n            // Initialize chat data from localStorage\n            initializeChatData();\n            \n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', (error) => {\n        console.error('Connection error during username check:', error);\n        setIsCheckingUsername(false);\n        setSecurityAlert({\n          username: 'System',\n          message: 'Could not verify username. Base node may be offline.',\n          type: 'error'\n        });\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        username: 'System',\n        message: 'Cannot connect: Server is offline',\n        type: 'error'\n      });\n    }\n  };\n\n  const handleRecipientChange = (e) => {\n    const newRecipient = e.target.value.trim();\n    setRecipient(newRecipient);\n    \n    // Reset recipient status when the recipient changes\n    setRecipientStatus({ exists: false, online: false, checking: false });\n    \n    // If the recipient is not empty, check their status\n    if (newRecipient && socketRef.current) {\n      // Use a small delay to avoid too many checks while typing\n      if (recipientCheckTimeoutRef.current) {\n        clearTimeout(recipientCheckTimeoutRef.current);\n      }\n      \n      recipientCheckTimeoutRef.current = setTimeout(() => {\n        checkRecipientStatus();\n      }, 500); // 500ms delay\n    }\n  };\n\n  const handleSend = async (e, bounce = false) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    \n    try {\n      // Show sending indicator\n      setStatus('Sending message...');\n      \n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\n      if (!bounce) {\n        // For direct messages, we need to check if the recipient exists and is online\n        const recipientOnline = recipientStatus.online;\n        \n        // If recipient is not online, suggest using relay\n        if (!recipientOnline) {\n          setSecurityAlert({\n            username: 'System',\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\n            type: 'warning'\n          });\n          setStatus('Registered successfully');\n          return;\n        }\n      }\n      \n      // Get recipient's public key if we don't have it and encryption is enabled\n      if (encryptionEnabled && !publicKeys[recipient]) {\n        try {\n          await requestPublicKey(recipient);\n        } catch (error) {\n          console.error('Failed to get public key:', error);\n          // Continue without encryption if we can't get the key\n        }\n      }\n      \n      // Check if this is the first message to this recipient\n      const previousMessages = chatMessages[recipient] || [];\n      const isFirstMessage = previousMessages.length === 0;\n      \n      // If this is the first message and we have the recipient's public key but haven't verified it\n      if (isFirstMessage && publicKeys[recipient] && !hasVerifiedKey(username, recipient)) {\n        // Show verification warning\n        const shouldProceed = window.confirm(\n          `⚠️ You haven't previously verified the identity of ${recipient}.\\n\\n` +\n          `Proceed only if you trust them. You can verify their identity after sending the message.`\n        );\n        \n        if (!shouldProceed) {\n          setStatus('Registered successfully');\n          return;\n        }\n        \n        // Generate fingerprint for the key\n        const fingerprint = await generateKeyFingerprint(publicKeys[recipient]);\n        \n        // Set as unverified\n        setVerificationStatuses(prev => ({\n          ...prev,\n          [recipient]: {\n            verified: false,\n            status: 'unverified',\n            message: 'Identity not verified',\n            fingerprint\n          }\n        }));\n      }\n      \n      let finalMessage = message.trim();\n      let isEncrypted = false;\n      \n      // Encrypt the message if encryption is enabled and we have the recipient's public key\n      if (encryptionEnabled && publicKeys[recipient]) {\n        try {\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\n          isEncrypted = true;\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          setSecurityAlert({\n            username: 'System',\n            message: 'Failed to encrypt message. Sending as plaintext.',\n            type: 'warning'\n          });\n        }\n      }\n      \n      const messageData = {\n        to: recipient,\n        message: finalMessage,\n        deviceId,\n        timestamp: new Date().toISOString(),\n        bounce: bounce, // Always use the bounce parameter directly\n        encrypted: isEncrypted,\n        publicKey: keyPair?.publicKey // Send our public key with the message\n      };\n      \n      console.log('Sending message:', { \n        ...messageData, \n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\n        bounce: bounce\n      });\n      \n      // Add a timeout to handle cases where the server doesn't respond\n      const messageTimeout = setTimeout(() => {\n        setSecurityAlert({\n          username: 'System',\n          message: 'Message sending timed out. Server may be offline.',\n          type: 'error'\n        });\n        setStatus('Registered successfully');\n      }, 10000);\n      \n      socketRef.current.emit('sendMessage', messageData, (response) => {\n        clearTimeout(messageTimeout);\n        console.log('Send message response:', response);\n        setStatus('Registered successfully');\n        \n        if (response && (response.delivered || response.bounced)) {\n          // Create message object\n          const messageObj = { \n            from: username, \n            message: message.trim(), // Store original message for display\n            fromDeviceId: deviceId, \n            timestamp: new Date(),\n            status: response.delivered ? 'delivered' : 'bounced',\n            expiresAt: response.expiresAt,\n            encrypted: isEncrypted\n          };\n          \n          // Add to global messages for backward compatibility\n          setMessages(msgs => [...msgs, messageObj]);\n          \n          // Add message to the appropriate chat\n          setChatMessages(prev => {\n            const updatedMessages = { \n              ...prev,\n              [recipient]: [...(prev[recipient] || []), messageObj]\n            };\n            \n            // Save to localStorage\n            saveChatHistory(username, recipient, updatedMessages[recipient]);\n            \n            return updatedMessages;\n          });\n          \n          // Make sure this user is in our active chats\n          setActiveChats(prev => {\n            if (!prev[recipient]) {\n              return {\n                ...prev,\n                [recipient]: true\n              };\n            }\n            return prev;\n          });\n          \n          // Clear message input\n          setMessage('');\n          \n          // Show notification if message was bounced\n          if (response.bounced) {\n            setSecurityAlert({\n              username: 'System',\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\n              type: 'info'\n            });\n          }\n        } else {\n          const errorMsg = response?.reason || 'Message delivery failed';\n          \n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\n            if (bounce) {\n              // For bounced messages to non-existent users, show a special message\n              setSecurityAlert({\n                username: 'System',\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\n                type: 'info'\n              });\n              \n              // Create message object\n              const messageObj = { \n                from: username, \n                message: message.trim(),\n                fromDeviceId: deviceId, \n                timestamp: new Date(),\n                status: 'bounced',\n                expiresAt: Date.now() + 14400000, // 4 hours\n                encrypted: isEncrypted\n              };\n              \n              // Add to global messages for backward compatibility\n              setMessages(msgs => [...msgs, messageObj]);\n              \n              // Add message to the appropriate chat\n              setChatMessages(prev => {\n                const updatedMessages = { \n                  ...prev,\n                  [recipient]: [...(prev[recipient] || []), messageObj]\n                };\n                \n                // Save to localStorage\n                saveChatHistory(username, recipient, updatedMessages[recipient]);\n                \n                return updatedMessages;\n              });\n              \n              // Make sure this user is in our active chats\n              setActiveChats(prev => {\n                if (!prev[recipient]) {\n                  return {\n                    ...prev,\n                    [recipient]: true\n                  };\n                }\n                return prev;\n              });\n              \n              // Clear message input\n              setMessage('');\n            } else {\n              setSecurityAlert({\n                username: 'System',\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\n                type: 'warning'\n              });\n            }\n          } else if (errorMsg.includes('offline')) {\n            setSecurityAlert({\n              username: 'System',\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\n              type: 'warning'\n            });\n          } else {\n            setSecurityAlert({\n              username: 'System',\n              message: `Failed to send message: ${errorMsg}`,\n              type: 'error'\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error sending message: ${error.message}`,\n        type: 'error'\n      });\n      setStatus('Registered successfully');\n    }\n  };\n  \n  // Request public key from a user\n  const requestPublicKey = async (username) => {\n    return new Promise((resolve, reject) => {\n      if (!socketRef.current) {\n        reject(new Error('Not connected'));\n        return;\n      }\n      \n      console.log(`Requesting public key for ${username}...`);\n      \n      // Set a timeout in case the server doesn't respond\n      const requestTimeout = setTimeout(() => {\n        console.error(`Public key request for ${username} timed out`);\n        reject(new Error('Request timed out'));\n      }, 10000);\n      \n      socketRef.current.emit('requestPublicKey', { username }, (response) => {\n        clearTimeout(requestTimeout);\n        \n        if (response && response.success && response.publicKey) {\n          console.log(`Received public key for ${username}`);\n          setPublicKeys(prev => ({ ...prev, [username]: response.publicKey }));\n          resolve(response.publicKey);\n        } else {\n          const reason = response?.reason || 'Public key not available';\n          console.log(`No public key available for ${username}: ${reason}`);\n          reject(new Error(reason));\n        }\n      });\n    });\n  };\n  \n  // Handle relay bounce for any user\n  const handleRelayBounce = (e) => {\n    e.preventDefault();\n    \n    if (!recipient || !message.trim() || !socketRef.current) {\n      console.log('Cannot send relay message: missing recipient, message, or socket');\n      return;\n    }\n    \n    // Show confirmation before bouncing\n    const confirmBounce = window.confirm(\n      `RELAY MESSAGE\\n\\n` +\n      `Your message to \"${recipient}\" will be securely encrypted and will continuously bounce across the relay network\\n` +\n      `until ${recipient} comes online or registers with the network.\\n\\n` +\n      `It will not be stored at any single point for long, ensuring privacy and delivery reliability.\\n\\n` +\n      `Do you want to continue?`\n    );\n    \n    if (confirmBounce) {\n      // Create a synthetic event object with preventDefault method\n      const syntheticEvent = { preventDefault: () => {} };\n      \n      // Call handleSend with our synthetic event and bounce=true\n      handleSend(syntheticEvent, true);\n    }\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    \n    // Send typing indicator\n    if (socketRef.current && recipient && e.target.value.length > 0) {\n      socketRef.current.emit('typing', { to: recipient });\n    }\n  };\n\n  const handleDisconnect = () => {\n    // Store the current socket reference\n    const currentSocket = socketRef.current;\n    \n    // Reset all state immediately to ensure the UI updates right away\n    setConnected(false);\n    setUsername('');\n    setOnlineUsers([]); \n    setActiveChats({});\n    setChatMessages({});\n    setCurrentChat(null);\n    setStatus('Disconnected');\n    setPublicKeys({});\n    setEncryptionStatus('disconnected');\n    setRecipientStatuses({}); \n    setMessages([]);\n    setRecipientStatus({ exists: false, online: false });\n    \n    // Clear intervals\n    if (pingIntervalRef.current) {\n      clearInterval(pingIntervalRef.current);\n      pingIntervalRef.current = null;\n    }\n    \n    // Notify the server and disconnect only if socket exists\n    if (currentSocket) {\n      try {\n        // Notify the server that we're intentionally disconnecting\n        currentSocket.emit('userLogout', { username, deviceId });\n        \n        // Give a small delay to ensure the logout message is sent before disconnecting\n        setTimeout(() => {\n          try {\n            if (currentSocket.connected) {\n              currentSocket.disconnect();\n            }\n          } catch (error) {\n            console.error('Error disconnecting socket:', error);\n          }\n          // Clear the socket reference\n          socketRef.current = null;\n        }, 100);\n      } catch (error) {\n        console.error('Error during disconnect:', error);\n        // Ensure socket reference is cleared even if there's an error\n        socketRef.current = null;\n      }\n    } else {\n      console.log('No active socket connection to disconnect');\n      socketRef.current = null;\n    }\n    \n    // Set relay status to offline\n    setRelayStatus('offline');\n  };\n\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  const formatMessageTime = (timestamp) => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  return (\n    <div style={{ \n      background: '#0a0e14', \n      minHeight: '100vh',\n      width: '100vw',\n      height: '100vh',\n      color: '#a2aabc', \n      display: 'flex', \n      flexDirection: 'column',\n      fontFamily: '\"Fira Code\", monospace',\n      overflow: 'hidden'\n    }}>\n      <div style={{ \n        background: '#171c28', \n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          padding: '16px 24px',\n          borderBottom: '1px solid #1e2d3d'\n        }}>\n          <h2 style={{ \n            margin: 0, \n            color: '#5ccfe6', \n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          }}>WhisperNet_</h2>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <div style={{ \n              fontSize: 12, \n              padding: '4px 8px', \n              borderRadius: 4, \n              background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n              color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n              cursor: 'pointer'\n            }} onClick={() => setShowConnectionInfo(!showConnectionInfo)}>\n              {relayStatus === 'online' ? 'Online' : \n               relayStatus === 'checking' ? 'Checking...' : 'Offline'}\n            </div>\n            <div style={{ \n              fontSize: 12, \n              padding: '4px 8px', \n              borderRadius: 4, \n              background: '#1c3b4b',\n              color: '#5ccfe6',\n              cursor: 'pointer'\n            }} onClick={() => setShowAboutPage(true)}>\n              About\n            </div>\n          </div>\n        </div>\n        \n        {showConnectionInfo && (\n          <div style={{ \n            background: '#0d1117', \n            padding: '8px 24px', \n            fontSize: 12, \n            fontFamily: 'monospace',\n            borderBottom: '1px solid #1e2d3d',\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '8px 24px'\n          }}>\n            <div>Status: {status}</div>\n            {connected && (\n              <>\n                <div>Socket ID: {connectionDetails.socketId || 'unknown'}</div>\n                <div>Transport: {connectionDetails.transport || 'unknown'}</div>\n                <div>Base Node: {connectionDetails.baseNodeUrl || BASE_NODE_URL}</div>\n                <div>Relay ID: <span style={{ color: '#5ccfe6' }}>{relayServerUrl || 'Unknown'}</span></div>\n                <div>Relay Status: <span style={{ \n                  color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : \n                         connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40' \n                }}>\n                  {connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : \n                   connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : \n                   connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'}\n                </span></div>\n                {connectionDetails.connectedUsers !== undefined && (\n                  <div>Users on Relay: {connectionDetails.connectedUsers}</div>\n                )}\n                {connectionDetails.ip && connectionDetails.port && (\n                  <div>Relay Address: {connectionDetails.ip}:{connectionDetails.port}</div>\n                )}\n              </>\n            )}\n            <div>Connection Status: <span style={{\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            }}>{relayStatus}</span></div>\n            {deviceId && <div>Device ID: {deviceId.substring(0, 8)}...</div>}\n          </div>\n        )}\n        \n        {showAboutPage && (\n          <div style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: 'rgba(13, 17, 23, 0.95)',\n            zIndex: 1000,\n            padding: '20px',\n            overflowY: 'auto',\n            display: 'flex',\n            flexDirection: 'column'\n          }}>\n            <div style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: '20px'\n            }}>\n              <h2 style={{ \n                margin: 0, \n                color: '#5ccfe6', \n                fontFamily: '\"Fira Code\", monospace',\n                letterSpacing: '1px'\n              }}>About WhisperNet_</h2>\n              <button \n                style={{ \n                  background: 'none', \n                  border: 'none', \n                  color: '#636b78', \n                  cursor: 'pointer',\n                  fontSize: 24\n                }}\n                onClick={() => setShowAboutPage(false)}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div style={{\n              color: '#a2aabc',\n              fontFamily: '\"Fira Code\", monospace',\n              fontSize: '14px',\n              lineHeight: '1.6',\n              maxWidth: '800px',\n              margin: '0 auto',\n              padding: '20px',\n              background: '#171c28',\n              borderRadius: '8px',\n              border: '1px solid #1e2d3d'\n            }}>\n              <h3 style={{ color: '#bae67e', marginTop: 0 }}>What is WhisperNet?</h3>\n              <p>\n                WhisperNet is a secure, decentralized messaging platform designed for private communications. \n                It uses end-to-end encryption and a distributed relay network to ensure your messages remain private and secure.\n              </p>\n              \n              <h3 style={{ color: '#bae67e' }}>How It Works</h3>\n              <p>\n                <span style={{ color: '#5ccfe6' }}>End-to-End Encryption:</span> All messages are encrypted on your device before being sent. \n                Only the intended recipient can decrypt and read them.\n              </p>\n              <p>\n                <span style={{ color: '#5ccfe6' }}>Distributed Relay Network:</span> Instead of storing messages on a central server, \n                WhisperNet uses a network of relay nodes to pass messages between users. This prevents any single point of failure or surveillance.\n              </p>\n              <p>\n                <span style={{ color: '#5ccfe6' }}>Message Bouncing:</span> When a recipient is offline, messages \"bounce\" through the relay network \n                until delivery. Messages are never stored permanently on any server.\n              </p>\n              \n              <h3 style={{ color: '#bae67e' }}>Key Features</h3>\n              <ul style={{ paddingLeft: '20px' }}>\n                <li><span style={{ color: '#ff8f40' }}>Direct Messaging:</span> Send encrypted messages directly when both users are online.</li>\n                <li><span style={{ color: '#ff8f40' }}>Relay Messaging:</span> Send messages that will be delivered when the recipient comes online.</li>\n                <li><span style={{ color: '#ff8f40' }}>Identity Verification:</span> Verify the identity of your contacts to prevent man-in-the-middle attacks.</li>\n                <li><span style={{ color: '#ff8f40' }}>Offline Message Delivery:</span> Messages sent while you're offline will be delivered when you reconnect.</li>\n              </ul>\n              \n              <h3 style={{ color: '#bae67e' }}>Security Model</h3>\n              <p>\n                WhisperNet uses asymmetric cryptography (public/private key pairs) to secure communications:\n              </p>\n              <ul style={{ paddingLeft: '20px' }}>\n                <li>Each user generates a unique cryptographic identity</li>\n                <li>Messages are encrypted with the recipient's public key</li>\n                <li>Only the recipient's private key can decrypt the messages</li>\n                <li>Key verification ensures you're talking to the right person</li>\n              </ul>\n              \n              <h3 style={{ color: '#bae67e' }}>The Relay Network</h3>\n              <p>\n                The relay network is what makes WhisperNet unique:\n              </p>\n              <ul style={{ paddingLeft: '20px' }}>\n                <li>Messages bounce between relay nodes until delivered</li>\n                <li>No message is stored permanently on any single server</li>\n                <li>The network is resilient to outages and censorship</li>\n                <li>Your IP address is obscured from the recipient</li>\n              </ul>\n              \n              <h3 style={{ color: '#bae67e' }}>Privacy Considerations</h3>\n              <p>\n                WhisperNet is designed with privacy in mind:\n              </p>\n              <ul style={{ paddingLeft: '20px' }}>\n                <li>No phone number or email required to register</li>\n                <li>No metadata collection or user tracking</li>\n                <li>No permanent storage of messages</li>\n                <li>Open-source code for transparency</li>\n              </ul>\n              \n              <h3 style={{ color: '#bae67e' }}>Application Workflow</h3>\n              <div style={{ textAlign: 'center', margin: '20px 0' }}>\n                <div style={{ \n                  background: '#0d1117', \n                  padding: '20px', \n                  borderRadius: '8px', \n                  border: '1px solid #1e2d3d',\n                  display: 'inline-block',\n                  maxWidth: '100%',\n                  overflowX: 'auto'\n                }}>\n                  <pre style={{ \n                    color: '#a2aabc', \n                    margin: 0, \n                    textAlign: 'left',\n                    fontFamily: '\"Fira Code\", monospace',\n                    fontSize: '12px',\n                    lineHeight: '1.5'\n                  }}>\n{`┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│                 │     │                 │     │                 │\n│  User Interface │     │  Relay Network  │     │  Encryption     │\n│                 │     │                 │     │  System         │\n└────────┬────────┘     └────────┬────────┘     └────────┬────────┘\n         │                       │                       │\n         │                       │                       │\n         ▼                       ▼                       ▼\n┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│ - Login         │     │ - Message       │     │ - Key           │\n│ - Chat UI       │     │   Routing       │     │   Generation    │\n│ - User List     │     │ - Relay         │     │ - Encryption    │\n│ - Message Input │     │   Bouncing      │     │ - Decryption    │\n│ - Verification  │     │ - User Status   │     │ - Verification  │\n└────────┬────────┘     └────────┬────────┘     └────────┬────────┘\n         │                       │                       │\n         │                       │                       │\n         ▼                       ▼                       ▼\n┌───────────────────────────────────────────────────────────────┐\n│                                                               │\n│                    Secure Communication                       │\n│                                                               │\n└───────────────────────────────────────────────────────────────┘`}\n                  </pre>\n                </div>\n              </div>\n              \n              <h3 style={{ color: '#bae67e' }}>Collaborators</h3>\n              <div style={{ \n                display: 'flex', \n                justifyContent: 'center', \n                gap: '30px', \n                flexWrap: 'wrap',\n                margin: '20px 0'\n              }}>\n                <div style={{ textAlign: 'center' }}>\n                  <a \n                    href=\"https://github.com/Prathamesh0901\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    style={{ color: '#5ccfe6', textDecoration: 'none' }}\n                  >\n                    <div style={{ fontSize: '16px', marginBottom: '5px' }}>Prathmesh Mane</div>\n                    <div style={{ color: '#636b78', fontSize: '12px' }}>github.com/Prathamesh0901</div>\n                  </a>\n                </div>\n                \n                <div style={{ textAlign: 'center' }}>\n                  <a \n                    href=\"https://github.com/JaidTamboli\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    style={{ color: '#5ccfe6', textDecoration: 'none' }}\n                  >\n                    <div style={{ fontSize: '16px', marginBottom: '5px' }}>Jaid Tamboli</div>\n                    <div style={{ color: '#636b78', fontSize: '12px' }}>github.com/JaidTamboli</div>\n                  </a>\n                </div>\n                \n                <div style={{ textAlign: 'center' }}>\n                  <a \n                    href=\"https://github.com/sidinsearch\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    style={{ color: '#5ccfe6', textDecoration: 'none' }}\n                  >\n                    <div style={{ fontSize: '16px', marginBottom: '5px' }}>Siddharth Shinde</div>\n                    <div style={{ color: '#636b78', fontSize: '12px' }}>github.com/sidinsearch</div>\n                  </a>\n                </div>\n              </div>\n              \n              <div style={{ marginTop: '30px', textAlign: 'center', color: '#636b78', fontSize: '12px' }}>\n                WhisperNet © 2023 - Secure, Private, Decentralized Communications\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {securityAlert && (\n          <div style={{ \n            background: '#4b1c1c', \n            color: '#ff8f40', \n            padding: '12px 24px', \n            borderBottom: '1px solid #1e2d3d',\n            position: 'relative',\n            fontSize: 14\n          }}>\n            <div style={{ marginRight: 20 }}>{securityAlert.message}</div>\n            <button \n              style={{ \n                position: 'absolute', \n                top: 12, \n                right: 24, \n                background: 'none', \n                border: 'none', \n                color: '#ff8f40', \n                cursor: 'pointer',\n                fontSize: 16\n              }}\n              onClick={dismissAlert}\n            >\n              ×\n            </button>\n          </div>\n        )}\n        \n        {!connected ? (\n          <div style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '0 24px'\n          }}>\n            <div style={{ \n              maxWidth: '400px',\n              width: '100%'\n            }}>\n              <div style={{ \n                display: 'flex', \n                flexDirection: 'column', \n                alignItems: 'center', \n                marginBottom: 24 \n              }}>\n                <img \n                  src={appIcon}\n                  alt=\"WhisperNet Logo\" \n                  style={{ \n                    width: '120px', \n                    height: '120px', \n                    marginBottom: 16,\n                    borderRadius: '50%',\n                    border: '2px solid #1e2d3d'\n                  }} \n                />\n                <div style={{ fontSize: 14, color: '#5ccfe6', marginTop: 8 }}>\n                  {getTimestamp()} Initializing secure connection...\n                </div>\n              </div>\n              <form onSubmit={handleUsernameSubmit}>\n                <input\n                  style={{ \n                    width: '100%', \n                    padding: 10, \n                    marginBottom: 12, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 16,\n                    fontFamily: '\"Fira Code\", monospace',\n                    boxSizing: 'border-box'\n                  }}\n                  placeholder=\"Enter username\"\n                  value={username}\n                  onChange={e => {\n                    setUsername(e.target.value);\n                    setUsernameAvailable(true);\n                  }}\n                  required\n                />\n                {!usernameAvailable && <div style={{color: '#ff8f40', fontSize: 12, marginTop: -8, marginBottom: 8}}>Username not available.</div>}\n                <button\n                  style={{\n                    width: '100%',\n                    padding: 10,\n                    borderRadius: 4,\n                    background: relayStatus === 'online' ?\n                      'linear-gradient(90deg, #5ccfe6, #bae67e)' :\n                      '#636b78',\n                    color: '#171c28',\n                    fontWeight: 'bold',\n                    fontSize: 16,\n                    border: 'none',\n                    cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  type=\"submit\"\n                  disabled={relayStatus !== 'online' || isCheckingUsername}\n                >\n                  {isCheckingUsername ? 'CHECKING...' : (relayStatus === 'online' ? 'AUTHENTICATE' : 'SERVER OFFLINE')}\n                </button>\n              </form>\n              {relayStatus !== 'online' && (\n                <button \n                  style={{ \n                    width: '100%', \n                    padding: 8, \n                    marginTop: 8,\n                    borderRadius: 4, \n                    background: '#4b1c1c', \n                    color: '#ff8f40', \n                    fontSize: 14, \n                    border: 'none',\n                    cursor: 'pointer',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }} \n                  onClick={retryConnection}\n                >\n                  RETRY CONNECTION\n                </button>\n              )}\n              <div style={{ marginTop: 12, color: '#ff3333', textAlign: 'center', fontSize: 14 }}>\n                {status}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div style={{\n            flex: 1,\n            display: 'flex',\n            overflow: 'hidden'\n          }}>\n            {/* User list sidebar */}\n            <UserList \n              users={onlineUsers.map(user => ({ username: user, online: true }))}\n              activeChats={activeChats}\n              unreadCounts={unreadCounts}\n              onSelectUser={openChat}\n              currentUser={username}\n              onClearHistory={handleClearAllHistory}\n              onNewChat={handleNewChat}\n            />\n            \n            {/* Main chat area */}\n            <div style={{\n              flex: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              overflow: 'hidden'\n            }}>\n              {/* Welcome screen or active chat */}\n              {!currentChat ? (\n                <div style={{\n                  flex: 1,\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  padding: '0 24px',\n                  background: '#0d1117'\n                }}>\n                  <div style={{ \n                    fontSize: 24, \n                    color: '#5ccfe6', \n                    marginBottom: 16,\n                    fontWeight: 'bold'\n                  }}>\n                    Welcome to WhisperNet\n                  </div>\n                  <div style={{ \n                    fontSize: 16, \n                    color: '#a2aabc', \n                    textAlign: 'center',\n                    maxWidth: 500,\n                    lineHeight: 1.5\n                  }}>\n                    Select a user from the sidebar to start a conversation or click on a username when you receive a message.\n                  </div>\n                  <div style={{ \n                    marginTop: 32,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                  }}>\n                    <div style={{ \n                      fontSize: 14, \n                      color: '#636b78', \n                      marginBottom: 8 \n                    }}>\n                      Connected as:\n                    </div>\n                    <div style={{ \n                      fontSize: 20, \n                      color: '#bae67e', \n                      fontWeight: 'bold' \n                    }}>\n                      {username}\n                    </div>\n                  </div>\n                  <button \n                    style={{ \n                      marginTop: 32,\n                      padding: '8px 16px', \n                      borderRadius: 4, \n                      background: '#4b1c1c', \n                      color: '#ff8f40', \n                      fontSize: 14, \n                      border: 'none',\n                      cursor: 'pointer',\n                      fontFamily: '\"Fira Code\", monospace'\n                    }} \n                    onClick={handleDisconnect}\n                  >\n                    DISCONNECT\n                  </button>\n                </div>\n              ) : (\n                <ChatBox \n                  recipient={currentChat}\n                  messages={chatMessages[currentChat] || []}\n                  username={username}\n                  onSendMessage={(recipient, messageText) => {\n                    console.log('Send message called with:', recipient, messageText);\n                    \n                    // Store the current values\n                    const currentRecipient = recipient;\n                    const currentMessage = messageText;\n                    \n                    // Set state\n                    setRecipient(currentRecipient);\n                    setMessage(currentMessage);\n                    \n                    // Check if recipient is online\n                    const isRecipientOnline = recipientStatuses[currentRecipient] && \n                                             recipientStatuses[currentRecipient].online;\n                    \n                    if (!isRecipientOnline) {\n                      // Recipient is offline, suggest using relay\n                      const useRelay = window.confirm(\n                        `${currentRecipient} appears to be offline.\\n\\n` +\n                        `Would you like to send this as a relay message instead?\\n` +\n                        `(The message will be delivered when they come online)`\n                      );\n                      \n                      if (useRelay) {\n                        // Use the relay function instead\n                        const relayEvent = { preventDefault: () => {} };\n                        \n                        // Show confirmation before relaying\n                        const confirmRelay = window.confirm(\n                          `RELAY MESSAGE\\n\\n` +\n                          `Your message to \"${currentRecipient}\" will be securely encrypted and will continuously bounce across the relay network\\n` +\n                          `until ${currentRecipient} comes online or registers with the network.\\n\\n` +\n                          `It will not be stored at any single point for long, ensuring privacy and delivery reliability.\\n\\n` +\n                          `Do you want to continue?`\n                        );\n                        \n                        if (confirmRelay) {\n                          // Call relay function\n                          sendRelayMessage(currentRecipient, currentMessage);\n                        }\n                        return;\n                      } else {\n                        // User wants to try direct message anyway\n                        console.log('Attempting direct message to offline user:', currentRecipient);\n                      }\n                    }\n                    \n                    // Function to add message to chat history\n                    function addMessageToChat(from, to, messageText, encrypted) {\n                      const newMessage = {\n                        from: from,\n                        to: to,\n                        message: messageText,\n                        timestamp: Date.now(),\n                        fromDeviceId: deviceId,\n                        encrypted: encrypted\n                      };\n                      \n                      // Update chat messages\n                      setChatMessages(prev => {\n                        const updatedMessages = { ...prev };\n                        if (!updatedMessages[to]) {\n                          updatedMessages[to] = [];\n                        }\n                        updatedMessages[to] = [...updatedMessages[to], newMessage];\n                        \n                        // Save to localStorage\n                        saveChatHistory(username, to, updatedMessages[to]);\n                        \n                        return updatedMessages;\n                      });\n                    }\n                    \n                    // Function to send unencrypted message\n                    function sendUnencryptedMessage() {\n                      console.log('Sending unencrypted direct message to:', currentRecipient);\n                      \n                      if (!socketRef.current) {\n                        console.error('Socket not available for direct message');\n                        setSecurityAlert({\n                          username: 'System',\n                          message: 'Cannot send message: Connection not available',\n                          type: 'error'\n                        });\n                        return;\n                      }\n                      \n                      socketRef.current.emit('sendMessage', {\n                        to: currentRecipient,\n                        message: currentMessage,\n                        from: username,\n                        fromDeviceId: deviceId,\n                        timestamp: Date.now(),\n                        publicKey: keyPair ? keyPair.publicKey : null,\n                        encrypted: false\n                      });\n                      \n                      // Add message to chat\n                      addMessageToChat(username, currentRecipient, currentMessage, false);\n                    }\n                    \n                    // Function to send relay message\n                    function sendRelayMessage(to, msg) {\n                      if (!socketRef.current) {\n                        console.error('Socket not available for relay message');\n                        setSecurityAlert({\n                          username: 'System',\n                          message: 'Cannot send relay message: Connection not available',\n                          type: 'error'\n                        });\n                        return;\n                      }\n                      \n                      // Show sending indicator\n                      setStatus('Sending relay message...');\n                      \n                      // Function to add relay message to chat\n                      function addRelayMessageToChat(from, to, messageText, encrypted) {\n                        const newMessage = {\n                          from: from,\n                          to: to,\n                          message: messageText,\n                          timestamp: Date.now(),\n                          fromDeviceId: deviceId,\n                          relayed: true,\n                          encrypted: encrypted\n                        };\n                        \n                        // Update chat messages\n                        setChatMessages(prev => {\n                          const updatedMessages = { ...prev };\n                          if (!updatedMessages[to]) {\n                            updatedMessages[to] = [];\n                          }\n                          updatedMessages[to] = [...updatedMessages[to], newMessage];\n                          \n                          // Save to localStorage\n                          saveChatHistory(username, to, updatedMessages[to]);\n                          \n                          return updatedMessages;\n                        });\n                        \n                        // Show success message\n                        setSecurityAlert({\n                          username: 'System',\n                          message: `Message to ${to} will be delivered when they come online.`,\n                          type: 'info'\n                        });\n                        \n                        setStatus('Registered successfully');\n                      }\n                      \n                      // Send unencrypted relay message\n                      socketRef.current.emit('relayMessage', {\n                        to: to,\n                        message: msg,\n                        from: username,\n                        fromDeviceId: deviceId,\n                        timestamp: Date.now(),\n                        publicKey: keyPair ? keyPair.publicKey : null,\n                        encrypted: false\n                      }, (response) => {\n                        if (response && response.success) {\n                          // Add message to chat\n                          addRelayMessageToChat(username, to, msg, false);\n                        } else {\n                          // Show error message\n                          setSecurityAlert({\n                            username: 'System',\n                            message: `Failed to relay message: ${response && response.error ? response.error : 'Unknown error'}`,\n                            type: 'error'\n                          });\n                          setStatus('Registered successfully');\n                        }\n                      });\n                    }\n                    \n                    // Encrypt message if possible\n                    if (encryptionEnabled && publicKeys[currentRecipient]) {\n                      try {\n                        console.log('Attempting to encrypt direct message for:', currentRecipient);\n                        \n                        // Try to encrypt the message\n                        encryptMessage(currentMessage, publicKeys[currentRecipient])\n                          .then(encryptedMessage => {\n                            console.log('Successfully encrypted direct message');\n                            \n                            if (!socketRef.current) {\n                              console.error('Socket not available for encrypted message');\n                              setSecurityAlert({\n                                username: 'System',\n                                message: 'Cannot send message: Connection not available',\n                                type: 'error'\n                              });\n                              return;\n                            }\n                            \n                            // Send the encrypted message\n                            socketRef.current.emit('sendMessage', {\n                              to: currentRecipient,\n                              message: encryptedMessage,\n                              from: username,\n                              fromDeviceId: deviceId,\n                              timestamp: Date.now(),\n                              publicKey: keyPair ? keyPair.publicKey : null,\n                              encrypted: true\n                            });\n                            \n                            // Update chat messages with the unencrypted version for display\n                            addMessageToChat(username, currentRecipient, currentMessage, true);\n                          })\n                          .catch(error => {\n                            console.error('Failed to encrypt message:', error);\n                            // Send unencrypted as fallback\n                            sendUnencryptedMessage();\n                          });\n                      } catch (error) {\n                        console.error('Error in encryption:', error);\n                        // Send unencrypted as fallback\n                        sendUnencryptedMessage();\n                      }\n                    } else {\n                      // Send unencrypted\n                      sendUnencryptedMessage();\n                    }\n                  }}\n                  onRelayMessage={(recipient, messageText) => {\n                    console.log('Relay message called with:', recipient, messageText);\n                    \n                    // Store the current values\n                    const currentRecipient = recipient;\n                    const currentMessage = messageText;\n                    \n                    // Set state\n                    setRecipient(currentRecipient);\n                    setMessage(currentMessage);\n                    \n                    // Show confirmation before relaying\n                    const confirmRelay = window.confirm(\n                      `RELAY MESSAGE\\n\\n` +\n                      `Your message to \"${currentRecipient}\" will be securely encrypted and will continuously bounce across the relay network\\n` +\n                      `until ${currentRecipient} comes online or registers with the network.\\n\\n` +\n                      `It will not be stored at any single point for long, ensuring privacy and delivery reliability.\\n\\n` +\n                      `Do you want to continue?`\n                    );\n                    \n                    if (!confirmRelay) {\n                      return; // User cancelled\n                    }\n                    \n                    // Call relay function directly with the values\n                    if (socketRef.current) {\n                      // Show sending indicator\n                      setStatus('Sending relay message...');\n                      \n                      // Function to add message to chat history\n                      function addRelayMessageToChat(from, to, messageText, encrypted) {\n                        const newMessage = {\n                          from: from,\n                          to: to,\n                          message: messageText,\n                          timestamp: Date.now(),\n                          fromDeviceId: deviceId,\n                          relayed: true,\n                          encrypted: encrypted\n                        };\n                        \n                        // Update chat messages\n                        setChatMessages(prev => {\n                          const updatedMessages = { ...prev };\n                          if (!updatedMessages[to]) {\n                            updatedMessages[to] = [];\n                          }\n                          updatedMessages[to] = [...updatedMessages[to], newMessage];\n                          \n                          // Save to localStorage\n                          saveChatHistory(username, to, updatedMessages[to]);\n                          \n                          return updatedMessages;\n                        });\n                        \n                        // Show success message\n                        setSecurityAlert({\n                          username: 'System',\n                          message: `Message to ${to} will be delivered when they come online.`,\n                          type: 'info'\n                        });\n                        \n                        setStatus('Registered successfully');\n                      }\n                      \n                      // Send unencrypted message first as a fallback\n                      function sendUnencryptedRelayMessage() {\n                        console.log('Sending unencrypted relay message to:', currentRecipient);\n                        \n                        socketRef.current.emit('relayMessage', {\n                          to: currentRecipient,\n                          message: currentMessage,\n                          from: username,\n                          fromDeviceId: deviceId,\n                          timestamp: Date.now(),\n                          publicKey: keyPair ? keyPair.publicKey : null,\n                          encrypted: false\n                        }, (response) => {\n                          if (response && response.success) {\n                            // Add message to chat\n                            addRelayMessageToChat(username, currentRecipient, currentMessage, false);\n                          } else {\n                            // Show error message\n                            setSecurityAlert({\n                              username: 'System',\n                              message: `Failed to relay message: ${response && response.error ? response.error : 'Unknown error'}`,\n                              type: 'error'\n                            });\n                            setStatus('Registered successfully');\n                          }\n                        });\n                      }\n                      \n                      // Try to encrypt if possible\n                      if (encryptionEnabled && publicKeys[currentRecipient]) {\n                        try {\n                          console.log('Attempting to encrypt relay message for:', currentRecipient);\n                          \n                          // Try to encrypt the message\n                          encryptMessage(currentMessage, publicKeys[currentRecipient])\n                            .then(encryptedMessage => {\n                              console.log('Successfully encrypted relay message');\n                              \n                              // Send the encrypted message\n                              socketRef.current.emit('relayMessage', {\n                                to: currentRecipient,\n                                message: encryptedMessage,\n                                from: username,\n                                fromDeviceId: deviceId,\n                                timestamp: Date.now(),\n                                publicKey: keyPair ? keyPair.publicKey : null,\n                                encrypted: true\n                              }, (response) => {\n                                if (response && response.success) {\n                                  // Add message to chat with the unencrypted version for display\n                                  addRelayMessageToChat(username, currentRecipient, currentMessage, true);\n                                } else {\n                                  console.error('Relay message failed:', response);\n                                  // Show error message\n                                  setSecurityAlert({\n                                    username: 'System',\n                                    message: `Failed to relay message: ${response && response.error ? response.error : 'Unknown error'}`,\n                                    type: 'error'\n                                  });\n                                  setStatus('Registered successfully');\n                                }\n                              });\n                            })\n                            .catch(error => {\n                              console.error('Failed to encrypt relay message:', error);\n                              // Send unencrypted as fallback\n                              sendUnencryptedRelayMessage();\n                            });\n                        } catch (error) {\n                          console.error('Error in relay encryption:', error);\n                          // Send unencrypted as fallback\n                          sendUnencryptedRelayMessage();\n                        }\n                      } else {\n                        // Send unencrypted\n                        sendUnencryptedRelayMessage();\n                      }\n                    } else {\n                      console.error('Socket not available for relay message');\n                      setSecurityAlert({\n                        username: 'System',\n                        message: 'Cannot send relay message: Connection not available',\n                        type: 'error'\n                      });\n                    }\n                  }}\n                  recipientStatus={recipientStatuses[currentChat] || { exists: false, online: false }}\n                  typing={typingUsers[currentChat] || false}\n                  onMessageChange={(message) => {\n                    // Send typing indicator\n                    if (socketRef.current && currentChat && message.length > 0) {\n                      socketRef.current.emit('typing', { to: currentChat });\n                    }\n                  }}\n                  onClose={() => closeChat(currentChat)}\n                  verificationStatus={verificationStatuses[currentChat]}\n                  onVerifyIdentity={handleVerifyIdentity}\n                />\n              )}\n              \n              {/* Connection status footer */}\n              <div style={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                padding: '8px 16px',\n                borderTop: '1px solid #1e2d3d',\n                background: '#171c28'\n              }}>\n                <div style={{ \n                  fontSize: 12, \n                  color: '#636b78', \n                  display: 'flex', \n                  alignItems: 'center' \n                }}>\n                  <div style={{ \n                    width: 8, \n                    height: 8, \n                    borderRadius: '50%', \n                    background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                    marginRight: 6 \n                  }}></div>\n                  {status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST'}\n                </div>\n                \n                <button \n                  style={{ \n                    padding: '4px 12px', \n                    borderRadius: 4, \n                    background: '#4b1c1c', \n                    color: '#ff8f40', \n                    fontSize: 12, \n                    border: 'none',\n                    cursor: 'pointer',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }} \n                  onClick={handleDisconnect}\n                >\n                  DISCONNECT\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Verification Modal */}\n      <VerificationModal\n        isOpen={showVerificationModal}\n        onClose={handleCancelVerification}\n        verificationInfo={currentVerification || {}}\n        onVerify={handleConfirmVerification}\n        onCancel={handleCancelVerification}\n        username={username}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,8BAA8B;AACxD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D;AACA,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SACEC,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,oBAAoB,QACf,qBAAqB;AAC5B,SACEC,gBAAgB,EAChBC,cAAc,EACdC,cAAc,EACdC,SAAS,EACTC,sBAAsB,EACtBC,kBAAkB,EAClBC,oBAAoB,QACf,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB,IAAI,uBAAuB;;AAEpF;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,WAAW,CACpD;MACEC,IAAI,EAAE,UAAU;MAChBC,aAAa,EAAE,IAAI;MACnBC,cAAc,EAAE,IAAIC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACzCC,IAAI,EAAE;IACR,CAAC,EACD,IAAI,EACJ,CAAC,SAAS,EAAE,SAAS,CACvB,CAAC;;IAED;IACA,MAAMC,SAAS,GAAG,MAAMT,MAAM,CAACC,MAAM,CAACC,MAAM,CAACQ,SAAS,CAAC,KAAK,EAAEX,OAAO,CAACU,SAAS,CAAC;IAChF,MAAME,UAAU,GAAG,MAAMX,MAAM,CAACC,MAAM,CAACC,MAAM,CAACQ,SAAS,CAAC,KAAK,EAAEX,OAAO,CAACY,UAAU,CAAC;IAElF,OAAO;MAAEF,SAAS;MAAEE;IAAW,CAAC;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,cAAc,GAAG,MAAAA,CAAOC,OAAO,EAAEC,YAAY,KAAK;EACtD,IAAI;IACF;IACA,MAAMP,SAAS,GAAG,MAAMT,MAAM,CAACC,MAAM,CAACC,MAAM,CAACe,SAAS,CACpD,KAAK,EACLD,YAAY,EACZ;MACEZ,IAAI,EAAE,UAAU;MAChBI,IAAI,EAAE;IACR,CAAC,EACD,KAAK,EACL,CAAC,SAAS,CACZ,CAAC;;IAED;IACA,MAAMU,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IACjC,MAAMC,IAAI,GAAGF,OAAO,CAACG,MAAM,CAACN,OAAO,CAAC;;IAEpC;IACA,MAAMO,aAAa,GAAG,MAAMtB,MAAM,CAACC,MAAM,CAACC,MAAM,CAACqB,OAAO,CACtD;MACEnB,IAAI,EAAE;IACR,CAAC,EACDK,SAAS,EACTW,IACF,CAAC;;IAED;IACA,OAAOI,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,GAAG,IAAInB,UAAU,CAACe,aAAa,CAAC,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMe,cAAc,GAAG,MAAAA,CAAOC,gBAAgB,EAAEC,aAAa,KAAK;EAChE,IAAI;IACF;IACA,MAAMlB,UAAU,GAAG,MAAMX,MAAM,CAACC,MAAM,CAACC,MAAM,CAACe,SAAS,CACrD,KAAK,EACLY,aAAa,EACb;MACEzB,IAAI,EAAE,UAAU;MAChBI,IAAI,EAAE;IACR,CAAC,EACD,KAAK,EACL,CAAC,SAAS,CACZ,CAAC;;IAED;IACA,MAAMc,aAAa,GAAGf,UAAU,CAACuB,IAAI,CAACC,IAAI,CAACH,gBAAgB,CAAC,EAAEI,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;;IAEnF;IACA,MAAMC,aAAa,GAAG,MAAMlC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACiC,OAAO,CACtD;MACE/B,IAAI,EAAE;IACR,CAAC,EACDO,UAAU,EACVW,aACF,CAAC;;IAED;IACA,MAAMc,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IACjC,OAAOD,OAAO,CAACE,MAAM,CAACJ,aAAa,CAAC;EACtC,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,sCAAsC;EAC/C;AACF,CAAC;;AAED;AACA,MAAM2B,SAAS,GAAGrE,aAAa,CAACsE,IAAI,CAAC,CAAC;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG/E,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgF,SAAS,EAAEC,YAAY,CAAC,GAAGjF,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkD,OAAO,EAAEgC,UAAU,CAAC,GAAGlF,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmF,QAAQ,EAAEC,WAAW,CAAC,GAAGpF,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqF,SAAS,EAAEC,YAAY,CAAC,GAAGtF,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuF,MAAM,EAAEC,SAAS,CAAC,GAAGxF,QAAQ,CAAC,0BAA0B,CAAC;EAChE,MAAM,CAACyF,QAAQ,EAAEC,WAAW,CAAC,GAAG1F,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC2F,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5F,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC6F,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG9F,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAAC+F,aAAa,EAAEC,gBAAgB,CAAC,GAAGhG,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACiG,aAAa,EAAEC,gBAAgB,CAAC,GAAGlG,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACmG,MAAM,EAAEC,SAAS,CAAC,GAAGpG,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACqG,cAAc,EAAEC,iBAAiB,CAAC,GAAGtG,QAAQ,CAAC,SAAS,CAAC;EAC/D,MAAM,CAACuG,WAAW,EAAEC,cAAc,CAAC,GAAGxG,QAAQ,CAAC,UAAU,CAAC;EAC1D,MAAM,CAACyG,WAAW,EAAEC,cAAc,CAAC,GAAG1G,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC2G,eAAe,EAAEC,kBAAkB,CAAC,GAAG5G,QAAQ,CAAC;IAAE6G,MAAM,EAAE,KAAK;IAAEC,MAAM,EAAE;EAAM,CAAC,CAAC;EACxF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhH,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACiH,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlH,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACkC,OAAO,EAAEiF,UAAU,CAAC,GAAGnH,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoH,UAAU,EAAEC,aAAa,CAAC,GAAGrH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACsH,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvH,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACwH,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzH,QAAQ,CAAC,cAAc,CAAC;;EAExE;EACA,MAAM,CAAC0H,WAAW,EAAEC,cAAc,CAAC,GAAG3H,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC4H,YAAY,EAAEC,eAAe,CAAC,GAAG7H,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAAC8H,WAAW,EAAEC,cAAc,CAAC,GAAG/H,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACgI,WAAW,EAAEC,cAAc,CAAC,GAAGjI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACkI,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAACoI,YAAY,EAAEC,eAAe,CAAC,GAAGrI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM,CAACsI,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGvI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtE,MAAM,CAACwI,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGzI,QAAQ,CAAC,KAAK,CAAC;EACzE,MAAM,CAAC0I,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG3I,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAAC4I,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG7I,QAAQ,CAAC,KAAK,CAAC;EAEvE,MAAM8I,SAAS,GAAG7I,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM8I,cAAc,GAAG9I,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM+I,gBAAgB,GAAG/I,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMgJ,eAAe,GAAGhJ,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMiJ,wBAAwB,GAAGjJ,MAAM,CAAC,IAAI,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiJ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF;QACA,MAAMC,OAAO,GAAG7H,kBAAkB,CAAC,CAAC;QACpCsH,uBAAuB,CAACO,OAAO,CAAC;QAEhC,IAAIA,OAAO,EAAE;UACXlD,gBAAgB,CAAC;YACfpB,QAAQ,EAAE,QAAQ;YAClB5B,OAAO,EAAE,8EAA8E;YACvFmG,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;;QAEA;QACA,MAAMC,EAAE,GAAG,MAAM5E,SAAS;QAC1B,MAAM6E,MAAM,GAAG,MAAMD,EAAE,CAACE,GAAG,CAAC,CAAC;QAC7B,MAAMC,SAAS,GAAGF,MAAM,CAACE,SAAS;QAClC/D,WAAW,CAAC+D,SAAS,CAAC;;QAEtB;QACA,MAAMC,oBAAoB,CAACD,SAAS,CAAC;MACvC,CAAC,CAAC,OAAO1G,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD;QACA,MAAM4G,UAAU,GAAG,WAAW,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACxErE,WAAW,CAACiE,UAAU,CAAC;;QAEvB;QACA,MAAMD,oBAAoB,CAACC,UAAU,CAAC;MACxC;IACF,CAAC;IAEDR,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,oBAAoB,GAAG,MAAOM,gBAAgB,IAAK;IACvD,IAAI;MACFvC,mBAAmB,CAAC,cAAc,CAAC;;MAEnC;MACA,MAAMwC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkBH,gBAAgB,EAAE,CAAC;MAE7E,IAAIC,UAAU,EAAE;QACd;QACA,IAAI;UACF,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;;UAEzC;UACA,IAAIG,UAAU,CAACxH,SAAS,IAAIwH,UAAU,CAACtH,UAAU,EAAE;YACjD,IAAI;cACF;cACA,MAAMyH,WAAW,GAAG,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;cACnD,MAAMC,SAAS,GAAG,MAAMzH,cAAc,CAACsH,WAAW,EAAEH,UAAU,CAACxH,SAAS,CAAC;cACzE,MAAM+H,SAAS,GAAG,MAAM7G,cAAc,CAAC4G,SAAS,EAAEN,UAAU,CAACtH,UAAU,CAAC;cAExE,IAAI6H,SAAS,KAAKJ,WAAW,EAAE;gBAC7B;gBACApD,UAAU,CAACiD,UAAU,CAAC;gBACtBpH,OAAO,CAAC4H,GAAG,CAAC,+CAA+C,CAAC;gBAC5DnD,mBAAmB,CAAC,OAAO,CAAC;cAC9B,CAAC,MAAM;gBACLzE,OAAO,CAAC6H,IAAI,CAAC,oCAAoC,CAAC;gBAClD,MAAMC,uBAAuB,CAACd,gBAAgB,CAAC;cACjD;YACF,CAAC,CAAC,OAAOe,SAAS,EAAE;cAClB/H,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEgI,SAAS,CAAC;cACtD,MAAMD,uBAAuB,CAACd,gBAAgB,CAAC;YACjD;UACF,CAAC,MAAM;YACLhH,OAAO,CAAC6H,IAAI,CAAC,4BAA4B,CAAC;YAC1C,MAAMC,uBAAuB,CAACd,gBAAgB,CAAC;UACjD;QACF,CAAC,CAAC,OAAOgB,UAAU,EAAE;UACnBhI,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEiI,UAAU,CAAC;UACvD,MAAMF,uBAAuB,CAACd,gBAAgB,CAAC;QACjD;MACF,CAAC,MAAM;QACL;QACA,MAAMc,uBAAuB,CAACd,gBAAgB,CAAC;MACjD;IACF,CAAC,CAAC,OAAOjH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD0E,mBAAmB,CAAC,OAAO,CAAC;MAC5BvB,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,+DAA+D;QACxEmG,IAAI,EAAE;MACR,CAAC,CAAC;MACF9B,oBAAoB,CAAC,KAAK,CAAC;IAC7B;EACF,CAAC;;EAED;EACA,MAAMuD,uBAAuB,GAAG,MAAOd,gBAAgB,IAAK;IAC1D,IAAI;MACFhH,OAAO,CAAC4H,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAMK,UAAU,GAAG,MAAMhJ,eAAe,CAAC,CAAC;MAC1CkF,UAAU,CAAC8D,UAAU,CAAC;;MAEtB;MACAf,YAAY,CAACgB,OAAO,CAAC,kBAAkBlB,gBAAgB,EAAE,EAAEK,IAAI,CAACc,SAAS,CAACF,UAAU,CAAC,CAAC;MAEtFjI,OAAO,CAAC4H,GAAG,CAAC,0CAA0C,CAAC;MACvDnD,mBAAmB,CAAC,OAAO,CAAC;IAC9B,CAAC,CAAC,OAAO1E,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA7C,SAAS,CAAC,MAAM;IACd,IAAIuF,QAAQ,EAAE;MACZ2F,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAAC3F,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAM2F,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC5F,SAAS,CAAC,+BAA+B,CAAC;IAC1CgB,cAAc,CAAC,UAAU,CAAC;IAE1B,IAAI;MACF;MACA,MAAM6E,QAAQ,GAAG,MAAMjL,KAAK,CAACoJ,GAAG,CAAC,GAAG3H,aAAa,SAAS,EAAE;QAC1DyJ,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,IAAID,QAAQ,CAAC9F,MAAM,KAAK,GAAG,EAAE;QAC3BiB,cAAc,CAAC,QAAQ,CAAC;QACxBhB,SAAS,CAAC,kCAAkC,CAAC;QAC7C;MACF;IACF,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACdC,OAAO,CAAC4H,GAAG,CAAC,qDAAqD,EAAE7H,KAAK,CAACG,OAAO,CAAC;IACnF;;IAEA;IACA,MAAMqI,UAAU,GAAGpL,EAAE,CAAC0B,aAAa,EAAE;MACnC2J,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;MACpCC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE,IAAI;MACvBJ,OAAO,EAAE,IAAI;MACbK,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMC,iBAAiB,GAAGC,UAAU,CAAC,MAAM;MACzCrF,cAAc,CAAC,SAAS,CAAC;MACzBhB,SAAS,CAAC,4CAA4C,CAAC;MACvD+F,UAAU,CAACO,UAAU,CAAC,CAAC;IACzB,CAAC,EAAE,IAAI,CAAC;IAERP,UAAU,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAM;MAC7BC,YAAY,CAACJ,iBAAiB,CAAC;MAC/BpF,cAAc,CAAC,QAAQ,CAAC;MACxBhB,SAAS,CAAC,kCAAkC,CAAC;MAC7C+F,UAAU,CAACO,UAAU,CAAC,CAAC;IACzB,CAAC,CAAC;IAEFP,UAAU,CAACQ,EAAE,CAAC,eAAe,EAAGE,GAAG,IAAK;MACtCD,YAAY,CAACJ,iBAAiB,CAAC;MAC/B5I,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEkJ,GAAG,CAAC;MAC9CzF,cAAc,CAAC,SAAS,CAAC;MACzBhB,SAAS,CAAC,6CAA6C,CAAC;MACxD+F,UAAU,CAACO,UAAU,CAAC,CAAC;IACzB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMI,QAAQ,GAAG,MAAOC,YAAY,IAAK;IACvC;IACA,IAAI,CAACvE,YAAY,CAACuE,YAAY,CAAC,EAAE;MAC/B;MACA,MAAMC,OAAO,GAAGzL,eAAe,CAACmE,QAAQ,EAAEqH,YAAY,CAAC;;MAEvD;MACAtE,eAAe,CAACwE,IAAI,KAAK;QACvB,GAAGA,IAAI;QACP,CAACF,YAAY,GAAGC;MAClB,CAAC,CAAC,CAAC;IACL;;IAEA;IACAzE,cAAc,CAAC0E,IAAI,KAAK;MACtB,GAAGA,IAAI;MACP,CAACF,YAAY,GAAG;IAClB,CAAC,CAAC,CAAC;;IAEH;IACApE,cAAc,CAACoE,YAAY,CAAC;;IAE5B;IACA9D,eAAe,CAACgE,IAAI,KAAK;MACvB,GAAGA,IAAI;MACP,CAACF,YAAY,GAAG;IAClB,CAAC,CAAC,CAAC;IACHnL,gBAAgB,CAAC8D,QAAQ,EAAEqH,YAAY,CAAC;;IAExC;IACAG,eAAe,CAACH,YAAY,CAAC;EAC/B,CAAC;EAED,MAAMI,SAAS,GAAIJ,YAAY,IAAK;IAClC;IACAxE,cAAc,CAAC0E,IAAI,IAAI;MACrB,MAAMG,cAAc,GAAG;QAAE,GAAGH;MAAK,CAAC;MAClC,OAAOG,cAAc,CAACL,YAAY,CAAC;MACnC,OAAOK,cAAc;IACvB,CAAC,CAAC;;IAEF;IACA,IAAI1E,WAAW,KAAKqE,YAAY,EAAE;MAChCpE,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,MAAMuE,eAAe,GAAIH,YAAY,IAAK;IACxC,IAAI,CAACrD,SAAS,CAAC2D,OAAO,IAAI,CAACN,YAAY,EAAE;;IAEzC;IACA,MAAMO,QAAQ,GAAGjG,WAAW,CAACkG,QAAQ,CAACR,YAAY,CAAC;IAEnD,IAAIO,QAAQ,EAAE;MACZvE,oBAAoB,CAACkE,IAAI,KAAK;QAC5B,GAAGA,IAAI;QACP,CAACF,YAAY,GAAG;UAAEtF,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE;QAAK;MAC/C,CAAC,CAAC,CAAC;MACH;IACF;;IAEA;IACAgC,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,gBAAgB,EAAE;MAAE9H,QAAQ,EAAEqH;IAAa,CAAC,EAAGd,QAAQ,IAAK;MACjF,IAAIA,QAAQ,IAAIA,QAAQ,CAACxE,MAAM,EAAE;QAC/BsB,oBAAoB,CAACkE,IAAI,KAAK;UAC5B,GAAGA,IAAI;UACP,CAACF,YAAY,GAAG;YAAEtF,MAAM,EAAE,IAAI;YAAEC,MAAM,EAAEuE,QAAQ,CAACvE,MAAM,IAAI;UAAM;QACnE,CAAC,CAAC,CAAC;MACL,CAAC,MAAM;QACLqB,oBAAoB,CAACkE,IAAI,KAAK;UAC5B,GAAGA,IAAI;UACP,CAACF,YAAY,GAAG;YAAEtF,MAAM,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAM;QACjD,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAM+F,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI1K,MAAM,CAAC2K,OAAO,CAAC,yEAAyE,CAAC,EAAE;MAC7F;MACA,MAAMC,SAAS,GAAG5K,MAAM,CAAC2K,OAAO,CAC9B,+DAA+D,GAC/D,+DAA+D,GAC/D,wFACF,CAAC;;MAED;MACAjM,mBAAmB,CAACiE,QAAQ,CAAC;;MAE7B;MACA,IAAIiI,SAAS,EAAE;QACbvL,oBAAoB,CAACsD,QAAQ,CAAC;QAC9ByD,uBAAuB,CAAC,CAAC,CAAC,CAAC;MAC7B;;MAEA;MACAV,eAAe,CAAC,CAAC,CAAC,CAAC;MACnBQ,eAAe,CAAC,CAAC,CAAC,CAAC;MACnBV,cAAc,CAAC,CAAC,CAAC,CAAC;MAClBI,cAAc,CAAC,IAAI,CAAC;;MAEpB;MACA7B,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE6J,SAAS,GAChB,2DAA2D,GAC3D,oCAAoC;QACtC1D,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAM2D,aAAa,GAAIb,YAAY,IAAK;IACtC,IAAIA,YAAY,KAAKrH,QAAQ,EAAE;MAC7BoB,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,gCAAgC;QACzCmG,IAAI,EAAE;MACR,CAAC,CAAC;MACF;IACF;;IAEA;IACA6C,QAAQ,CAACC,YAAY,CAAC;EACxB,CAAC;;EAED;EACAjM,SAAS,CAAC,MAAM;IACd,IAAImF,SAAS,IAAIP,QAAQ,IAAIW,QAAQ,EAAE;MACrCwH,iBAAiB,CAAC,CAAC;IACrB;IAEA,OAAO,MAAM;MACX,IAAInE,SAAS,CAAC2D,OAAO,EAAE;QACrBS,aAAa,CAACjE,eAAe,CAACwD,OAAO,CAAC;QACtCT,YAAY,CAAC9C,wBAAwB,CAACuD,OAAO,CAAC;QAC9CT,YAAY,CAAChD,gBAAgB,CAACyD,OAAO,CAAC;QACtC3D,SAAS,CAAC2D,OAAO,CAACX,UAAU,CAAC,CAAC;QAC9BhD,SAAS,CAAC2D,OAAO,GAAG,IAAI;MAC1B;IACF,CAAC;EACH,CAAC,EAAE,CAACpH,SAAS,EAAEP,QAAQ,EAAEW,QAAQ,CAAC,CAAC;;EAEnC;EACAvF,SAAS,CAAC,MAAM;IACd,IAAI4E,QAAQ,IAAIqI,MAAM,CAACC,IAAI,CAACxF,YAAY,CAAC,CAACyF,MAAM,GAAG,CAAC,EAAE;MACpD;MACAF,MAAM,CAACC,IAAI,CAACxF,YAAY,CAAC,CAAC0F,OAAO,CAACC,QAAQ,IAAI;QAC5C7M,eAAe,CAACoE,QAAQ,EAAEyI,QAAQ,EAAE3F,YAAY,CAAC2F,QAAQ,CAAC,CAAC;MAC7D,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACzI,QAAQ,EAAE8C,YAAY,CAAC,CAAC;EAE5B1H,SAAS,CAAC,MAAM;IACd,IAAImF,SAAS,IAAIyD,SAAS,CAAC2D,OAAO,EAAE;MAClC,MAAMe,cAAc,GAAGA,CAAA,KAAM;QAC3BxK,OAAO,CAAC4H,GAAG,CAAC,wBAAwB,CAAC;;QAErC;QACA9B,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,EAAGa,IAAI,IAAK;UACnD,IAAIA,IAAI,IAAIA,IAAI,CAACC,OAAO,EAAE;YACxB1K,OAAO,CAAC4H,GAAG,CAAC,kCAAkC,EAAE6C,IAAI,CAAC;YACrD;YACAnH,iBAAiB,CAACmH,IAAI,CAACC,OAAO,CAAC;YAC/B9H,oBAAoB,CAACyG,IAAI,KAAK;cAC5B,GAAGA,IAAI;cACPqB,OAAO,EAAED,IAAI,CAACC,OAAO;cACrBnH,WAAW,EAAEkH,IAAI,CAAClI,MAAM,IAAI,WAAW;cACvCoI,cAAc,EAAEF,IAAI,CAACE,cAAc;cACnCC,EAAE,EAAEH,IAAI,CAACG,EAAE;cACXC,IAAI,EAAEJ,IAAI,CAACI;YACb,CAAC,CAAC,CAAC;;YAEH;YACA,IAAI,CAAChI,kBAAkB,EAAE;cACvBC,qBAAqB,CAAC,IAAI,CAAC;;cAE3B;cACA+F,UAAU,CAAC,MAAM;gBACf/F,qBAAqB,CAAC,KAAK,CAAC;cAC9B,CAAC,EAAE,IAAI,CAAC;YACV;UACF,CAAC,MAAM;YACL9C,OAAO,CAAC6H,IAAI,CAAC,6DAA6D,CAAC;;YAE3E;YACA/B,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,gBAAgB,EAAE;cAAE9H;YAAS,CAAC,EAAGgJ,SAAS,IAAK;cACpE,IAAIA,SAAS,IAAIA,SAAS,CAACC,OAAO,IAAID,SAAS,CAACJ,OAAO,EAAE;gBACvD1K,OAAO,CAAC4H,GAAG,CAAC,2CAA2C,EAAEkD,SAAS,CAAC;gBAEnE,IAAIA,SAAS,CAACE,QAAQ,EAAE;kBACtB;kBACA1H,iBAAiB,CAAC,qBAAqB,CAAC;kBACxCV,oBAAoB,CAACyG,IAAI,KAAK;oBAC5B,GAAGA,IAAI;oBACPqB,OAAO,EAAE,QAAQ;oBACjBnH,WAAW,EAAE;kBACf,CAAC,CAAC,CAAC;gBACL,CAAC,MAAM;kBACL;kBACAD,iBAAiB,CAACwH,SAAS,CAACJ,OAAO,CAAC;kBACpC9H,oBAAoB,CAACyG,IAAI,KAAK;oBAC5B,GAAGA,IAAI;oBACPqB,OAAO,EAAEI,SAAS,CAACJ,OAAO;oBAC1BnH,WAAW,EAAE;kBACf,CAAC,CAAC,CAAC;gBACL;cACF,CAAC,MAAM;gBACLvD,OAAO,CAAC6H,IAAI,CAAC,gEAAgE,CAAC;;gBAE9E;gBACA,MAAMoD,QAAQ,GAAGnF,SAAS,CAAC2D,OAAO,CAACyB,EAAE;gBACrC5H,iBAAiB,CAAC,WAAW2H,QAAQ,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC5DvI,oBAAoB,CAACyG,IAAI,KAAK;kBAC5B,GAAGA,IAAI;kBACPqB,OAAO,EAAE,QAAQ;kBACjBnH,WAAW,EAAE;gBACf,CAAC,CAAC,CAAC;cACL;YACF,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ,CAAC;;MAED;MACAiH,cAAc,CAAC,CAAC;MAChB,MAAMY,iBAAiB,GAAGC,WAAW,CAACb,cAAc,EAAE,KAAK,CAAC;MAE5D,OAAO,MAAMN,aAAa,CAACkB,iBAAiB,CAAC;IAC/C;EACF,CAAC,EAAE,CAAC/I,SAAS,EAAEQ,kBAAkB,EAAEf,QAAQ,CAAC,CAAC;EAE7C,MAAMmI,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,IAAInE,SAAS,CAAC2D,OAAO,EAAE;MACrB3D,SAAS,CAAC2D,OAAO,CAACX,UAAU,CAAC,CAAC;IAChC;;IAEA;IACA9I,OAAO,CAAC4H,GAAG,CAAC,gDAAgD,EAAE/I,aAAa,CAAC;IAC5E2D,SAAS,CAAC,0CAA0C,CAAC;;IAErD;IACAsD,SAAS,CAAC2D,OAAO,GAAGtM,EAAE,CAAC0B,aAAa,EAAE;MACpC2J,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;MACpCC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE,IAAI;MACvB4C,KAAK,EAAE;QACL7I,QAAQ;QACRX;MACF,CAAC;MACD6G,QAAQ,EAAE;IACZ,CAAC,CAAC;;IAEF;IACA7C,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,SAAS,EAAE,MAAM;MACpC/I,OAAO,CAAC4H,GAAG,CAAC,wCAAwC,EAAE9B,SAAS,CAAC2D,OAAO,CAACyB,EAAE,CAAC;MAC3E1I,SAAS,CAAC,sCAAsC,CAAC;MACjDgB,cAAc,CAAC,QAAQ,CAAC;;MAExB;MACAF,iBAAiB,CAAC,uBAAuB,CAAC;MAC1CV,oBAAoB,CAAC;QACnBqI,QAAQ,EAAEnF,SAAS,CAAC2D,OAAO,CAACyB,EAAE;QAC9BK,SAAS,EAAEzF,SAAS,CAAC2D,OAAO,CAACtM,EAAE,CAACqO,MAAM,CAACD,SAAS,CAAChM,IAAI;QACrDkM,WAAW,EAAE5M,aAAa;QAC1B6L,OAAO,EAAE,gBAAgB;QACzBnH,WAAW,EAAE;MACf,CAAC,CAAC;;MAEF;MACAuC,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAGvB,QAAQ,IAAK;QAC7DrI,OAAO,CAAC4H,GAAG,CAAC,mBAAmB,EAAES,QAAQ,CAAC;QAE1C,IAAIA,QAAQ,IAAIA,QAAQ,CAACqD,MAAM,IAAIrD,QAAQ,CAACqD,MAAM,CAACrB,MAAM,GAAG,CAAC,EAAE;UAC7D;UACAnD,YAAY,CAACgB,OAAO,CAAC,sBAAsB,EAAEb,IAAI,CAACc,SAAS,CAAC;YAC1DwD,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;YACrBiE,MAAM,EAAErD,QAAQ,CAACqD;UACnB,CAAC,CAAC,CAAC;;UAEH;UACAE,oBAAoB,CAAC,MAAM;YACzB;YACAC,cAAc,CAACxD,QAAQ,CAACqD,MAAM,CAAC;UACjC,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACAE,oBAAoB,CAAC,MAAM;YACzB;YACAtI,iBAAiB,CAAC,sBAAsB,CAAC;YACzCV,oBAAoB,CAACyG,IAAI,KAAK;cAC5B,GAAGA,IAAI;cACPqB,OAAO,EAAE,QAAQ;cACjBnH,WAAW,EAAE;YACf,CAAC,CAAC,CAAC;YACHf,SAAS,CAAC,mDAAmD,CAAC;;YAE9D;YACAsJ,iBAAiB,CAAC,CAAC;UACrB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAMF,oBAAoB,GAAIG,QAAQ,IAAK;MACzC;MACAjG,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,cAAc,EAAE;QACrC9H,QAAQ;QACRW;MACF,CAAC,EAAG4F,QAAQ,IAAK;QACfrI,OAAO,CAAC4H,GAAG,CAAC,wBAAwB,EAAES,QAAQ,CAAC;QAC/C,IAAIA,QAAQ,IAAIA,QAAQ,CAAC0C,OAAO,EAAE;UAChCvI,SAAS,CAAC,wCAAwC,CAAC;;UAEnD;UACAwJ,mBAAmB,CAAC,CAAC;;UAErB;UACAC,cAAc,CAAC,CAAC;UAChBC,iBAAiB,CAAC,CAAC;;UAEnB;UACA,IAAIH,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;YAC9CA,QAAQ,CAAC,CAAC;UACZ;QACF,CAAC,MAAM;UACL,MAAMI,QAAQ,GAAG,CAAA9D,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE+D,MAAM,KAAI,qBAAqB;UAC1D5J,SAAS,CAAC,wBAAwB2J,QAAQ,EAAE,CAAC;UAC7CjJ,gBAAgB,CAAC;YACfpB,QAAQ,EAAE,QAAQ;YAClB5B,OAAO,EAAE,wBAAwBiM,QAAQ,EAAE;YAC3C9F,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IAEDP,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,eAAe,EAAGE,GAAG,IAAK;MAC7CjJ,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEkJ,GAAG,CAAC;MACjDzG,SAAS,CAAC,sBAAsByG,GAAG,CAAC/I,OAAO,EAAE,CAAC;MAC9CsD,cAAc,CAAC,SAAS,CAAC;;MAEzB;MACA,MAAM6I,eAAe,GAAGnF,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC;MACpE,IAAImF,YAAY,GAAG,EAAE;MAErB,IAAID,eAAe,EAAE;QACnB,IAAI;UACF,MAAME,WAAW,GAAGlF,IAAI,CAACC,KAAK,CAAC+E,eAAe,CAAC;UAC/C,IAAIE,WAAW,CAACZ,SAAS,IAAKnE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG8E,WAAW,CAACZ,SAAS,GAAG,OAAQ,EAAE;YAAE;YAC7EW,YAAY,GAAGC,WAAW,CAACb,MAAM,IAAI,EAAE;YACvC1L,OAAO,CAAC4H,GAAG,CAAC,iCAAiC,EAAE0E,YAAY,CAAC;YAE5D,IAAIA,YAAY,CAACjC,MAAM,GAAG,CAAC,EAAE;cAC3BxB,UAAU,CAAC,MAAM;gBACfgD,cAAc,CAACS,YAAY,CAAC;cAC9B,CAAC,EAAE,IAAI,CAAC;YACV;UACF;QACF,CAAC,CAAC,OAAOvM,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D;MACF;IACF,CAAC,CAAC;IAEF+F,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,YAAY,EAAGqD,MAAM,IAAK;MAC7CpM,OAAO,CAAC4H,GAAG,CAAC,8BAA8B,EAAEwE,MAAM,CAAC;MACnD5J,SAAS,CAAC,iBAAiB4J,MAAM,EAAE,CAAC;;MAEpC;MACA,IAAIA,MAAM,KAAK,sBAAsB,IAAI/J,SAAS,EAAE;QAClDwG,UAAU,CAAC,MAAM;UACf,IAAIxG,SAAS,EAAE;YACb;YACA4H,iBAAiB,CAAC,CAAC;UACrB;QACF,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM4B,cAAc,GAAIH,MAAM,IAAK;IACjC,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACrB,MAAM,EAAE;MAC7BrK,OAAO,CAAC4H,GAAG,CAAC,mCAAmC,CAAC;MAChD;IACF;;IAEA;IACA,MAAM4E,KAAK,GAAGd,MAAM,CAAC,CAAC,CAAC;IACvB,MAAMe,QAAQ,GAAGD,KAAK,CAACtB,EAAE,CAACwB,UAAU,CAAC,MAAM,CAAC,GAAGF,KAAK,CAACtB,EAAE,GAAG,UAAUsB,KAAK,CAACtB,EAAE,EAAE;IAE9ElL,OAAO,CAAC4H,GAAG,CAAC,8BAA8B6E,QAAQ,EAAE,CAAC;IACrDjK,SAAS,CAAC,+BAA+BgK,KAAK,CAACtB,EAAE,KAAK,CAAC;;IAEvD;IACA,IAAIpF,SAAS,CAAC2D,OAAO,EAAE;MACrB;MACA,MAAMkD,SAAS,GAAG7G,SAAS,CAAC2D,OAAO;;MAEnC;MACA3D,SAAS,CAAC2D,OAAO,GAAGtM,EAAE,CAACsP,QAAQ,EAAE;QAC/BjE,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;QACpCC,oBAAoB,EAAE,CAAC;QACvBC,iBAAiB,EAAE,IAAI;QACvBC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMiE,sBAAsB,GAAG/D,UAAU,CAAC,MAAM;QAC9C,IAAI,CAAC/C,SAAS,CAAC2D,OAAO,IAAI,CAAC3D,SAAS,CAAC2D,OAAO,CAACpH,SAAS,EAAE;UACtDrC,OAAO,CAAC4H,GAAG,CAAC,oDAAoD,CAAC;UACjE9B,SAAS,CAAC2D,OAAO,GAAGkD,SAAS,CAAC,CAAC;UAC/BnK,SAAS,CAAC,2CAA2C,CAAC;UACtDc,iBAAiB,CAAC,sBAAsB,CAAC;UACzCV,oBAAoB,CAACyG,IAAI,KAAK;YAC5B,GAAGA,IAAI;YACPqB,OAAO,EAAE,QAAQ;YACjBnH,WAAW,EAAE;UACf,CAAC,CAAC,CAAC;;UAEH;UACAuI,iBAAiB,CAAC,CAAC;QACrB;MACF,CAAC,EAAE,IAAI,CAAC;MAERhG,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,SAAS,EAAE,MAAM;QACpCC,YAAY,CAAC4D,sBAAsB,CAAC;QACpC5M,OAAO,CAAC4H,GAAG,CAAC,8BAA8B6E,QAAQ,EAAE,CAAC;;QAErD;QACA3G,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,UAAU,EAAE;UACjC9H,QAAQ;UACRW;QACF,CAAC,EAAG4F,QAAQ,IAAK;UACf,IAAIA,QAAQ,IAAIA,QAAQ,CAAC0C,OAAO,EAAE;YAChC/K,OAAO,CAAC4H,GAAG,CAAC,oCAAoC,CAAC;;YAEjD;YACA+E,SAAS,CAAC7D,UAAU,CAAC,CAAC;YAEtBtG,SAAS,CAAC,8BAA8BgK,KAAK,CAACtB,EAAE,EAAE,CAAC;YACnD5H,iBAAiB,CAACkJ,KAAK,CAACtB,EAAE,CAAC;YAC3BtI,oBAAoB,CAACyG,IAAI,KAAK;cAC5B,GAAGA,IAAI;cACPqB,OAAO,EAAE8B,KAAK,CAACtB,EAAE;cACjBD,QAAQ,EAAEnF,SAAS,CAAC2D,OAAO,CAACyB,EAAE;cAC9BK,SAAS,EAAEzF,SAAS,CAAC2D,OAAO,CAACtM,EAAE,CAACqO,MAAM,CAACD,SAAS,CAAChM,IAAI;cACrDgE,WAAW,EAAE;YACf,CAAC,CAAC,CAAC;;YAEH;YACAyI,mBAAmB,CAAC,CAAC;;YAErB;YACAE,iBAAiB,CAAC,CAAC;;YAEnB;YACApJ,qBAAqB,CAAC,IAAI,CAAC;YAC3B+F,UAAU,CAAC,MAAM;cACf/F,qBAAqB,CAAC,KAAK,CAAC;YAC9B,CAAC,EAAE,IAAI,CAAC;UACV,CAAC,MAAM;YACL9C,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEsI,QAAQ,CAAC;YACzD7F,SAAS,CAAC,sCAAsC,CAAC;;YAEjD;YACAsD,SAAS,CAAC2D,OAAO,CAACX,UAAU,CAAC,CAAC;YAC9BhD,SAAS,CAAC2D,OAAO,GAAGkD,SAAS;YAE7BnK,SAAS,CAAC,6CAA6C,CAAC;YACxDc,iBAAiB,CAAC,sBAAsB,CAAC;YACzCV,oBAAoB,CAACyG,IAAI,KAAK;cAC5B,GAAGA,IAAI;cACPqB,OAAO,EAAE,QAAQ;cACjBnH,WAAW,EAAE;YACf,CAAC,CAAC,CAAC;;YAEH;YACAuI,iBAAiB,CAAC,CAAC;UACrB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFhG,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,eAAe,EAAGE,GAAG,IAAK;QAC7CD,YAAY,CAAC4D,sBAAsB,CAAC;QACpC5M,OAAO,CAACD,KAAK,CAAC,2BAA2BkJ,GAAG,CAAC/I,OAAO,EAAE,CAAC;;QAEvD;QACA4F,SAAS,CAAC2D,OAAO,GAAGkD,SAAS;QAE7BnK,SAAS,CAAC,0CAA0C,CAAC;QACrDc,iBAAiB,CAAC,sBAAsB,CAAC;QACzCV,oBAAoB,CAACyG,IAAI,KAAK;UAC5B,GAAGA,IAAI;UACPqB,OAAO,EAAE,QAAQ;UACjBnH,WAAW,EAAE;QACf,CAAC,CAAC,CAAC;;QAEH;QACAuI,iBAAiB,CAAC,CAAC;MACrB,CAAC,CAAC;MAEFhG,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,YAAY,EAAGqD,MAAM,IAAK;QAC7CpM,OAAO,CAAC4H,GAAG,CAAC,4BAA4BwE,MAAM,EAAE,CAAC;;QAEjD;QACA,IAAIzJ,iBAAiB,CAACY,WAAW,KAAK,oBAAoB,EAAE;UAC1Df,SAAS,CAAC,4BAA4B4J,MAAM,EAAE,CAAC;;UAE/C;UACAvD,UAAU,CAAC,MAAM;YACf,IAAIxG,SAAS,EAAE;cACb4H,iBAAiB,CAAC,CAAC;YACrB;UACF,CAAC,EAAE,IAAI,CAAC;QACV;MACF,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAM6B,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,IAAI3M,MAAM,CAAC0N,oBAAoB,EAAE;MAC/B3C,aAAa,CAAC/K,MAAM,CAAC0N,oBAAoB,CAAC;IAC5C;;IAEA;IACA1N,MAAM,CAAC0N,oBAAoB,GAAGxB,WAAW,CAAC,MAAM;MAC9C,IAAIvF,SAAS,CAAC2D,OAAO,IAAI3D,SAAS,CAAC2D,OAAO,CAACpH,SAAS,IAChDM,iBAAiB,CAACY,WAAW,KAAK,gBAAgB,EAAE;QACtDvD,OAAO,CAAC4H,GAAG,CAAC,iCAAiC,CAAC;QAE9C9B,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAGvB,QAAQ,IAAK;UAC7D,IAAIA,QAAQ,IAAIA,QAAQ,CAACqD,MAAM,IAAIrD,QAAQ,CAACqD,MAAM,CAACrB,MAAM,GAAG,CAAC,EAAE;YAC7DrK,OAAO,CAAC4H,GAAG,CAAC,yBAAyB,EAAES,QAAQ,CAACqD,MAAM,CAAC;;YAEvD;YACAxE,YAAY,CAACgB,OAAO,CAAC,sBAAsB,EAAEb,IAAI,CAACc,SAAS,CAAC;cAC1DwD,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;cACrBiE,MAAM,EAAErD,QAAQ,CAACqD;YACnB,CAAC,CAAC,CAAC;;YAEH;YACAG,cAAc,CAACxD,QAAQ,CAACqD,MAAM,CAAC;;YAE/B;YACAxB,aAAa,CAAC/K,MAAM,CAAC0N,oBAAoB,CAAC;UAC5C,CAAC,MAAM;YACL7M,OAAO,CAAC4H,GAAG,CAAC,kDAAkD,CAAC;UACjE;QACF,CAAC,CAAC;MACJ;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACX,IAAIzI,MAAM,CAAC0N,oBAAoB,EAAE;QAC/B3C,aAAa,CAAC/K,MAAM,CAAC0N,oBAAoB,CAAC;MAC5C;IACF,CAAC;EACH,CAAC;EAED,MAAMb,mBAAmB,GAAGA,CAAA,KAAM;IAChC;IACAlG,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,gBAAgB,EAAE,MAAOxI,IAAI,IAAK;MACrDP,OAAO,CAAC4H,GAAG,CAAC,mBAAmB,EAAErH,IAAI,CAAC;MACtC,MAAM;QAAEU,IAAI;QAAEf,OAAO;QAAE4M,YAAY;QAAEnB,SAAS;QAAEjE,SAAS;QAAE9H,SAAS;QAAEmN;MAAQ,CAAC,GAAGxM,IAAI;;MAEtF;MACA,IAAIX,SAAS,IAAIqB,IAAI,EAAE;QACrBjB,OAAO,CAAC4H,GAAG,CAAC,0BAA0B3G,IAAI,EAAE,CAAC;QAC7CoD,aAAa,CAACgF,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAE,CAACpI,IAAI,GAAGrB;QAAU,CAAC,CAAC,CAAC;;QAEvD;QACA,MAAMoN,gBAAgB,GAAGpI,YAAY,CAAC3D,IAAI,CAAC,IAAI,EAAE;QACjD,MAAMgM,cAAc,GAAGD,gBAAgB,CAAC3C,MAAM,KAAK,CAAC;;QAEpD;QACA,IAAIjM,cAAc,CAAC0D,QAAQ,EAAEb,IAAI,CAAC,EAAE;UAClC;UACA,MAAMiM,kBAAkB,GAAG,MAAM7O,SAAS,CAACyD,QAAQ,EAAEb,IAAI,EAAErB,SAAS,EAAEkN,YAAY,CAAC;;UAEnF;UACAxO,sBAAsB,CAACsB,SAAS,CAAC,CAACuN,IAAI,CAACC,WAAW,IAAI;YACpD7H,uBAAuB,CAAC8D,IAAI,KAAK;cAC/B,GAAGA,IAAI;cACP,CAACpI,IAAI,GAAG;gBACNoM,QAAQ,EAAEH,kBAAkB,CAACG,QAAQ;gBACrC9K,MAAM,EAAE2K,kBAAkB,CAAC3K,MAAM;gBACjCrC,OAAO,EAAEgN,kBAAkB,CAAChN,OAAO;gBACnCoN,UAAU,EAAEJ,kBAAkB,CAACI,UAAU;gBACzCF,WAAW,EAAEA;cACf;YACF,CAAC,CAAC,CAAC;UACL,CAAC,CAAC;;UAEF;UACA,IAAI,CAACF,kBAAkB,CAACG,QAAQ,EAAE;YAChCnK,gBAAgB,CAAC;cACfpB,QAAQ,EAAEb,IAAI;cACdf,OAAO,EAAE,YAAYe,IAAI,sCAAsCiM,kBAAkB,CAAChN,OAAO,EAAE;cAC3FmG,IAAI,EAAE;YACR,CAAC,CAAC;UACJ;QACF,CAAC,MAAM,IAAI4G,cAAc,EAAE;UACzB;UACA;UACA3O,sBAAsB,CAACsB,SAAS,CAAC,CAACuN,IAAI,CAACC,WAAW,IAAI;YACpD7H,uBAAuB,CAAC8D,IAAI,KAAK;cAC/B,GAAGA,IAAI;cACP,CAACpI,IAAI,GAAG;gBACNoM,QAAQ,EAAE,KAAK;gBACf9K,MAAM,EAAE,YAAY;gBACpBrC,OAAO,EAAE,uBAAuB;gBAChCkN;cACF;YACF,CAAC,CAAC,CAAC;;YAEH;YACAlK,gBAAgB,CAAC;cACfpB,QAAQ,EAAE,QAAQ;cAClB5B,OAAO,EAAE,oBAAoBe,IAAI,mDAAmD;cACpFoF,IAAI,EAAE;YACR,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF;;MAEA;MACA,IAAI0G,OAAO,EAAE;QACX/M,OAAO,CAAC4H,GAAG,CAAC,iCAAiC3G,IAAI,EAAE,CAAC;QACpDiC,gBAAgB,CAAC;UACfpB,QAAQ,EAAE,QAAQ;UAClB5B,OAAO,EAAE,iCAAiCe,IAAI,wCAAwC;UACtFoF,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;;MAEA;MACA,MAAM2G,gBAAgB,GAAG7K,QAAQ,CAACoL,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACvM,IAAI,KAAKA,IAAI,CAAC;MAClE,IAAI+L,gBAAgB,CAAC3C,MAAM,GAAG,CAAC,IAAI2C,gBAAgB,CAAC,CAAC,CAAC,CAACF,YAAY,IAC/DE,gBAAgB,CAAC,CAAC,CAAC,CAACF,YAAY,KAAKA,YAAY,EAAE;QACrD5J,gBAAgB,CAAC;UACfpB,QAAQ,EAAEb,IAAI;UACdf,OAAO,EAAE,YAAYe,IAAI,mDAAmD;UAC5EoF,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;MAEA,IAAIoH,gBAAgB,GAAGvN,OAAO;MAC9B,IAAIwN,gBAAgB,GAAG,WAAW;;MAElC;MACA,IAAIhG,SAAS,IAAIxI,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEY,UAAU,EAAE;QACpC,IAAI;UACFE,OAAO,CAAC4H,GAAG,CAAC,uBAAuB,CAAC;UACpC6F,gBAAgB,GAAG,MAAM3M,cAAc,CAACZ,OAAO,EAAEhB,OAAO,CAACY,UAAU,CAAC;UACpE4N,gBAAgB,GAAG,WAAW;UAC9B1N,OAAO,CAAC4H,GAAG,CAAC,gCAAgC,CAAC;QAC/C,CAAC,CAAC,OAAO7H,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClD0N,gBAAgB,GAAG,sCAAsC;UACzDC,gBAAgB,GAAG,QAAQ;UAE3BxK,gBAAgB,CAAC;YACfpB,QAAQ,EAAE,QAAQ;YAClB5B,OAAO,EAAE,kCAAkCe,IAAI,+BAA+B;YAC9EoF,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF;;MAEA;MACA,MAAMsH,UAAU,GAAG;QACjB1M,IAAI;QACJf,OAAO,EAAEuN,gBAAgB;QACzBX,YAAY;QACZnB,SAAS,EAAE,IAAInE,IAAI,CAACmE,SAAS,IAAI,IAAInE,IAAI,CAAC,CAAC,CAAC;QAC5CE,SAAS;QACTgG,gBAAgB;QAChBX,OAAO,EAAEA,OAAO,IAAI;MACtB,CAAC;;MAED;MACA3K,WAAW,CAACwL,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,UAAU,CAAC,CAAC;;MAE1C;MACA9I,eAAe,CAACwE,IAAI,IAAI;QACtB,MAAMwE,eAAe,GAAG;UACtB,GAAGxE,IAAI;UACP,CAACpI,IAAI,GAAG,CAAC,IAAIoI,IAAI,CAACpI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE0M,UAAU;QAC5C,CAAC;;QAED;QACAjQ,eAAe,CAACoE,QAAQ,EAAEb,IAAI,EAAE4M,eAAe,CAAC5M,IAAI,CAAC,CAAC;QAEtD,OAAO4M,eAAe;MACxB,CAAC,CAAC;;MAEF;MACA,IAAI/I,WAAW,KAAK7D,IAAI,EAAE;QACxBoE,eAAe,CAACgE,IAAI,IAAI;UACtB,MAAMyE,SAAS,GAAG;YAChB,GAAGzE,IAAI;YACP,CAACpI,IAAI,GAAG,CAACoI,IAAI,CAACpI,IAAI,CAAC,IAAI,CAAC,IAAI;UAC9B,CAAC;;UAED;UACAnD,gBAAgB,CAACgE,QAAQ,EAAEgM,SAAS,CAAC;UAErC,OAAOA,SAAS;QAClB,CAAC,CAAC;;QAEF;QACA7P,oBAAoB,CAAC6D,QAAQ,EAAEb,IAAI,CAAC;MACtC;;MAEA;MACA0D,cAAc,CAAC0E,IAAI,IAAI;QACrB,IAAI,CAACA,IAAI,CAACpI,IAAI,CAAC,EAAE;UACf,OAAO;YACL,GAAGoI,IAAI;YACP,CAACpI,IAAI,GAAG;UACV,CAAC;QACH;QACA,OAAOoI,IAAI;MACb,CAAC,CAAC;;MAEF;MACAC,eAAe,CAACrI,IAAI,CAAC;IACvB,CAAC,CAAC;;IAEF;IACA6E,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,kBAAkB,EAAE,CAAC;MAAE9H;IAAK,CAAC,EAAE8M,GAAG,KAAK;MAC1D/N,OAAO,CAAC4H,GAAG,CAAC,2BAA2B3G,IAAI,EAAE,CAAC;MAE9C,IAAI/B,OAAO,IAAIA,OAAO,CAACU,SAAS,EAAE;QAChCI,OAAO,CAAC4H,GAAG,CAAC,yBAAyB3G,IAAI,EAAE,CAAC;QAC5C,IAAI8M,GAAG,EAAEA,GAAG,CAAC;UAAEhD,OAAO,EAAE,IAAI;UAAEnL,SAAS,EAAEV,OAAO,CAACU;QAAU,CAAC,CAAC;MAC/D,CAAC,MAAM;QACLI,OAAO,CAAC6H,IAAI,CAAC,kCAAkC,CAAC;QAChD,IAAIkG,GAAG,EAAEA,GAAG,CAAC;UAAEhD,OAAO,EAAE,KAAK;UAAEqB,MAAM,EAAE;QAA2B,CAAC,CAAC;MACtE;IACF,CAAC,CAAC;;IAEF;IACAtG,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,kBAAkB,EAAGxI,IAAI,IAAK;MACjDP,OAAO,CAAC4H,GAAG,CAAC,qBAAqB,EAAErH,IAAI,CAAC;MACxC,MAAM;QAAEuB,QAAQ,EAAEkM,IAAI;QAAElK;MAAO,CAAC,GAAGvD,IAAI;;MAEvC;MACA,IAAIyN,IAAI,KAAKhM,SAAS,EAAE;QACtBhC,OAAO,CAAC4H,GAAG,CAAC,yCAAyCoG,IAAI,OAAOlK,MAAM,GAAG,QAAQ,GAAG,SAAS,EAAE,CAAC;QAChGF,kBAAkB,CAACyF,IAAI,KAAK;UAC1B,GAAGA,IAAI;UACPxF,MAAM,EAAE,IAAI;UAAE;UACdC,MAAM;UACNmK,gBAAgB,EAAE,KAAK,CAAC;QAC1B,CAAC,CAAC,CAAC;MACL;;MAEA;MACAvK,cAAc,CAAC2F,IAAI,IAAI;QACrB,IAAIvF,MAAM,IAAI,CAACuF,IAAI,CAACM,QAAQ,CAACqE,IAAI,CAAC,EAAE;UAClChO,OAAO,CAAC4H,GAAG,CAAC,UAAUoG,IAAI,uBAAuB,CAAC;UAClD,OAAO,CAAC,GAAG3E,IAAI,EAAE2E,IAAI,CAAC;QACxB,CAAC,MAAM,IAAI,CAAClK,MAAM,IAAIuF,IAAI,CAACM,QAAQ,CAACqE,IAAI,CAAC,EAAE;UACzChO,OAAO,CAAC4H,GAAG,CAAC,YAAYoG,IAAI,yBAAyB,CAAC;UACtD,OAAO3E,IAAI,CAACkE,MAAM,CAACW,CAAC,IAAIA,CAAC,KAAKF,IAAI,CAAC;QACrC;QACA,OAAO3E,IAAI;MACb,CAAC,CAAC;;MAEF;MACA,IAAI3E,WAAW,CAACsJ,IAAI,CAAC,EAAE;QACrB7I,oBAAoB,CAACkE,IAAI,KAAK;UAC5B,GAAGA,IAAI;UACP,CAAC2E,IAAI,GAAG;YACN,GAAG3E,IAAI,CAAC2E,IAAI,CAAC;YACbnK,MAAM,EAAE,IAAI;YACZC;UACF;QACF,CAAC,CAAC,CAAC;MACL;;MAEA;MACA,IAAI9B,SAAS,EAAE;QACbmM,oBAAoB,CAAC,CAAC;MACxB;IACF,CAAC,CAAC;;IAEF;IACArI,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,mBAAmB,EAAGxI,IAAI,IAAK;MAClDP,OAAO,CAAC4H,GAAG,CAAC,sBAAsB,EAAErH,IAAI,CAAC;MACzC,IAAIA,IAAI,IAAI6N,KAAK,CAACC,OAAO,CAAC9N,IAAI,CAAC+N,KAAK,CAAC,EAAE;QACrC5K,cAAc,CAACnD,IAAI,CAAC+N,KAAK,CAAC;;QAE1B;QACA,IAAItM,SAAS,IAAIzB,IAAI,CAAC+N,KAAK,CAAC3E,QAAQ,CAAC3H,SAAS,CAAC,EAAE;UAC/C4B,kBAAkB,CAACyF,IAAI,KAAK;YAC1B,GAAGA,IAAI;YACPxF,MAAM,EAAE,IAAI;YACZC,MAAM,EAAE,IAAI;YACZmK,gBAAgB,EAAE;UACpB,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAIjM,SAAS,EAAE;UACpB;UACAmM,oBAAoB,CAAC,CAAC;QACxB;;QAEA;QACAhE,MAAM,CAACC,IAAI,CAAC1F,WAAW,CAAC,CAAC4F,OAAO,CAACC,QAAQ,IAAI;UAC3C,MAAMb,QAAQ,GAAGnJ,IAAI,CAAC+N,KAAK,CAAC3E,QAAQ,CAACY,QAAQ,CAAC;UAC9CpF,oBAAoB,CAACkE,IAAI;YAAA,IAAAkF,cAAA;YAAA,OAAK;cAC5B,GAAGlF,IAAI;cACP,CAACkB,QAAQ,GAAG;gBACV,GAAGlB,IAAI,CAACkB,QAAQ,CAAC;gBACjB1G,MAAM,EAAE,EAAA0K,cAAA,GAAAlF,IAAI,CAACkB,QAAQ,CAAC,cAAAgE,cAAA,uBAAdA,cAAA,CAAgB1K,MAAM,KAAI6F,QAAQ;gBAC1C5F,MAAM,EAAE4F;cACV;YACF,CAAC;UAAA,CAAC,CAAC;QACL,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA5D,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,YAAY,EAAGxI,IAAI,IAAK;MAC3C,MAAM;QAAEuB,QAAQ,EAAE0M;MAAW,CAAC,GAAGjO,IAAI;;MAErC;MACA0E,cAAc,CAACoE,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACmF,UAAU,GAAG;MAChB,CAAC,CAAC,CAAC;;MAEH;MACA,IAAIA,UAAU,KAAKxM,SAAS,EAAE;QAC5BoB,SAAS,CAAC,IAAI,CAAC;MACjB;;MAEA;MACA4F,YAAY,CAAChD,gBAAgB,CAACyD,OAAO,CAAC;;MAEtC;MACAzD,gBAAgB,CAACyD,OAAO,GAAGZ,UAAU,CAAC,MAAM;QAC1C5D,cAAc,CAACoE,IAAI,KAAK;UACtB,GAAGA,IAAI;UACP,CAACmF,UAAU,GAAG;QAChB,CAAC,CAAC,CAAC;;QAEH;QACA,IAAIA,UAAU,KAAKxM,SAAS,EAAE;UAC5BoB,SAAS,CAAC,KAAK,CAAC;QAClB;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;;IAEF;IACA0C,SAAS,CAAC2D,OAAO,CAACV,EAAE,CAAC,OAAO,EAAGhJ,KAAK,IAAK;MACvCC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCmD,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,qBAAqBH,KAAK,CAACG,OAAO,IAAI,eAAe,EAAE;QAChEmG,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAM4F,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAInG,SAAS,CAAC2D,OAAO,EAAE;MACrB3D,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAG0E,KAAK,IAAK;QACtDtO,OAAO,CAAC4H,GAAG,CAAC,eAAe,EAAE0G,KAAK,CAAC;QACnC,IAAIF,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC,EAAE;UACxB5K,cAAc,CAAC4K,KAAK,CAAC;QACvB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMpC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BjG,eAAe,CAACwD,OAAO,GAAG4B,WAAW,CAAC,MAAM;MAC1C,IAAIvF,SAAS,CAAC2D,OAAO,IAAI3D,SAAS,CAAC2D,OAAO,CAACpH,SAAS,EAAE;QACpD;QACAyD,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,EAAGvB,QAAQ,IAAK;UAC/C,IAAIA,QAAQ,EAAE;YACZrI,OAAO,CAAC4H,GAAG,CAAC,gBAAgB,EAAES,QAAQ,CAAC;UACzC;QACF,CAAC,CAAC;;QAEF;QACA4D,cAAc,CAAC,CAAC;;QAEhB;QACA,IAAIjK,SAAS,EAAE;UACbmM,oBAAoB,CAAC,CAAC;QACxB;MACF;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAMA,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACnM,SAAS,IAAI,CAAC8D,SAAS,CAAC2D,OAAO,EAAE;MACpC7F,kBAAkB,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEC,MAAM,EAAE,KAAK;QAAE2K,QAAQ,EAAE;MAAM,CAAC,CAAC;MACrE;IACF;IAEAzO,OAAO,CAAC4H,GAAG,CAAC,kCAAkC5F,SAAS,EAAE,CAAC;;IAE1D;IACA4B,kBAAkB,CAACyF,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEoF,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC;;IAEzD;IACA,MAAMC,eAAe,GAAG7F,UAAU,CAAC,MAAM;MACvCjF,kBAAkB,CAACyF,IAAI,IAAI;QACzB,IAAIA,IAAI,CAACoF,QAAQ,EAAE;UACjB,OAAO;YAAE,GAAGpF,IAAI;YAAEoF,QAAQ,EAAE;UAAM,CAAC;QACrC;QACA,OAAOpF,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV;IACA,IAAI5F,WAAW,CAACkG,QAAQ,CAAC3H,SAAS,CAAC,EAAE;MACnCgH,YAAY,CAAC0F,eAAe,CAAC;MAC7B1O,OAAO,CAAC4H,GAAG,CAAC,GAAG5F,SAAS,6BAA6B,CAAC;MACtD4B,kBAAkB,CAAC;QAAEC,MAAM,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAE2K,QAAQ,EAAE;MAAM,CAAC,CAAC;MACnE;IACF;;IAEA;IACA,IAAI9L,iBAAiB,CAACY,WAAW,KAAK,oBAAoB,EAAE;MAC1DuC,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,gBAAgB,EAAE;QAAE9H,QAAQ,EAAEE;MAAU,CAAC,EAAG2M,aAAa,IAAK;QACnF3F,YAAY,CAAC0F,eAAe,CAAC;QAC7B1O,OAAO,CAAC4H,GAAG,CAAC,iCAAiC,EAAE+G,aAAa,CAAC;QAC7D,IAAIA,aAAa,IAAI,OAAOA,aAAa,CAAC9K,MAAM,KAAK,SAAS,EAAE;UAC9D;UACAD,kBAAkB,CAAC;YACjB,GAAG+K,aAAa;YAChBF,QAAQ,EAAE;UACZ,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA7K,kBAAkB,CAAC;YACjBC,MAAM,EAAE,KAAK;YACbC,MAAM,EAAE,KAAK;YACb2K,QAAQ,EAAE;UACZ,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA3I,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,WAAW,EAAE;QAAE9H,QAAQ,EAAEE;MAAU,CAAC,EAAGqG,QAAQ,IAAK;QACzEW,YAAY,CAAC0F,eAAe,CAAC;QAC7B1O,OAAO,CAAC4H,GAAG,CAAC,qCAAqC,EAAES,QAAQ,CAAC;;QAE5D;QACA,IAAIA,QAAQ,IAAI,OAAOA,QAAQ,CAACxE,MAAM,KAAK,SAAS,EAAE;UACpDD,kBAAkB,CAAC;YACjB,GAAGyE,QAAQ;YACXoG,QAAQ,EAAE;UACZ,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA7K,kBAAkB,CAAC;YACjBC,MAAM,EAAE,KAAK;YACbC,MAAM,EAAE,KAAK;YACb2K,QAAQ,EAAE;UACZ,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACAvR,SAAS,CAAC,MAAM;IACd,MAAM0R,SAAS,GAAG/F,UAAU,CAAC,MAAM;MACjC,IAAIxG,SAAS,IAAIL,SAAS,EAAE;QAC1BmM,oBAAoB,CAAC,CAAC;MACxB;IACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAMnF,YAAY,CAAC4F,SAAS,CAAC;EACtC,CAAC,EAAE,CAACvM,SAAS,EAAEL,SAAS,CAAC,CAAC;EAE1B9E,SAAS,CAAC,MAAM;IAAA,IAAA2R,qBAAA;IACd,CAAAA,qBAAA,GAAA9I,cAAc,CAAC0D,OAAO,cAAAoF,qBAAA,uBAAtBA,qBAAA,CAAwBC,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAAC5M,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAM6M,8BAA8B,GAAGA,CAAA,KAAM;IAC3C;IACA,MAAMtK,WAAW,GAAG9G,cAAc,CAACkE,QAAQ,CAAC;IAC5C,MAAMmN,2BAA2B,GAAG,CAAC,CAAC;IAEtCvK,WAAW,CAAC4F,OAAO,CAACC,QAAQ,IAAI;MAC9B,MAAM2E,WAAW,GAAG/Q,cAAc,CAAC2D,QAAQ,EAAEyI,QAAQ,CAAC;MACtD,IAAI2E,WAAW,EAAE;QACfD,2BAA2B,CAAC1E,QAAQ,CAAC,GAAG;UACtC8C,QAAQ,EAAE,IAAI;UACd9K,MAAM,EAAE,UAAU;UAClBrC,OAAO,EAAE,mBAAmB;UAC5BoN,UAAU,EAAE4B,WAAW,CAAC5B,UAAU;UAClCF,WAAW,EAAE8B,WAAW,CAAC9B;QAC3B,CAAC;MACH,CAAC,MAAM;QACL6B,2BAA2B,CAAC1E,QAAQ,CAAC,GAAG;UACtC8C,QAAQ,EAAE,KAAK;UACf9K,MAAM,EAAE,YAAY;UACpBrC,OAAO,EAAE;QACX,CAAC;MACH;IACF,CAAC,CAAC;IAEFqF,uBAAuB,CAAC0J,2BAA2B,CAAC;EACtD,CAAC;EAED,MAAME,oBAAoB,GAAIC,eAAe,IAAK;IAChD;IACA,MAAMC,gBAAgB,GAAGjL,UAAU,CAACgL,eAAe,CAAC;IAEpD,IAAI,CAACC,gBAAgB,EAAE;MACrBnM,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,iBAAiBkP,eAAe,uCAAuC;QAChF/I,IAAI,EAAE;MACR,CAAC,CAAC;MACF;IACF;;IAEA;IACA/H,sBAAsB,CAAC+Q,gBAAgB,CAAC,CAAClC,IAAI,CAACC,WAAW,IAAI;MAC3D;MACA,MAAM8B,WAAW,GAAG/Q,cAAc,CAAC2D,QAAQ,EAAEsN,eAAe,CAAC;MAE7D,IAAIE,gBAAgB,GAAG;QACrBF,eAAe;QACfhC,WAAW;QACX7K,MAAM,EAAE,aAAa;QACrBrC,OAAO,EAAE;MACX,CAAC;MAED,IAAIgP,WAAW,EAAE;QACf;QACA,IAAIA,WAAW,CAAC9B,WAAW,KAAKA,WAAW,EAAE;UAC3C;UACAkC,gBAAgB,GAAG;YACjBF,eAAe;YACfhC,WAAW;YACXmC,mBAAmB,EAAEL,WAAW,CAAC9B,WAAW;YAC5C7K,MAAM,EAAE,cAAc;YACtBrC,OAAO,EAAE,gDAAgD;YACzDoN,UAAU,EAAE4B,WAAW,CAAC5B;UAC1B,CAAC;QACH,CAAC,MAAM;UACL;UACAgC,gBAAgB,GAAG;YACjBF,eAAe;YACfhC,WAAW;YACX7K,MAAM,EAAE,UAAU;YAClBrC,OAAO,EAAE,mBAAmB;YAC5BoN,UAAU,EAAE4B,WAAW,CAAC5B;UAC1B,CAAC;QACH;MACF;;MAEA;MACA3H,sBAAsB,CAAC2J,gBAAgB,CAAC;MACxC7J,wBAAwB,CAAC,IAAI,CAAC;IAChC,CAAC,CAAC,CAAC+J,KAAK,CAACzP,KAAK,IAAI;MAChBC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDmD,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,6BAA6BH,KAAK,CAACG,OAAO,EAAE;QACrDmG,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAMoJ,yBAAyB,GAAGA,CAAA,KAAM;IACtC,IAAI,CAAC/J,mBAAmB,IAAI,CAACA,mBAAmB,CAAC0J,eAAe,EAAE;IAElE,MAAM;MAAEA;IAAgB,CAAC,GAAG1J,mBAAmB;IAC/C,MAAM2J,gBAAgB,GAAGjL,UAAU,CAACgL,eAAe,CAAC;IAEpD,IAAI,CAACC,gBAAgB,EAAE;MACrBnM,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,iBAAiBkP,eAAe,uCAAuC;QAChF/I,IAAI,EAAE;MACR,CAAC,CAAC;MACFZ,wBAAwB,CAAC,KAAK,CAAC;MAC/B;IACF;;IAEA;IACAvH,gBAAgB,CAAC4D,QAAQ,EAAEsN,eAAe,EAAEC,gBAAgB,EAAE5M,QAAQ,CAAC;;IAEvE;IACA8C,uBAAuB,CAAC8D,IAAI,KAAK;MAC/B,GAAGA,IAAI;MACP,CAAC+F,eAAe,GAAG;QACjB/B,QAAQ,EAAE,IAAI;QACd9K,MAAM,EAAE,UAAU;QAClBrC,OAAO,EAAE,mBAAmB;QAC5BoN,UAAU,EAAE9F,IAAI,CAACC,GAAG,CAAC,CAAC;QACtB2F,WAAW,EAAE1H,mBAAmB,CAAC0H;MACnC;IACF,CAAC,CAAC,CAAC;;IAEH;IACAlK,gBAAgB,CAAC;MACfpB,QAAQ,EAAE,QAAQ;MAClB5B,OAAO,EAAE,GAAGkP,eAAe,gCAAgC;MAC3D/I,IAAI,EAAE;IACR,CAAC,CAAC;;IAEF;IACAZ,wBAAwB,CAAC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMiK,wBAAwB,GAAGA,CAAA,KAAM;IACrCjK,wBAAwB,CAAC,KAAK,CAAC;EACjC,CAAC;;EAED;EACA,MAAMkK,kBAAkB,GAAGA,CAAA,KAAM;IAC/B;IACA,MAAMjL,WAAW,GAAG9G,cAAc,CAACkE,QAAQ,CAAC;;IAE5C;IACA,MAAM8N,mBAAmB,GAAG,CAAC,CAAC;IAC9B,MAAMC,mBAAmB,GAAG9R,gBAAgB,CAAC+D,QAAQ,CAAC;IACtD,MAAMgO,wBAAwB,GAAG,CAAC,CAAC;;IAEnC;IACApL,WAAW,CAAC4F,OAAO,CAACC,QAAQ,IAAI;MAC9BqF,mBAAmB,CAACrF,QAAQ,CAAC,GAAG5M,eAAe,CAACmE,QAAQ,EAAEyI,QAAQ,CAAC;MACnEuF,wBAAwB,CAACvF,QAAQ,CAAC,GAAG;QAAE1G,MAAM,EAAE,IAAI;QAAEC,MAAM,EAAEL,WAAW,CAACkG,QAAQ,CAACY,QAAQ;MAAE,CAAC;IAC/F,CAAC,CAAC;;IAEF;IACA1F,eAAe,CAAC+K,mBAAmB,CAAC;IACpCvK,eAAe,CAACwK,mBAAmB,CAAC;IACpC1K,oBAAoB,CAAC2K,wBAAwB,CAAC;;IAE9C;IACA,MAAMC,cAAc,GAAG,CAAC,CAAC;IACzBrL,WAAW,CAAC4F,OAAO,CAACC,QAAQ,IAAI;MAC9BwF,cAAc,CAACxF,QAAQ,CAAC,GAAG,IAAI;IACjC,CAAC,CAAC;IACF5F,cAAc,CAACoL,cAAc,CAAC;;IAE9B;IACAf,8BAA8B,CAAC,CAAC;EAClC,CAAC;EAED,MAAMgB,oBAAoB,GAAG,MAAOC,CAAC,IAAK;IACxCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIpO,QAAQ,CAACqO,IAAI,CAAC,CAAC,IAAI5M,WAAW,KAAK,QAAQ,EAAE;MAC/CS,qBAAqB,CAAC,IAAI,CAAC;MAC3B,MAAMuE,UAAU,GAAGpL,EAAE,CAAC0B,aAAa,EAAE;QAAE8J,QAAQ,EAAE,IAAI;QAAEL,OAAO,EAAE;MAAK,CAAC,CAAC;MACvEC,UAAU,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAM;QAC7BR,UAAU,CAACqB,IAAI,CAAC,WAAW,EAAE;UAAE9H,QAAQ,EAAEA,QAAQ,CAACqO,IAAI,CAAC;QAAE,CAAC,EAAG9H,QAAQ,IAAK;UACxErE,qBAAqB,CAAC,KAAK,CAAC;UAC5B,IAAIqE,QAAQ,IAAIA,QAAQ,CAACxE,MAAM,EAAE;YAC/BK,oBAAoB,CAAC,KAAK,CAAC;YAC3BhB,gBAAgB,CAAC;cACfpB,QAAQ,EAAE,QAAQ;cAClB5B,OAAO,EAAE,aAAa4B,QAAQ,qBAAqB;cACnDuE,IAAI,EAAE;YACR,CAAC,CAAC;YACF;YACAkC,UAAU,CAACO,UAAU,CAAC,CAAC;UACzB,CAAC,MAAM;YACL5E,oBAAoB,CAAC,IAAI,CAAC;YAC1B5B,YAAY,CAAC,IAAI,CAAC;;YAElB;YACAqN,kBAAkB,CAAC,CAAC;YAEpBpH,UAAU,CAACO,UAAU,CAAC,CAAC;UACzB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACFP,UAAU,CAACQ,EAAE,CAAC,eAAe,EAAGhJ,KAAK,IAAK;QACxCC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/DiE,qBAAqB,CAAC,KAAK,CAAC;QAC5Bd,gBAAgB,CAAC;UACfpB,QAAQ,EAAE,QAAQ;UAClB5B,OAAO,EAAE,sDAAsD;UAC/DmG,IAAI,EAAE;QACR,CAAC,CAAC;QACFkC,UAAU,CAACO,UAAU,CAAC,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIvF,WAAW,KAAK,QAAQ,EAAE;MACnCL,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,mCAAmC;QAC5CmG,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAM+J,qBAAqB,GAAIH,CAAC,IAAK;IACnC,MAAMI,YAAY,GAAGJ,CAAC,CAACK,MAAM,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAC;IAC1ClO,YAAY,CAACoO,YAAY,CAAC;;IAE1B;IACAzM,kBAAkB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE,KAAK;MAAE2K,QAAQ,EAAE;IAAM,CAAC,CAAC;;IAErE;IACA,IAAI4B,YAAY,IAAIvK,SAAS,CAAC2D,OAAO,EAAE;MACrC;MACA,IAAIvD,wBAAwB,CAACuD,OAAO,EAAE;QACpCT,YAAY,CAAC9C,wBAAwB,CAACuD,OAAO,CAAC;MAChD;MAEAvD,wBAAwB,CAACuD,OAAO,GAAGZ,UAAU,CAAC,MAAM;QAClDsF,oBAAoB,CAAC,CAAC;MACxB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX;EACF,CAAC;EAED,MAAMqC,UAAU,GAAG,MAAAA,CAAOP,CAAC,EAAEQ,MAAM,GAAG,KAAK,KAAK;IAC9CR,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAAClO,SAAS,IAAI,CAAC9B,OAAO,CAACiQ,IAAI,CAAC,CAAC,IAAI,CAACrK,SAAS,CAAC2D,OAAO,EAAE;IAEzD,IAAI;MACF;MACAjH,SAAS,CAAC,oBAAoB,CAAC;;MAE/B;MACA,IAAI,CAACiO,MAAM,EAAE;QACX;QACA,MAAMC,eAAe,GAAG/M,eAAe,CAACG,MAAM;;QAE9C;QACA,IAAI,CAAC4M,eAAe,EAAE;UACpBxN,gBAAgB,CAAC;YACfpB,QAAQ,EAAE,QAAQ;YAClB5B,OAAO,EAAE,GAAG8B,SAAS,2EAA2E;YAChGqE,IAAI,EAAE;UACR,CAAC,CAAC;UACF7D,SAAS,CAAC,yBAAyB,CAAC;UACpC;QACF;MACF;;MAEA;MACA,IAAI8B,iBAAiB,IAAI,CAACF,UAAU,CAACpC,SAAS,CAAC,EAAE;QAC/C,IAAI;UACF,MAAM2O,gBAAgB,CAAC3O,SAAS,CAAC;QACnC,CAAC,CAAC,OAAOjC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACjD;QACF;MACF;;MAEA;MACA,MAAMiN,gBAAgB,GAAGpI,YAAY,CAAC5C,SAAS,CAAC,IAAI,EAAE;MACtD,MAAMiL,cAAc,GAAGD,gBAAgB,CAAC3C,MAAM,KAAK,CAAC;;MAEpD;MACA,IAAI4C,cAAc,IAAI7I,UAAU,CAACpC,SAAS,CAAC,IAAI,CAAC5D,cAAc,CAAC0D,QAAQ,EAAEE,SAAS,CAAC,EAAE;QACnF;QACA,MAAM4O,aAAa,GAAGzR,MAAM,CAAC2K,OAAO,CAClC,sDAAsD9H,SAAS,OAAO,GACtE,0FACF,CAAC;QAED,IAAI,CAAC4O,aAAa,EAAE;UAClBpO,SAAS,CAAC,yBAAyB,CAAC;UACpC;QACF;;QAEA;QACA,MAAM4K,WAAW,GAAG,MAAM9O,sBAAsB,CAAC8F,UAAU,CAACpC,SAAS,CAAC,CAAC;;QAEvE;QACAuD,uBAAuB,CAAC8D,IAAI,KAAK;UAC/B,GAAGA,IAAI;UACP,CAACrH,SAAS,GAAG;YACXqL,QAAQ,EAAE,KAAK;YACf9K,MAAM,EAAE,YAAY;YACpBrC,OAAO,EAAE,uBAAuB;YAChCkN;UACF;QACF,CAAC,CAAC,CAAC;MACL;MAEA,IAAIyD,YAAY,GAAG3Q,OAAO,CAACiQ,IAAI,CAAC,CAAC;MACjC,IAAIW,WAAW,GAAG,KAAK;;MAEvB;MACA,IAAIxM,iBAAiB,IAAIF,UAAU,CAACpC,SAAS,CAAC,EAAE;QAC9C,IAAI;UACF6O,YAAY,GAAG,MAAM5Q,cAAc,CAACC,OAAO,CAACiQ,IAAI,CAAC,CAAC,EAAE/L,UAAU,CAACpC,SAAS,CAAC,CAAC;UAC1E8O,WAAW,GAAG,IAAI;UAClB9Q,OAAO,CAAC4H,GAAG,CAAC,gCAAgC,CAAC;QAC/C,CAAC,CAAC,OAAO7H,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClDmD,gBAAgB,CAAC;YACfpB,QAAQ,EAAE,QAAQ;YAClB5B,OAAO,EAAE,kDAAkD;YAC3DmG,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF;MAEA,MAAM0K,WAAW,GAAG;QAClBC,EAAE,EAAEhP,SAAS;QACb9B,OAAO,EAAE2Q,YAAY;QACrBpO,QAAQ;QACRkJ,SAAS,EAAE,IAAInE,IAAI,CAAC,CAAC,CAACyJ,WAAW,CAAC,CAAC;QACnCR,MAAM,EAAEA,MAAM;QAAE;QAChB/I,SAAS,EAAEoJ,WAAW;QACtBlR,SAAS,EAAEV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEU,SAAS,CAAC;MAChC,CAAC;MAEDI,OAAO,CAAC4H,GAAG,CAAC,kBAAkB,EAAE;QAC9B,GAAGmJ,WAAW;QACd7Q,OAAO,EAAE4Q,WAAW,GAAG,aAAa,GAAGD,YAAY;QACnDJ,MAAM,EAAEA;MACV,CAAC,CAAC;;MAEF;MACA,MAAMS,cAAc,GAAGrI,UAAU,CAAC,MAAM;QACtC3F,gBAAgB,CAAC;UACfpB,QAAQ,EAAE,QAAQ;UAClB5B,OAAO,EAAE,mDAAmD;UAC5DmG,IAAI,EAAE;QACR,CAAC,CAAC;QACF7D,SAAS,CAAC,yBAAyB,CAAC;MACtC,CAAC,EAAE,KAAK,CAAC;MAETsD,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,aAAa,EAAEmH,WAAW,EAAG1I,QAAQ,IAAK;QAC/DW,YAAY,CAACkI,cAAc,CAAC;QAC5BlR,OAAO,CAAC4H,GAAG,CAAC,wBAAwB,EAAES,QAAQ,CAAC;QAC/C7F,SAAS,CAAC,yBAAyB,CAAC;QAEpC,IAAI6F,QAAQ,KAAKA,QAAQ,CAAC8I,SAAS,IAAI9I,QAAQ,CAAC0E,OAAO,CAAC,EAAE;UACxD;UACA,MAAMY,UAAU,GAAG;YACjB1M,IAAI,EAAEa,QAAQ;YACd5B,OAAO,EAAEA,OAAO,CAACiQ,IAAI,CAAC,CAAC;YAAE;YACzBrD,YAAY,EAAErK,QAAQ;YACtBkJ,SAAS,EAAE,IAAInE,IAAI,CAAC,CAAC;YACrBjF,MAAM,EAAE8F,QAAQ,CAAC8I,SAAS,GAAG,WAAW,GAAG,SAAS;YACpDC,SAAS,EAAE/I,QAAQ,CAAC+I,SAAS;YAC7B1J,SAAS,EAAEoJ;UACb,CAAC;;UAED;UACA1O,WAAW,CAACwL,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,UAAU,CAAC,CAAC;;UAE1C;UACA9I,eAAe,CAACwE,IAAI,IAAI;YACtB,MAAMwE,eAAe,GAAG;cACtB,GAAGxE,IAAI;cACP,CAACrH,SAAS,GAAG,CAAC,IAAIqH,IAAI,CAACrH,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE2L,UAAU;YACtD,CAAC;;YAED;YACAjQ,eAAe,CAACoE,QAAQ,EAAEE,SAAS,EAAE6L,eAAe,CAAC7L,SAAS,CAAC,CAAC;YAEhE,OAAO6L,eAAe;UACxB,CAAC,CAAC;;UAEF;UACAlJ,cAAc,CAAC0E,IAAI,IAAI;YACrB,IAAI,CAACA,IAAI,CAACrH,SAAS,CAAC,EAAE;cACpB,OAAO;gBACL,GAAGqH,IAAI;gBACP,CAACrH,SAAS,GAAG;cACf,CAAC;YACH;YACA,OAAOqH,IAAI;UACb,CAAC,CAAC;;UAEF;UACAnH,UAAU,CAAC,EAAE,CAAC;;UAEd;UACA,IAAImG,QAAQ,CAAC0E,OAAO,EAAE;YACpB7J,gBAAgB,CAAC;cACfpB,QAAQ,EAAE,QAAQ;cAClB5B,OAAO,EAAE,cAAc8B,SAAS,+DAA+D;cAC/FqE,IAAI,EAAE;YACR,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACL,MAAM8F,QAAQ,GAAG,CAAA9D,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE+D,MAAM,KAAI,yBAAyB;UAE9D,IAAID,QAAQ,CAACxC,QAAQ,CAAC,WAAW,CAAC,IAAIwC,QAAQ,CAACxC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;YACzE,IAAI8G,MAAM,EAAE;cACV;cACAvN,gBAAgB,CAAC;gBACfpB,QAAQ,EAAE,QAAQ;gBAClB5B,OAAO,EAAE,gCAAgC8B,SAAS,4BAA4B;gBAC9EqE,IAAI,EAAE;cACR,CAAC,CAAC;;cAEF;cACA,MAAMsH,UAAU,GAAG;gBACjB1M,IAAI,EAAEa,QAAQ;gBACd5B,OAAO,EAAEA,OAAO,CAACiQ,IAAI,CAAC,CAAC;gBACvBrD,YAAY,EAAErK,QAAQ;gBACtBkJ,SAAS,EAAE,IAAInE,IAAI,CAAC,CAAC;gBACrBjF,MAAM,EAAE,SAAS;gBACjB6O,SAAS,EAAE5J,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,QAAQ;gBAAE;gBAClCC,SAAS,EAAEoJ;cACb,CAAC;;cAED;cACA1O,WAAW,CAACwL,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,UAAU,CAAC,CAAC;;cAE1C;cACA9I,eAAe,CAACwE,IAAI,IAAI;gBACtB,MAAMwE,eAAe,GAAG;kBACtB,GAAGxE,IAAI;kBACP,CAACrH,SAAS,GAAG,CAAC,IAAIqH,IAAI,CAACrH,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE2L,UAAU;gBACtD,CAAC;;gBAED;gBACAjQ,eAAe,CAACoE,QAAQ,EAAEE,SAAS,EAAE6L,eAAe,CAAC7L,SAAS,CAAC,CAAC;gBAEhE,OAAO6L,eAAe;cACxB,CAAC,CAAC;;cAEF;cACAlJ,cAAc,CAAC0E,IAAI,IAAI;gBACrB,IAAI,CAACA,IAAI,CAACrH,SAAS,CAAC,EAAE;kBACpB,OAAO;oBACL,GAAGqH,IAAI;oBACP,CAACrH,SAAS,GAAG;kBACf,CAAC;gBACH;gBACA,OAAOqH,IAAI;cACb,CAAC,CAAC;;cAEF;cACAnH,UAAU,CAAC,EAAE,CAAC;YAChB,CAAC,MAAM;cACLgB,gBAAgB,CAAC;gBACfpB,QAAQ,EAAE,QAAQ;gBAClB5B,OAAO,EAAE,GAAG8B,SAAS,6FAA6F;gBAClHqE,IAAI,EAAE;cACR,CAAC,CAAC;YACJ;UACF,CAAC,MAAM,IAAI8F,QAAQ,CAACxC,QAAQ,CAAC,SAAS,CAAC,EAAE;YACvCzG,gBAAgB,CAAC;cACfpB,QAAQ,EAAE,QAAQ;cAClB5B,OAAO,EAAE,GAAG8B,SAAS,8DAA8D;cACnFqE,IAAI,EAAE;YACR,CAAC,CAAC;UACJ,CAAC,MAAM;YACLnD,gBAAgB,CAAC;cACfpB,QAAQ,EAAE,QAAQ;cAClB5B,OAAO,EAAE,2BAA2BiM,QAAQ,EAAE;cAC9C9F,IAAI,EAAE;YACR,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOtG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CmD,gBAAgB,CAAC;QACfpB,QAAQ,EAAE,QAAQ;QAClB5B,OAAO,EAAE,0BAA0BH,KAAK,CAACG,OAAO,EAAE;QAClDmG,IAAI,EAAE;MACR,CAAC,CAAC;MACF7D,SAAS,CAAC,yBAAyB,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAMmO,gBAAgB,GAAG,MAAO7O,QAAQ,IAAK;IAC3C,OAAO,IAAIuP,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,CAACzL,SAAS,CAAC2D,OAAO,EAAE;QACtB8H,MAAM,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;QAClC;MACF;MAEAxR,OAAO,CAAC4H,GAAG,CAAC,6BAA6B9F,QAAQ,KAAK,CAAC;;MAEvD;MACA,MAAM2P,cAAc,GAAG5I,UAAU,CAAC,MAAM;QACtC7I,OAAO,CAACD,KAAK,CAAC,0BAA0B+B,QAAQ,YAAY,CAAC;QAC7DyP,MAAM,CAAC,IAAIC,KAAK,CAAC,mBAAmB,CAAC,CAAC;MACxC,CAAC,EAAE,KAAK,CAAC;MAET1L,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,kBAAkB,EAAE;QAAE9H;MAAS,CAAC,EAAGuG,QAAQ,IAAK;QACrEW,YAAY,CAACyI,cAAc,CAAC;QAE5B,IAAIpJ,QAAQ,IAAIA,QAAQ,CAAC0C,OAAO,IAAI1C,QAAQ,CAACzI,SAAS,EAAE;UACtDI,OAAO,CAAC4H,GAAG,CAAC,2BAA2B9F,QAAQ,EAAE,CAAC;UAClDuC,aAAa,CAACgF,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE,CAACvH,QAAQ,GAAGuG,QAAQ,CAACzI;UAAU,CAAC,CAAC,CAAC;UACpE0R,OAAO,CAACjJ,QAAQ,CAACzI,SAAS,CAAC;QAC7B,CAAC,MAAM;UACL,MAAMwM,MAAM,GAAG,CAAA/D,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE+D,MAAM,KAAI,0BAA0B;UAC7DpM,OAAO,CAAC4H,GAAG,CAAC,+BAA+B9F,QAAQ,KAAKsK,MAAM,EAAE,CAAC;UACjEmF,MAAM,CAAC,IAAIC,KAAK,CAACpF,MAAM,CAAC,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMsF,iBAAiB,GAAIzB,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAAClO,SAAS,IAAI,CAAC9B,OAAO,CAACiQ,IAAI,CAAC,CAAC,IAAI,CAACrK,SAAS,CAAC2D,OAAO,EAAE;MACvDzJ,OAAO,CAAC4H,GAAG,CAAC,kEAAkE,CAAC;MAC/E;IACF;;IAEA;IACA,MAAM+J,aAAa,GAAGxS,MAAM,CAAC2K,OAAO,CAClC,mBAAmB,GACnB,oBAAoB9H,SAAS,sFAAsF,GACnH,SAASA,SAAS,kDAAkD,GACpE,oGAAoG,GACpG,0BACF,CAAC;IAED,IAAI2P,aAAa,EAAE;MACjB;MACA,MAAMC,cAAc,GAAG;QAAE1B,cAAc,EAAEA,CAAA,KAAM,CAAC;MAAE,CAAC;;MAEnD;MACAM,UAAU,CAACoB,cAAc,EAAE,IAAI,CAAC;IAClC;EACF,CAAC;EAED,MAAMC,mBAAmB,GAAI5B,CAAC,IAAK;IACjC/N,UAAU,CAAC+N,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC;;IAE1B;IACA,IAAIzK,SAAS,CAAC2D,OAAO,IAAIzH,SAAS,IAAIiO,CAAC,CAACK,MAAM,CAACC,KAAK,CAAClG,MAAM,GAAG,CAAC,EAAE;MAC/DvE,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,QAAQ,EAAE;QAAEoH,EAAE,EAAEhP;MAAU,CAAC,CAAC;IACrD;EACF,CAAC;EAED,MAAM8P,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMC,aAAa,GAAGjM,SAAS,CAAC2D,OAAO;;IAEvC;IACAnH,YAAY,CAAC,KAAK,CAAC;IACnBP,WAAW,CAAC,EAAE,CAAC;IACf2B,cAAc,CAAC,EAAE,CAAC;IAClBiB,cAAc,CAAC,CAAC,CAAC,CAAC;IAClBE,eAAe,CAAC,CAAC,CAAC,CAAC;IACnBE,cAAc,CAAC,IAAI,CAAC;IACpBvC,SAAS,CAAC,cAAc,CAAC;IACzB6B,aAAa,CAAC,CAAC,CAAC,CAAC;IACjBI,mBAAmB,CAAC,cAAc,CAAC;IACnCU,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACxB/C,WAAW,CAAC,EAAE,CAAC;IACfwB,kBAAkB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;;IAEpD;IACA,IAAImC,eAAe,CAACwD,OAAO,EAAE;MAC3BS,aAAa,CAACjE,eAAe,CAACwD,OAAO,CAAC;MACtCxD,eAAe,CAACwD,OAAO,GAAG,IAAI;IAChC;;IAEA;IACA,IAAIsI,aAAa,EAAE;MACjB,IAAI;QACF;QACAA,aAAa,CAACnI,IAAI,CAAC,YAAY,EAAE;UAAE9H,QAAQ;UAAEW;QAAS,CAAC,CAAC;;QAExD;QACAoG,UAAU,CAAC,MAAM;UACf,IAAI;YACF,IAAIkJ,aAAa,CAAC1P,SAAS,EAAE;cAC3B0P,aAAa,CAACjJ,UAAU,CAAC,CAAC;YAC5B;UACF,CAAC,CAAC,OAAO/I,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACrD;UACA;UACA+F,SAAS,CAAC2D,OAAO,GAAG,IAAI;QAC1B,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,CAAC,OAAO1J,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD;QACA+F,SAAS,CAAC2D,OAAO,GAAG,IAAI;MAC1B;IACF,CAAC,MAAM;MACLzJ,OAAO,CAAC4H,GAAG,CAAC,2CAA2C,CAAC;MACxD9B,SAAS,CAAC2D,OAAO,GAAG,IAAI;IAC1B;;IAEA;IACAjG,cAAc,CAAC,SAAS,CAAC;EAC3B,CAAC;EAED,MAAMwO,YAAY,GAAGA,CAAA,KAAM;IACzB9O,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAM+O,eAAe,GAAGA,CAAA,KAAM;IAC5B7J,gBAAgB,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAM8J,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMzK,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,OAAO,IAAIC,GAAG,CAAC0K,QAAQ,CAAC,CAAC,CAACrL,QAAQ,CAAC,CAAC,CAACsL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI3K,GAAG,CAAC4K,UAAU,CAAC,CAAC,CAACvL,QAAQ,CAAC,CAAC,CAACsL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI3K,GAAG,CAAC6K,UAAU,CAAC,CAAC,CAACxL,QAAQ,CAAC,CAAC,CAACsL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG;EAC1J,CAAC;EAED,MAAMG,iBAAiB,GAAI5G,SAAS,IAAK;IACvC,IAAI,CAACA,SAAS,EAAE,OAAOuG,YAAY,CAAC,CAAC;IACrC,MAAMM,IAAI,GAAG,IAAIhL,IAAI,CAACmE,SAAS,CAAC;IAChC,OAAO,IAAI6G,IAAI,CAACL,QAAQ,CAAC,CAAC,CAACrL,QAAQ,CAAC,CAAC,CAACsL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAII,IAAI,CAACH,UAAU,CAAC,CAAC,CAACvL,QAAQ,CAAC,CAAC,CAACsL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAII,IAAI,CAACF,UAAU,CAAC,CAAC,CAACxL,QAAQ,CAAC,CAAC,CAACsL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG;EAC7J,CAAC;EAED,oBACE1T,OAAA;IAAK+T,KAAK,EAAE;MACVC,UAAU,EAAE,SAAS;MACrBC,SAAS,EAAE,OAAO;MAClBC,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,OAAO;MACfC,KAAK,EAAE,SAAS;MAChBC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,UAAU,EAAE,wBAAwB;MACpCC,QAAQ,EAAE;IACZ,CAAE;IAAAC,QAAA,gBACAzU,OAAA;MAAK+T,KAAK,EAAE;QACVC,UAAU,EAAE,SAAS;QACrBU,IAAI,EAAE,CAAC;QACPL,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBE,QAAQ,EAAE;MACZ,CAAE;MAAAC,QAAA,gBACAzU,OAAA;QAAK+T,KAAK,EAAE;UACVM,OAAO,EAAE,MAAM;UACfM,cAAc,EAAE,eAAe;UAC/BC,UAAU,EAAE,QAAQ;UACpBC,OAAO,EAAE,WAAW;UACpBC,YAAY,EAAE;QAChB,CAAE;QAAAL,QAAA,gBACAzU,OAAA;UAAI+T,KAAK,EAAE;YACTgB,MAAM,EAAE,CAAC;YACTX,KAAK,EAAE,SAAS;YAChBG,UAAU,EAAE,wBAAwB;YACpCS,aAAa,EAAE;UACjB,CAAE;UAAAP,QAAA,EAAC;QAAW;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBpV,OAAA;UAAK+T,KAAK,EAAE;YAAEM,OAAO,EAAE,MAAM;YAAEgB,GAAG,EAAE;UAAO,CAAE;UAAAZ,QAAA,gBAC3CzU,OAAA;YAAK+T,KAAK,EAAE;cACVuB,QAAQ,EAAE,EAAE;cACZT,OAAO,EAAE,SAAS;cAClBU,YAAY,EAAE,CAAC;cACfvB,UAAU,EAAEnP,WAAW,KAAK,QAAQ,GAAG,SAAS,GAAG,SAAS;cAC5DuP,KAAK,EAAEvP,WAAW,KAAK,QAAQ,GAAG,SAAS,GAAG,SAAS;cACvD2Q,MAAM,EAAE;YACV,CAAE;YAACC,OAAO,EAAEA,CAAA,KAAMrR,qBAAqB,CAAC,CAACD,kBAAkB,CAAE;YAAAsQ,QAAA,EAC1D5P,WAAW,KAAK,QAAQ,GAAG,QAAQ,GACnCA,WAAW,KAAK,UAAU,GAAG,aAAa,GAAG;UAAS;YAAAoQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC,eACNpV,OAAA;YAAK+T,KAAK,EAAE;cACVuB,QAAQ,EAAE,EAAE;cACZT,OAAO,EAAE,SAAS;cAClBU,YAAY,EAAE,CAAC;cACfvB,UAAU,EAAE,SAAS;cACrBI,KAAK,EAAE,SAAS;cAChBoB,MAAM,EAAE;YACV,CAAE;YAACC,OAAO,EAAEA,CAAA,KAAMnR,gBAAgB,CAAC,IAAI,CAAE;YAAAmQ,QAAA,EAAC;UAE1C;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAELjR,kBAAkB,iBACjBnE,OAAA;QAAK+T,KAAK,EAAE;UACVC,UAAU,EAAE,SAAS;UACrBa,OAAO,EAAE,UAAU;UACnBS,QAAQ,EAAE,EAAE;UACZf,UAAU,EAAE,WAAW;UACvBO,YAAY,EAAE,mBAAmB;UACjCT,OAAO,EAAE,MAAM;UACfqB,QAAQ,EAAE,MAAM;UAChBL,GAAG,EAAE;QACP,CAAE;QAAAZ,QAAA,gBACAzU,OAAA;UAAAyU,QAAA,GAAK,UAAQ,EAAC5Q,MAAM;QAAA;UAAAoR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC1BzR,SAAS,iBACR3D,OAAA,CAAAE,SAAA;UAAAuU,QAAA,gBACEzU,OAAA;YAAAyU,QAAA,GAAK,aAAW,EAACxQ,iBAAiB,CAACsI,QAAQ,IAAI,SAAS;UAAA;YAAA0I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC/DpV,OAAA;YAAAyU,QAAA,GAAK,aAAW,EAACxQ,iBAAiB,CAAC4I,SAAS,IAAI,SAAS;UAAA;YAAAoI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAChEpV,OAAA;YAAAyU,QAAA,GAAK,aAAW,EAACxQ,iBAAiB,CAAC8I,WAAW,IAAI5M,aAAa;UAAA;YAAA8U,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACtEpV,OAAA;YAAAyU,QAAA,GAAK,YAAU,eAAAzU,OAAA;cAAM+T,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAU,CAAE;cAAAK,QAAA,EAAE9P,cAAc,IAAI;YAAS;cAAAsQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5FpV,OAAA;YAAAyU,QAAA,GAAK,gBAAc,eAAAzU,OAAA;cAAM+T,KAAK,EAAE;gBAC9BK,KAAK,EAAEnQ,iBAAiB,CAACY,WAAW,KAAK,mBAAmB,GAAG,SAAS,GACjEZ,iBAAiB,CAACY,WAAW,KAAK,gBAAgB,GAAG,SAAS,GAAG;cAC1E,CAAE;cAAA4P,QAAA,EACCxQ,iBAAiB,CAACY,WAAW,KAAK,mBAAmB,GAAG,mBAAmB,GAC3EZ,iBAAiB,CAACY,WAAW,KAAK,gBAAgB,GAAG,qBAAqB,GAC1EZ,iBAAiB,CAACY,WAAW,KAAK,kBAAkB,GAAG,kBAAkB,GAAG;YAAY;cAAAoQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrF,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EACZnR,iBAAiB,CAACgI,cAAc,KAAK0J,SAAS,iBAC7C3V,OAAA;YAAAyU,QAAA,GAAK,kBAAgB,EAACxQ,iBAAiB,CAACgI,cAAc;UAAA;YAAAgJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAC7D,EACAnR,iBAAiB,CAACiI,EAAE,IAAIjI,iBAAiB,CAACkI,IAAI,iBAC7CnM,OAAA;YAAAyU,QAAA,GAAK,iBAAe,EAACxQ,iBAAiB,CAACiI,EAAE,EAAC,GAAC,EAACjI,iBAAiB,CAACkI,IAAI;UAAA;YAAA8I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CACzE;QAAA,eACD,CACH,eACDpV,OAAA;UAAAyU,QAAA,GAAK,qBAAmB,eAAAzU,OAAA;YAAM+T,KAAK,EAAE;cACnCK,KAAK,EAAEvP,WAAW,KAAK,QAAQ,GAAG,SAAS,GAAG;YAChD,CAAE;YAAA4P,QAAA,EAAE5P;UAAW;YAAAoQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EAC5BrR,QAAQ,iBAAI/D,OAAA;UAAAyU,QAAA,GAAK,aAAW,EAAC1Q,QAAQ,CAAC0I,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,KAAG;QAAA;UAAAwI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D,CACN,EAEA/Q,aAAa,iBACZrE,OAAA;QAAK+T,KAAK,EAAE;UACV6B,QAAQ,EAAE,OAAO;UACjBC,GAAG,EAAE,CAAC;UACNC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;UACThC,UAAU,EAAE,wBAAwB;UACpCiC,MAAM,EAAE,IAAI;UACZpB,OAAO,EAAE,MAAM;UACfqB,SAAS,EAAE,MAAM;UACjB7B,OAAO,EAAE,MAAM;UACfC,aAAa,EAAE;QACjB,CAAE;QAAAG,QAAA,gBACAzU,OAAA;UAAK+T,KAAK,EAAE;YACVM,OAAO,EAAE,MAAM;YACfM,cAAc,EAAE,eAAe;YAC/BC,UAAU,EAAE,QAAQ;YACpBuB,YAAY,EAAE;UAChB,CAAE;UAAA1B,QAAA,gBACAzU,OAAA;YAAI+T,KAAK,EAAE;cACTgB,MAAM,EAAE,CAAC;cACTX,KAAK,EAAE,SAAS;cAChBG,UAAU,EAAE,wBAAwB;cACpCS,aAAa,EAAE;YACjB,CAAE;YAAAP,QAAA,EAAC;UAAiB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzBpV,OAAA;YACE+T,KAAK,EAAE;cACLC,UAAU,EAAE,MAAM;cAClBoC,MAAM,EAAE,MAAM;cACdhC,KAAK,EAAE,SAAS;cAChBoB,MAAM,EAAE,SAAS;cACjBF,QAAQ,EAAE;YACZ,CAAE;YACFG,OAAO,EAAEA,CAAA,KAAMnR,gBAAgB,CAAC,KAAK,CAAE;YAAAmQ,QAAA,EACxC;UAED;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENpV,OAAA;UAAK+T,KAAK,EAAE;YACVK,KAAK,EAAE,SAAS;YAChBG,UAAU,EAAE,wBAAwB;YACpCe,QAAQ,EAAE,MAAM;YAChBe,UAAU,EAAE,KAAK;YACjBC,QAAQ,EAAE,OAAO;YACjBvB,MAAM,EAAE,QAAQ;YAChBF,OAAO,EAAE,MAAM;YACfb,UAAU,EAAE,SAAS;YACrBuB,YAAY,EAAE,KAAK;YACnBa,MAAM,EAAE;UACV,CAAE;UAAA3B,QAAA,gBACAzU,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE,SAAS;cAAEmC,SAAS,EAAE;YAAE,CAAE;YAAA9B,QAAA,EAAC;UAAmB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvEpV,OAAA;YAAAyU,QAAA,EAAG;UAGH;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAEJpV,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE;YAAU,CAAE;YAAAK,QAAA,EAAC;UAAY;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClDpV,OAAA;YAAAyU,QAAA,gBACEzU,OAAA;cAAM+T,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAU,CAAE;cAAAK,QAAA,EAAC;YAAsB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,wHAElE;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACJpV,OAAA;YAAAyU,QAAA,gBACEzU,OAAA;cAAM+T,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAU,CAAE;cAAAK,QAAA,EAAC;YAA0B;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,yLAEtE;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACJpV,OAAA;YAAAyU,QAAA,gBACEzU,OAAA;cAAM+T,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAU,CAAE;cAAAK,QAAA,EAAC;YAAiB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,oJAE7D;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAEJpV,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE;YAAU,CAAE;YAAAK,QAAA,EAAC;UAAY;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClDpV,OAAA;YAAI+T,KAAK,EAAE;cAAEyC,WAAW,EAAE;YAAO,CAAE;YAAA/B,QAAA,gBACjCzU,OAAA;cAAAyU,QAAA,gBAAIzU,OAAA;gBAAM+T,KAAK,EAAE;kBAAEK,KAAK,EAAE;gBAAU,CAAE;gBAAAK,QAAA,EAAC;cAAiB;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,iEAA6D;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjIpV,OAAA;cAAAyU,QAAA,gBAAIzU,OAAA;gBAAM+T,KAAK,EAAE;kBAAEK,KAAK,EAAE;gBAAU,CAAE;gBAAAK,QAAA,EAAC;cAAgB;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,0EAAsE;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzIpV,OAAA;cAAAyU,QAAA,gBAAIzU,OAAA;gBAAM+T,KAAK,EAAE;kBAAEK,KAAK,EAAE;gBAAU,CAAE;gBAAAK,QAAA,EAAC;cAAsB;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,+EAA2E;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpJpV,OAAA;cAAAyU,QAAA,gBAAIzU,OAAA;gBAAM+T,KAAK,EAAE;kBAAEK,KAAK,EAAE;gBAAU,CAAE;gBAAAK,QAAA,EAAC;cAAyB;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,6EAAyE;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnJ,CAAC,eAELpV,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE;YAAU,CAAE;YAAAK,QAAA,EAAC;UAAc;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpDpV,OAAA;YAAAyU,QAAA,EAAG;UAEH;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACJpV,OAAA;YAAI+T,KAAK,EAAE;cAAEyC,WAAW,EAAE;YAAO,CAAE;YAAA/B,QAAA,gBACjCzU,OAAA;cAAAyU,QAAA,EAAI;YAAmD;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5DpV,OAAA;cAAAyU,QAAA,EAAI;YAAsD;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/DpV,OAAA;cAAAyU,QAAA,EAAI;YAAyD;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClEpV,OAAA;cAAAyU,QAAA,EAAI;YAA2D;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClE,CAAC,eAELpV,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE;YAAU,CAAE;YAAAK,QAAA,EAAC;UAAiB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvDpV,OAAA;YAAAyU,QAAA,EAAG;UAEH;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACJpV,OAAA;YAAI+T,KAAK,EAAE;cAAEyC,WAAW,EAAE;YAAO,CAAE;YAAA/B,QAAA,gBACjCzU,OAAA;cAAAyU,QAAA,EAAI;YAAmD;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5DpV,OAAA;cAAAyU,QAAA,EAAI;YAAqD;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC9DpV,OAAA;cAAAyU,QAAA,EAAI;YAAkD;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3DpV,OAAA;cAAAyU,QAAA,EAAI;YAA8C;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrD,CAAC,eAELpV,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE;YAAU,CAAE;YAAAK,QAAA,EAAC;UAAsB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5DpV,OAAA;YAAAyU,QAAA,EAAG;UAEH;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACJpV,OAAA;YAAI+T,KAAK,EAAE;cAAEyC,WAAW,EAAE;YAAO,CAAE;YAAA/B,QAAA,gBACjCzU,OAAA;cAAAyU,QAAA,EAAI;YAA6C;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACtDpV,OAAA;cAAAyU,QAAA,EAAI;YAAuC;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAChDpV,OAAA;cAAAyU,QAAA,EAAI;YAAgC;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzCpV,OAAA;cAAAyU,QAAA,EAAI;YAAiC;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC,eAELpV,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE;YAAU,CAAE;YAAAK,QAAA,EAAC;UAAoB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1DpV,OAAA;YAAK+T,KAAK,EAAE;cAAE0C,SAAS,EAAE,QAAQ;cAAE1B,MAAM,EAAE;YAAS,CAAE;YAAAN,QAAA,eACpDzU,OAAA;cAAK+T,KAAK,EAAE;gBACVC,UAAU,EAAE,SAAS;gBACrBa,OAAO,EAAE,MAAM;gBACfU,YAAY,EAAE,KAAK;gBACnBa,MAAM,EAAE,mBAAmB;gBAC3B/B,OAAO,EAAE,cAAc;gBACvBiC,QAAQ,EAAE,MAAM;gBAChBI,SAAS,EAAE;cACb,CAAE;cAAAjC,QAAA,eACAzU,OAAA;gBAAK+T,KAAK,EAAE;kBACVK,KAAK,EAAE,SAAS;kBAChBW,MAAM,EAAE,CAAC;kBACT0B,SAAS,EAAE,MAAM;kBACjBlC,UAAU,EAAE,wBAAwB;kBACpCe,QAAQ,EAAE,MAAM;kBAChBe,UAAU,EAAE;gBACd,CAAE;gBAAA5B,QAAA,EACnB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;cAAkE;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3C;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENpV,OAAA;YAAI+T,KAAK,EAAE;cAAEK,KAAK,EAAE;YAAU,CAAE;YAAAK,QAAA,EAAC;UAAa;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnDpV,OAAA;YAAK+T,KAAK,EAAE;cACVM,OAAO,EAAE,MAAM;cACfM,cAAc,EAAE,QAAQ;cACxBU,GAAG,EAAE,MAAM;cACXK,QAAQ,EAAE,MAAM;cAChBX,MAAM,EAAE;YACV,CAAE;YAAAN,QAAA,gBACAzU,OAAA;cAAK+T,KAAK,EAAE;gBAAE0C,SAAS,EAAE;cAAS,CAAE;cAAAhC,QAAA,eAClCzU,OAAA;gBACE2W,IAAI,EAAC,mCAAmC;gBACxC/E,MAAM,EAAC,QAAQ;gBACfgF,GAAG,EAAC,qBAAqB;gBACzB7C,KAAK,EAAE;kBAAEK,KAAK,EAAE,SAAS;kBAAEyC,cAAc,EAAE;gBAAO,CAAE;gBAAApC,QAAA,gBAEpDzU,OAAA;kBAAK+T,KAAK,EAAE;oBAAEuB,QAAQ,EAAE,MAAM;oBAAEa,YAAY,EAAE;kBAAM,CAAE;kBAAA1B,QAAA,EAAC;gBAAc;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC3EpV,OAAA;kBAAK+T,KAAK,EAAE;oBAAEK,KAAK,EAAE,SAAS;oBAAEkB,QAAQ,EAAE;kBAAO,CAAE;kBAAAb,QAAA,EAAC;gBAAyB;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClF;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC,eAENpV,OAAA;cAAK+T,KAAK,EAAE;gBAAE0C,SAAS,EAAE;cAAS,CAAE;cAAAhC,QAAA,eAClCzU,OAAA;gBACE2W,IAAI,EAAC,gCAAgC;gBACrC/E,MAAM,EAAC,QAAQ;gBACfgF,GAAG,EAAC,qBAAqB;gBACzB7C,KAAK,EAAE;kBAAEK,KAAK,EAAE,SAAS;kBAAEyC,cAAc,EAAE;gBAAO,CAAE;gBAAApC,QAAA,gBAEpDzU,OAAA;kBAAK+T,KAAK,EAAE;oBAAEuB,QAAQ,EAAE,MAAM;oBAAEa,YAAY,EAAE;kBAAM,CAAE;kBAAA1B,QAAA,EAAC;gBAAY;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACzEpV,OAAA;kBAAK+T,KAAK,EAAE;oBAAEK,KAAK,EAAE,SAAS;oBAAEkB,QAAQ,EAAE;kBAAO,CAAE;kBAAAb,QAAA,EAAC;gBAAsB;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/E;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC,eAENpV,OAAA;cAAK+T,KAAK,EAAE;gBAAE0C,SAAS,EAAE;cAAS,CAAE;cAAAhC,QAAA,eAClCzU,OAAA;gBACE2W,IAAI,EAAC,gCAAgC;gBACrC/E,MAAM,EAAC,QAAQ;gBACfgF,GAAG,EAAC,qBAAqB;gBACzB7C,KAAK,EAAE;kBAAEK,KAAK,EAAE,SAAS;kBAAEyC,cAAc,EAAE;gBAAO,CAAE;gBAAApC,QAAA,gBAEpDzU,OAAA;kBAAK+T,KAAK,EAAE;oBAAEuB,QAAQ,EAAE,MAAM;oBAAEa,YAAY,EAAE;kBAAM,CAAE;kBAAA1B,QAAA,EAAC;gBAAgB;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC7EpV,OAAA;kBAAK+T,KAAK,EAAE;oBAAEK,KAAK,EAAE,SAAS;oBAAEkB,QAAQ,EAAE;kBAAO,CAAE;kBAAAb,QAAA,EAAC;gBAAsB;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/E;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENpV,OAAA;YAAK+T,KAAK,EAAE;cAAEwC,SAAS,EAAE,MAAM;cAAEE,SAAS,EAAE,QAAQ;cAAErC,KAAK,EAAE,SAAS;cAAEkB,QAAQ,EAAE;YAAO,CAAE;YAAAb,QAAA,EAAC;UAE5F;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,EAEA7Q,aAAa,iBACZvE,OAAA;QAAK+T,KAAK,EAAE;UACVC,UAAU,EAAE,SAAS;UACrBI,KAAK,EAAE,SAAS;UAChBS,OAAO,EAAE,WAAW;UACpBC,YAAY,EAAE,mBAAmB;UACjCc,QAAQ,EAAE,UAAU;UACpBN,QAAQ,EAAE;QACZ,CAAE;QAAAb,QAAA,gBACAzU,OAAA;UAAK+T,KAAK,EAAE;YAAE+C,WAAW,EAAE;UAAG,CAAE;UAAArC,QAAA,EAAElQ,aAAa,CAAC/C;QAAO;UAAAyT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC9DpV,OAAA;UACE+T,KAAK,EAAE;YACL6B,QAAQ,EAAE,UAAU;YACpBC,GAAG,EAAE,EAAE;YACPE,KAAK,EAAE,EAAE;YACT/B,UAAU,EAAE,MAAM;YAClBoC,MAAM,EAAE,MAAM;YACdhC,KAAK,EAAE,SAAS;YAChBoB,MAAM,EAAE,SAAS;YACjBF,QAAQ,EAAE;UACZ,CAAE;UACFG,OAAO,EAAEnC,YAAa;UAAAmB,QAAA,EACvB;QAED;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,EAEA,CAACzR,SAAS,gBACT3D,OAAA;QAAK+T,KAAK,EAAE;UACVW,IAAI,EAAE,CAAC;UACPL,OAAO,EAAE,MAAM;UACfC,aAAa,EAAE,QAAQ;UACvBK,cAAc,EAAE,QAAQ;UACxBC,UAAU,EAAE,QAAQ;UACpBC,OAAO,EAAE;QACX,CAAE;QAAAJ,QAAA,eACAzU,OAAA;UAAK+T,KAAK,EAAE;YACVuC,QAAQ,EAAE,OAAO;YACjBpC,KAAK,EAAE;UACT,CAAE;UAAAO,QAAA,gBACAzU,OAAA;YAAK+T,KAAK,EAAE;cACVM,OAAO,EAAE,MAAM;cACfC,aAAa,EAAE,QAAQ;cACvBM,UAAU,EAAE,QAAQ;cACpBuB,YAAY,EAAE;YAChB,CAAE;YAAA1B,QAAA,gBACAzU,OAAA;cACE+W,GAAG,EAAEhY,OAAQ;cACbiY,GAAG,EAAC,iBAAiB;cACrBjD,KAAK,EAAE;gBACLG,KAAK,EAAE,OAAO;gBACdC,MAAM,EAAE,OAAO;gBACfgC,YAAY,EAAE,EAAE;gBAChBZ,YAAY,EAAE,KAAK;gBACnBa,MAAM,EAAE;cACV;YAAE;cAAAnB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACFpV,OAAA;cAAK+T,KAAK,EAAE;gBAAEuB,QAAQ,EAAE,EAAE;gBAAElB,KAAK,EAAE,SAAS;gBAAEmC,SAAS,EAAE;cAAE,CAAE;cAAA9B,QAAA,GAC1DjB,YAAY,CAAC,CAAC,EAAC,oCAClB;YAAA;cAAAyB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACNpV,OAAA;YAAMiX,QAAQ,EAAE3F,oBAAqB;YAAAmD,QAAA,gBACnCzU,OAAA;cACE+T,KAAK,EAAE;gBACLG,KAAK,EAAE,MAAM;gBACbW,OAAO,EAAE,EAAE;gBACXsB,YAAY,EAAE,EAAE;gBAChBZ,YAAY,EAAE,CAAC;gBACfa,MAAM,EAAE,mBAAmB;gBAC3BpC,UAAU,EAAE,SAAS;gBACrBI,KAAK,EAAE,SAAS;gBAChBkB,QAAQ,EAAE,EAAE;gBACZf,UAAU,EAAE,wBAAwB;gBACpC2C,SAAS,EAAE;cACb,CAAE;cACFC,WAAW,EAAC,gBAAgB;cAC5BtF,KAAK,EAAEzO,QAAS;cAChBgU,QAAQ,EAAE7F,CAAC,IAAI;gBACblO,WAAW,CAACkO,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC;gBAC3BrM,oBAAoB,CAAC,IAAI,CAAC;cAC5B,CAAE;cACF6R,QAAQ;YAAA;cAAApC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC,EACD,CAAC7P,iBAAiB,iBAAIvF,OAAA;cAAK+T,KAAK,EAAE;gBAACK,KAAK,EAAE,SAAS;gBAAEkB,QAAQ,EAAE,EAAE;gBAAEiB,SAAS,EAAE,CAAC,CAAC;gBAAEJ,YAAY,EAAE;cAAC,CAAE;cAAA1B,QAAA,EAAC;YAAuB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAClIpV,OAAA;cACE+T,KAAK,EAAE;gBACLG,KAAK,EAAE,MAAM;gBACbW,OAAO,EAAE,EAAE;gBACXU,YAAY,EAAE,CAAC;gBACfvB,UAAU,EAAEnP,WAAW,KAAK,QAAQ,GAClC,0CAA0C,GAC1C,SAAS;gBACXuP,KAAK,EAAE,SAAS;gBAChBkD,UAAU,EAAE,MAAM;gBAClBhC,QAAQ,EAAE,EAAE;gBACZc,MAAM,EAAE,MAAM;gBACdZ,MAAM,EAAE3Q,WAAW,KAAK,QAAQ,IAAI,CAACQ,kBAAkB,GAAG,SAAS,GAAG,aAAa;gBACnFkP,UAAU,EAAE;cACd,CAAE;cACF5M,IAAI,EAAC,QAAQ;cACb4P,QAAQ,EAAE1S,WAAW,KAAK,QAAQ,IAAIQ,kBAAmB;cAAAoP,QAAA,EAExDpP,kBAAkB,GAAG,aAAa,GAAIR,WAAW,KAAK,QAAQ,GAAG,cAAc,GAAG;YAAiB;cAAAoQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9F,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,EACNvQ,WAAW,KAAK,QAAQ,iBACvB7E,OAAA;YACE+T,KAAK,EAAE;cACLG,KAAK,EAAE,MAAM;cACbW,OAAO,EAAE,CAAC;cACV0B,SAAS,EAAE,CAAC;cACZhB,YAAY,EAAE,CAAC;cACfvB,UAAU,EAAE,SAAS;cACrBI,KAAK,EAAE,SAAS;cAChBkB,QAAQ,EAAE,EAAE;cACZc,MAAM,EAAE,MAAM;cACdZ,MAAM,EAAE,SAAS;cACjBjB,UAAU,EAAE;YACd,CAAE;YACFkB,OAAO,EAAElC,eAAgB;YAAAkB,QAAA,EAC1B;UAED;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT,eACDpV,OAAA;YAAK+T,KAAK,EAAE;cAAEwC,SAAS,EAAE,EAAE;cAAEnC,KAAK,EAAE,SAAS;cAAEqC,SAAS,EAAE,QAAQ;cAAEnB,QAAQ,EAAE;YAAG,CAAE;YAAAb,QAAA,EAChF5Q;UAAM;YAAAoR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,gBAENpV,OAAA;QAAK+T,KAAK,EAAE;UACVW,IAAI,EAAE,CAAC;UACPL,OAAO,EAAE,MAAM;UACfG,QAAQ,EAAE;QACZ,CAAE;QAAAC,QAAA,gBAEAzU,OAAA,CAACnB,QAAQ;UACP+Q,KAAK,EAAE7K,WAAW,CAACyS,GAAG,CAAClI,IAAI,KAAK;YAAElM,QAAQ,EAAEkM,IAAI;YAAElK,MAAM,EAAE;UAAK,CAAC,CAAC,CAAE;UACnEY,WAAW,EAAEA,WAAY;UACzBU,YAAY,EAAEA,YAAa;UAC3B+Q,YAAY,EAAEjN,QAAS;UACvBkN,WAAW,EAAEtU,QAAS;UACtBuU,cAAc,EAAExM,qBAAsB;UACtCyM,SAAS,EAAEtM;QAAc;UAAA2J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eAGFpV,OAAA;UAAK+T,KAAK,EAAE;YACVW,IAAI,EAAE,CAAC;YACPL,OAAO,EAAE,MAAM;YACfC,aAAa,EAAE,QAAQ;YACvBE,QAAQ,EAAE;UACZ,CAAE;UAAAC,QAAA,GAEC,CAACrO,WAAW,gBACXpG,OAAA;YAAK+T,KAAK,EAAE;cACVW,IAAI,EAAE,CAAC;cACPL,OAAO,EAAE,MAAM;cACfC,aAAa,EAAE,QAAQ;cACvBK,cAAc,EAAE,QAAQ;cACxBC,UAAU,EAAE,QAAQ;cACpBC,OAAO,EAAE,QAAQ;cACjBb,UAAU,EAAE;YACd,CAAE;YAAAS,QAAA,gBACAzU,OAAA;cAAK+T,KAAK,EAAE;gBACVuB,QAAQ,EAAE,EAAE;gBACZlB,KAAK,EAAE,SAAS;gBAChB+B,YAAY,EAAE,EAAE;gBAChBmB,UAAU,EAAE;cACd,CAAE;cAAA7C,QAAA,EAAC;YAEH;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNpV,OAAA;cAAK+T,KAAK,EAAE;gBACVuB,QAAQ,EAAE,EAAE;gBACZlB,KAAK,EAAE,SAAS;gBAChBqC,SAAS,EAAE,QAAQ;gBACnBH,QAAQ,EAAE,GAAG;gBACbD,UAAU,EAAE;cACd,CAAE;cAAA5B,QAAA,EAAC;YAEH;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNpV,OAAA;cAAK+T,KAAK,EAAE;gBACVwC,SAAS,EAAE,EAAE;gBACblC,OAAO,EAAE,MAAM;gBACfC,aAAa,EAAE,QAAQ;gBACvBM,UAAU,EAAE;cACd,CAAE;cAAAH,QAAA,gBACAzU,OAAA;gBAAK+T,KAAK,EAAE;kBACVuB,QAAQ,EAAE,EAAE;kBACZlB,KAAK,EAAE,SAAS;kBAChB+B,YAAY,EAAE;gBAChB,CAAE;gBAAA1B,QAAA,EAAC;cAEH;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACNpV,OAAA;gBAAK+T,KAAK,EAAE;kBACVuB,QAAQ,EAAE,EAAE;kBACZlB,KAAK,EAAE,SAAS;kBAChBkD,UAAU,EAAE;gBACd,CAAE;gBAAA7C,QAAA,EACCrR;cAAQ;gBAAA6R,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNpV,OAAA;cACE+T,KAAK,EAAE;gBACLwC,SAAS,EAAE,EAAE;gBACb1B,OAAO,EAAE,UAAU;gBACnBU,YAAY,EAAE,CAAC;gBACfvB,UAAU,EAAE,SAAS;gBACrBI,KAAK,EAAE,SAAS;gBAChBkB,QAAQ,EAAE,EAAE;gBACZc,MAAM,EAAE,MAAM;gBACdZ,MAAM,EAAE,SAAS;gBACjBjB,UAAU,EAAE;cACd,CAAE;cACFkB,OAAO,EAAErC,gBAAiB;cAAAqB,QAAA,EAC3B;YAED;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,gBAENpV,OAAA,CAACpB,OAAO;YACN0E,SAAS,EAAE8C,WAAY;YACvB3C,QAAQ,EAAEyC,YAAY,CAACE,WAAW,CAAC,IAAI,EAAG;YAC1ChD,QAAQ,EAAEA,QAAS;YACnByU,aAAa,EAAEA,CAACvU,SAAS,EAAEwU,WAAW,KAAK;cACzCxW,OAAO,CAAC4H,GAAG,CAAC,2BAA2B,EAAE5F,SAAS,EAAEwU,WAAW,CAAC;;cAEhE;cACA,MAAMC,gBAAgB,GAAGzU,SAAS;cAClC,MAAM0U,cAAc,GAAGF,WAAW;;cAElC;cACAvU,YAAY,CAACwU,gBAAgB,CAAC;cAC9BvU,UAAU,CAACwU,cAAc,CAAC;;cAE1B;cACA,MAAMC,iBAAiB,GAAGzR,iBAAiB,CAACuR,gBAAgB,CAAC,IACpCvR,iBAAiB,CAACuR,gBAAgB,CAAC,CAAC3S,MAAM;cAEnE,IAAI,CAAC6S,iBAAiB,EAAE;gBACtB;gBACA,MAAMC,QAAQ,GAAGzX,MAAM,CAAC2K,OAAO,CAC7B,GAAG2M,gBAAgB,6BAA6B,GAChD,2DAA2D,GAC3D,uDACF,CAAC;gBAED,IAAIG,QAAQ,EAAE;kBACZ;kBACA,MAAMC,UAAU,GAAG;oBAAE3G,cAAc,EAAEA,CAAA,KAAM,CAAC;kBAAE,CAAC;;kBAE/C;kBACA,MAAM4G,YAAY,GAAG3X,MAAM,CAAC2K,OAAO,CACjC,mBAAmB,GACnB,oBAAoB2M,gBAAgB,sFAAsF,GAC1H,SAASA,gBAAgB,kDAAkD,GAC3E,oGAAoG,GACpG,0BACF,CAAC;kBAED,IAAIK,YAAY,EAAE;oBAChB;oBACAC,gBAAgB,CAACN,gBAAgB,EAAEC,cAAc,CAAC;kBACpD;kBACA;gBACF,CAAC,MAAM;kBACL;kBACA1W,OAAO,CAAC4H,GAAG,CAAC,4CAA4C,EAAE6O,gBAAgB,CAAC;gBAC7E;cACF;;cAEA;cACA,SAASO,gBAAgBA,CAAC/V,IAAI,EAAE+P,EAAE,EAAEwF,WAAW,EAAE9O,SAAS,EAAE;gBAC1D,MAAMuP,UAAU,GAAG;kBACjBhW,IAAI,EAAEA,IAAI;kBACV+P,EAAE,EAAEA,EAAE;kBACN9Q,OAAO,EAAEsW,WAAW;kBACpB7K,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;kBACrBqF,YAAY,EAAErK,QAAQ;kBACtBiF,SAAS,EAAEA;gBACb,CAAC;;gBAED;gBACA7C,eAAe,CAACwE,IAAI,IAAI;kBACtB,MAAMwE,eAAe,GAAG;oBAAE,GAAGxE;kBAAK,CAAC;kBACnC,IAAI,CAACwE,eAAe,CAACmD,EAAE,CAAC,EAAE;oBACxBnD,eAAe,CAACmD,EAAE,CAAC,GAAG,EAAE;kBAC1B;kBACAnD,eAAe,CAACmD,EAAE,CAAC,GAAG,CAAC,GAAGnD,eAAe,CAACmD,EAAE,CAAC,EAAEiG,UAAU,CAAC;;kBAE1D;kBACAvZ,eAAe,CAACoE,QAAQ,EAAEkP,EAAE,EAAEnD,eAAe,CAACmD,EAAE,CAAC,CAAC;kBAElD,OAAOnD,eAAe;gBACxB,CAAC,CAAC;cACJ;;cAEA;cACA,SAASqJ,sBAAsBA,CAAA,EAAG;gBAChClX,OAAO,CAAC4H,GAAG,CAAC,wCAAwC,EAAE6O,gBAAgB,CAAC;gBAEvE,IAAI,CAAC3Q,SAAS,CAAC2D,OAAO,EAAE;kBACtBzJ,OAAO,CAACD,KAAK,CAAC,yCAAyC,CAAC;kBACxDmD,gBAAgB,CAAC;oBACfpB,QAAQ,EAAE,QAAQ;oBAClB5B,OAAO,EAAE,+CAA+C;oBACxDmG,IAAI,EAAE;kBACR,CAAC,CAAC;kBACF;gBACF;gBAEAP,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,aAAa,EAAE;kBACpCoH,EAAE,EAAEyF,gBAAgB;kBACpBvW,OAAO,EAAEwW,cAAc;kBACvBzV,IAAI,EAAEa,QAAQ;kBACdgL,YAAY,EAAErK,QAAQ;kBACtBkJ,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;kBACrB7H,SAAS,EAAEV,OAAO,GAAGA,OAAO,CAACU,SAAS,GAAG,IAAI;kBAC7C8H,SAAS,EAAE;gBACb,CAAC,CAAC;;gBAEF;gBACAsP,gBAAgB,CAAClV,QAAQ,EAAE2U,gBAAgB,EAAEC,cAAc,EAAE,KAAK,CAAC;cACrE;;cAEA;cACA,SAASK,gBAAgBA,CAAC/F,EAAE,EAAExD,GAAG,EAAE;gBACjC,IAAI,CAAC1H,SAAS,CAAC2D,OAAO,EAAE;kBACtBzJ,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAC;kBACvDmD,gBAAgB,CAAC;oBACfpB,QAAQ,EAAE,QAAQ;oBAClB5B,OAAO,EAAE,qDAAqD;oBAC9DmG,IAAI,EAAE;kBACR,CAAC,CAAC;kBACF;gBACF;;gBAEA;gBACA7D,SAAS,CAAC,0BAA0B,CAAC;;gBAErC;gBACA,SAAS2U,qBAAqBA,CAAClW,IAAI,EAAE+P,EAAE,EAAEwF,WAAW,EAAE9O,SAAS,EAAE;kBAC/D,MAAMuP,UAAU,GAAG;oBACjBhW,IAAI,EAAEA,IAAI;oBACV+P,EAAE,EAAEA,EAAE;oBACN9Q,OAAO,EAAEsW,WAAW;oBACpB7K,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;oBACrBqF,YAAY,EAAErK,QAAQ;oBACtB2U,OAAO,EAAE,IAAI;oBACb1P,SAAS,EAAEA;kBACb,CAAC;;kBAED;kBACA7C,eAAe,CAACwE,IAAI,IAAI;oBACtB,MAAMwE,eAAe,GAAG;sBAAE,GAAGxE;oBAAK,CAAC;oBACnC,IAAI,CAACwE,eAAe,CAACmD,EAAE,CAAC,EAAE;sBACxBnD,eAAe,CAACmD,EAAE,CAAC,GAAG,EAAE;oBAC1B;oBACAnD,eAAe,CAACmD,EAAE,CAAC,GAAG,CAAC,GAAGnD,eAAe,CAACmD,EAAE,CAAC,EAAEiG,UAAU,CAAC;;oBAE1D;oBACAvZ,eAAe,CAACoE,QAAQ,EAAEkP,EAAE,EAAEnD,eAAe,CAACmD,EAAE,CAAC,CAAC;oBAElD,OAAOnD,eAAe;kBACxB,CAAC,CAAC;;kBAEF;kBACA3K,gBAAgB,CAAC;oBACfpB,QAAQ,EAAE,QAAQ;oBAClB5B,OAAO,EAAE,cAAc8Q,EAAE,2CAA2C;oBACpE3K,IAAI,EAAE;kBACR,CAAC,CAAC;kBAEF7D,SAAS,CAAC,yBAAyB,CAAC;gBACtC;;gBAEA;gBACAsD,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,cAAc,EAAE;kBACrCoH,EAAE,EAAEA,EAAE;kBACN9Q,OAAO,EAAEsN,GAAG;kBACZvM,IAAI,EAAEa,QAAQ;kBACdgL,YAAY,EAAErK,QAAQ;kBACtBkJ,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;kBACrB7H,SAAS,EAAEV,OAAO,GAAGA,OAAO,CAACU,SAAS,GAAG,IAAI;kBAC7C8H,SAAS,EAAE;gBACb,CAAC,EAAGW,QAAQ,IAAK;kBACf,IAAIA,QAAQ,IAAIA,QAAQ,CAAC0C,OAAO,EAAE;oBAChC;oBACAoM,qBAAqB,CAACrV,QAAQ,EAAEkP,EAAE,EAAExD,GAAG,EAAE,KAAK,CAAC;kBACjD,CAAC,MAAM;oBACL;oBACAtK,gBAAgB,CAAC;sBACfpB,QAAQ,EAAE,QAAQ;sBAClB5B,OAAO,EAAE,4BAA4BmI,QAAQ,IAAIA,QAAQ,CAACtI,KAAK,GAAGsI,QAAQ,CAACtI,KAAK,GAAG,eAAe,EAAE;sBACpGsG,IAAI,EAAE;oBACR,CAAC,CAAC;oBACF7D,SAAS,CAAC,yBAAyB,CAAC;kBACtC;gBACF,CAAC,CAAC;cACJ;;cAEA;cACA,IAAI8B,iBAAiB,IAAIF,UAAU,CAACqS,gBAAgB,CAAC,EAAE;gBACrD,IAAI;kBACFzW,OAAO,CAAC4H,GAAG,CAAC,2CAA2C,EAAE6O,gBAAgB,CAAC;;kBAE1E;kBACAxW,cAAc,CAACyW,cAAc,EAAEtS,UAAU,CAACqS,gBAAgB,CAAC,CAAC,CACzDtJ,IAAI,CAACpM,gBAAgB,IAAI;oBACxBf,OAAO,CAAC4H,GAAG,CAAC,uCAAuC,CAAC;oBAEpD,IAAI,CAAC9B,SAAS,CAAC2D,OAAO,EAAE;sBACtBzJ,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAC;sBAC3DmD,gBAAgB,CAAC;wBACfpB,QAAQ,EAAE,QAAQ;wBAClB5B,OAAO,EAAE,+CAA+C;wBACxDmG,IAAI,EAAE;sBACR,CAAC,CAAC;sBACF;oBACF;;oBAEA;oBACAP,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,aAAa,EAAE;sBACpCoH,EAAE,EAAEyF,gBAAgB;sBACpBvW,OAAO,EAAEa,gBAAgB;sBACzBE,IAAI,EAAEa,QAAQ;sBACdgL,YAAY,EAAErK,QAAQ;sBACtBkJ,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;sBACrB7H,SAAS,EAAEV,OAAO,GAAGA,OAAO,CAACU,SAAS,GAAG,IAAI;sBAC7C8H,SAAS,EAAE;oBACb,CAAC,CAAC;;oBAEF;oBACAsP,gBAAgB,CAAClV,QAAQ,EAAE2U,gBAAgB,EAAEC,cAAc,EAAE,IAAI,CAAC;kBACpE,CAAC,CAAC,CACDlH,KAAK,CAACzP,KAAK,IAAI;oBACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;oBAClD;oBACAmX,sBAAsB,CAAC,CAAC;kBAC1B,CAAC,CAAC;gBACN,CAAC,CAAC,OAAOnX,KAAK,EAAE;kBACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;kBAC5C;kBACAmX,sBAAsB,CAAC,CAAC;gBAC1B;cACF,CAAC,MAAM;gBACL;gBACAA,sBAAsB,CAAC,CAAC;cAC1B;YACF,CAAE;YACFG,cAAc,EAAEA,CAACrV,SAAS,EAAEwU,WAAW,KAAK;cAC1CxW,OAAO,CAAC4H,GAAG,CAAC,4BAA4B,EAAE5F,SAAS,EAAEwU,WAAW,CAAC;;cAEjE;cACA,MAAMC,gBAAgB,GAAGzU,SAAS;cAClC,MAAM0U,cAAc,GAAGF,WAAW;;cAElC;cACAvU,YAAY,CAACwU,gBAAgB,CAAC;cAC9BvU,UAAU,CAACwU,cAAc,CAAC;;cAE1B;cACA,MAAMI,YAAY,GAAG3X,MAAM,CAAC2K,OAAO,CACjC,mBAAmB,GACnB,oBAAoB2M,gBAAgB,sFAAsF,GAC1H,SAASA,gBAAgB,kDAAkD,GAC3E,oGAAoG,GACpG,0BACF,CAAC;cAED,IAAI,CAACK,YAAY,EAAE;gBACjB,OAAO,CAAC;cACV;;cAEA;cACA,IAAIhR,SAAS,CAAC2D,OAAO,EAAE;gBACrB;gBACAjH,SAAS,CAAC,0BAA0B,CAAC;;gBAErC;gBACA,SAAS2U,qBAAqBA,CAAClW,IAAI,EAAE+P,EAAE,EAAEwF,WAAW,EAAE9O,SAAS,EAAE;kBAC/D,MAAMuP,UAAU,GAAG;oBACjBhW,IAAI,EAAEA,IAAI;oBACV+P,EAAE,EAAEA,EAAE;oBACN9Q,OAAO,EAAEsW,WAAW;oBACpB7K,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;oBACrBqF,YAAY,EAAErK,QAAQ;oBACtB2U,OAAO,EAAE,IAAI;oBACb1P,SAAS,EAAEA;kBACb,CAAC;;kBAED;kBACA7C,eAAe,CAACwE,IAAI,IAAI;oBACtB,MAAMwE,eAAe,GAAG;sBAAE,GAAGxE;oBAAK,CAAC;oBACnC,IAAI,CAACwE,eAAe,CAACmD,EAAE,CAAC,EAAE;sBACxBnD,eAAe,CAACmD,EAAE,CAAC,GAAG,EAAE;oBAC1B;oBACAnD,eAAe,CAACmD,EAAE,CAAC,GAAG,CAAC,GAAGnD,eAAe,CAACmD,EAAE,CAAC,EAAEiG,UAAU,CAAC;;oBAE1D;oBACAvZ,eAAe,CAACoE,QAAQ,EAAEkP,EAAE,EAAEnD,eAAe,CAACmD,EAAE,CAAC,CAAC;oBAElD,OAAOnD,eAAe;kBACxB,CAAC,CAAC;;kBAEF;kBACA3K,gBAAgB,CAAC;oBACfpB,QAAQ,EAAE,QAAQ;oBAClB5B,OAAO,EAAE,cAAc8Q,EAAE,2CAA2C;oBACpE3K,IAAI,EAAE;kBACR,CAAC,CAAC;kBAEF7D,SAAS,CAAC,yBAAyB,CAAC;gBACtC;;gBAEA;gBACA,SAAS8U,2BAA2BA,CAAA,EAAG;kBACrCtX,OAAO,CAAC4H,GAAG,CAAC,uCAAuC,EAAE6O,gBAAgB,CAAC;kBAEtE3Q,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,cAAc,EAAE;oBACrCoH,EAAE,EAAEyF,gBAAgB;oBACpBvW,OAAO,EAAEwW,cAAc;oBACvBzV,IAAI,EAAEa,QAAQ;oBACdgL,YAAY,EAAErK,QAAQ;oBACtBkJ,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;oBACrB7H,SAAS,EAAEV,OAAO,GAAGA,OAAO,CAACU,SAAS,GAAG,IAAI;oBAC7C8H,SAAS,EAAE;kBACb,CAAC,EAAGW,QAAQ,IAAK;oBACf,IAAIA,QAAQ,IAAIA,QAAQ,CAAC0C,OAAO,EAAE;sBAChC;sBACAoM,qBAAqB,CAACrV,QAAQ,EAAE2U,gBAAgB,EAAEC,cAAc,EAAE,KAAK,CAAC;oBAC1E,CAAC,MAAM;sBACL;sBACAxT,gBAAgB,CAAC;wBACfpB,QAAQ,EAAE,QAAQ;wBAClB5B,OAAO,EAAE,4BAA4BmI,QAAQ,IAAIA,QAAQ,CAACtI,KAAK,GAAGsI,QAAQ,CAACtI,KAAK,GAAG,eAAe,EAAE;wBACpGsG,IAAI,EAAE;sBACR,CAAC,CAAC;sBACF7D,SAAS,CAAC,yBAAyB,CAAC;oBACtC;kBACF,CAAC,CAAC;gBACJ;;gBAEA;gBACA,IAAI8B,iBAAiB,IAAIF,UAAU,CAACqS,gBAAgB,CAAC,EAAE;kBACrD,IAAI;oBACFzW,OAAO,CAAC4H,GAAG,CAAC,0CAA0C,EAAE6O,gBAAgB,CAAC;;oBAEzE;oBACAxW,cAAc,CAACyW,cAAc,EAAEtS,UAAU,CAACqS,gBAAgB,CAAC,CAAC,CACzDtJ,IAAI,CAACpM,gBAAgB,IAAI;sBACxBf,OAAO,CAAC4H,GAAG,CAAC,sCAAsC,CAAC;;sBAEnD;sBACA9B,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,cAAc,EAAE;wBACrCoH,EAAE,EAAEyF,gBAAgB;wBACpBvW,OAAO,EAAEa,gBAAgB;wBACzBE,IAAI,EAAEa,QAAQ;wBACdgL,YAAY,EAAErK,QAAQ;wBACtBkJ,SAAS,EAAEnE,IAAI,CAACC,GAAG,CAAC,CAAC;wBACrB7H,SAAS,EAAEV,OAAO,GAAGA,OAAO,CAACU,SAAS,GAAG,IAAI;wBAC7C8H,SAAS,EAAE;sBACb,CAAC,EAAGW,QAAQ,IAAK;wBACf,IAAIA,QAAQ,IAAIA,QAAQ,CAAC0C,OAAO,EAAE;0BAChC;0BACAoM,qBAAqB,CAACrV,QAAQ,EAAE2U,gBAAgB,EAAEC,cAAc,EAAE,IAAI,CAAC;wBACzE,CAAC,MAAM;0BACL1W,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEsI,QAAQ,CAAC;0BAChD;0BACAnF,gBAAgB,CAAC;4BACfpB,QAAQ,EAAE,QAAQ;4BAClB5B,OAAO,EAAE,4BAA4BmI,QAAQ,IAAIA,QAAQ,CAACtI,KAAK,GAAGsI,QAAQ,CAACtI,KAAK,GAAG,eAAe,EAAE;4BACpGsG,IAAI,EAAE;0BACR,CAAC,CAAC;0BACF7D,SAAS,CAAC,yBAAyB,CAAC;wBACtC;sBACF,CAAC,CAAC;oBACJ,CAAC,CAAC,CACDgN,KAAK,CAACzP,KAAK,IAAI;sBACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;sBACxD;sBACAuX,2BAA2B,CAAC,CAAC;oBAC/B,CAAC,CAAC;kBACN,CAAC,CAAC,OAAOvX,KAAK,EAAE;oBACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;oBAClD;oBACAuX,2BAA2B,CAAC,CAAC;kBAC/B;gBACF,CAAC,MAAM;kBACL;kBACAA,2BAA2B,CAAC,CAAC;gBAC/B;cACF,CAAC,MAAM;gBACLtX,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAC;gBACvDmD,gBAAgB,CAAC;kBACfpB,QAAQ,EAAE,QAAQ;kBAClB5B,OAAO,EAAE,qDAAqD;kBAC9DmG,IAAI,EAAE;gBACR,CAAC,CAAC;cACJ;YACF,CAAE;YACF1C,eAAe,EAAEuB,iBAAiB,CAACJ,WAAW,CAAC,IAAI;cAAEjB,MAAM,EAAE,KAAK;cAAEC,MAAM,EAAE;YAAM,CAAE;YACpFX,MAAM,EAAE6B,WAAW,CAACF,WAAW,CAAC,IAAI,KAAM;YAC1CyS,eAAe,EAAGrX,OAAO,IAAK;cAC5B;cACA,IAAI4F,SAAS,CAAC2D,OAAO,IAAI3E,WAAW,IAAI5E,OAAO,CAACmK,MAAM,GAAG,CAAC,EAAE;gBAC1DvE,SAAS,CAAC2D,OAAO,CAACG,IAAI,CAAC,QAAQ,EAAE;kBAAEoH,EAAE,EAAElM;gBAAY,CAAC,CAAC;cACvD;YACF,CAAE;YACF0S,OAAO,EAAEA,CAAA,KAAMjO,SAAS,CAACzE,WAAW,CAAE;YACtC2S,kBAAkB,EAAEnS,oBAAoB,CAACR,WAAW,CAAE;YACtD4S,gBAAgB,EAAEvI;UAAqB;YAAAwE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CACF,eAGDpV,OAAA;YAAK+T,KAAK,EAAE;cACVM,OAAO,EAAE,MAAM;cACfM,cAAc,EAAE,eAAe;cAC/BE,OAAO,EAAE,UAAU;cACnBoE,SAAS,EAAE,mBAAmB;cAC9BjF,UAAU,EAAE;YACd,CAAE;YAAAS,QAAA,gBACAzU,OAAA;cAAK+T,KAAK,EAAE;gBACVuB,QAAQ,EAAE,EAAE;gBACZlB,KAAK,EAAE,SAAS;gBAChBC,OAAO,EAAE,MAAM;gBACfO,UAAU,EAAE;cACd,CAAE;cAAAH,QAAA,gBACAzU,OAAA;gBAAK+T,KAAK,EAAE;kBACVG,KAAK,EAAE,CAAC;kBACRC,MAAM,EAAE,CAAC;kBACToB,YAAY,EAAE,KAAK;kBACnBvB,UAAU,EAAEnQ,MAAM,CAACoH,QAAQ,CAAC,WAAW,CAAC,IAAIpH,MAAM,CAACoH,QAAQ,CAAC,YAAY,CAAC,GAAG,SAAS,GAAG,SAAS;kBACjG6L,WAAW,EAAE;gBACf;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EACRvR,MAAM,CAACoH,QAAQ,CAAC,WAAW,CAAC,IAAIpH,MAAM,CAACoH,QAAQ,CAAC,YAAY,CAAC,GAAG,mBAAmB,GAAG,iBAAiB;YAAA;cAAAgK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrG,CAAC,eAENpV,OAAA;cACE+T,KAAK,EAAE;gBACLc,OAAO,EAAE,UAAU;gBACnBU,YAAY,EAAE,CAAC;gBACfvB,UAAU,EAAE,SAAS;gBACrBI,KAAK,EAAE,SAAS;gBAChBkB,QAAQ,EAAE,EAAE;gBACZc,MAAM,EAAE,MAAM;gBACdZ,MAAM,EAAE,SAAS;gBACjBjB,UAAU,EAAE;cACd,CAAE;cACFkB,OAAO,EAAErC,gBAAiB;cAAAqB,QAAA,EAC3B;YAED;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGNpV,OAAA,CAAClB,iBAAiB;MAChBoa,MAAM,EAAEpS,qBAAsB;MAC9BgS,OAAO,EAAE9H,wBAAyB;MAClCJ,gBAAgB,EAAE5J,mBAAmB,IAAI,CAAC,CAAE;MAC5CmS,QAAQ,EAAEpI,yBAA0B;MACpCqI,QAAQ,EAAEpI,wBAAyB;MACnC5N,QAAQ,EAAEA;IAAS;MAAA6R,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACjS,EAAA,CArwFQD,GAAG;AAAAmW,EAAA,GAAHnW,GAAG;AAuwFZ,eAAeA,GAAG;AAAC,IAAAmW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}