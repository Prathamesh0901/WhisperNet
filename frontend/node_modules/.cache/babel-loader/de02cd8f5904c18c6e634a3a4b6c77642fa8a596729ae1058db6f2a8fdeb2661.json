{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddharth\\\\Documents\\\\GitHub\\\\WhisperNet\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport ChatManager from './components/ChatManager';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Encryption utilities\nconst generateKeyPair = async () => {\n  try {\n    const keyPair = await window.crypto.subtle.generateKey({\n      name: \"RSA-OAEP\",\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: \"SHA-256\"\n    }, true, [\"encrypt\", \"decrypt\"]);\n\n    // Export the keys to JWK format\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\n    return {\n      publicKey,\n      privateKey\n    };\n  } catch (error) {\n    console.error('Error generating key pair:', error);\n    throw error;\n  }\n};\nconst encryptMessage = async (message, publicKeyJwk) => {\n  try {\n    // Import the public key\n    const publicKey = await window.crypto.subtle.importKey(\"jwk\", publicKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"encrypt\"]);\n\n    // Convert the message to ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n\n    // Encrypt the data\n    const encryptedData = await window.crypto.subtle.encrypt({\n      name: \"RSA-OAEP\"\n    }, publicKey, data);\n\n    // Convert the encrypted data to base64\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n  } catch (error) {\n    console.error('Error encrypting message:', error);\n    throw error;\n  }\n};\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\n  try {\n    // Import the private key\n    const privateKey = await window.crypto.subtle.importKey(\"jwk\", privateKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"decrypt\"]);\n\n    // Convert the base64 encrypted message to ArrayBuffer\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\n\n    // Decrypt the data\n    const decryptedData = await window.crypto.subtle.decrypt({\n      name: \"RSA-OAEP\"\n    }, privateKey, encryptedData);\n\n    // Convert the decrypted data to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n  } catch (error) {\n    console.error('Error decrypting message:', error);\n    return '[Encrypted message - cannot decrypt]';\n  }\n};\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [status, setStatus] = useState('Checking relay status...');\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [typing, setTyping] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\n  const [relayStatus, setRelayStatus] = useState('checking');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [recipientStatus, setRecipientStatus] = useState({\n    exists: false,\n    online: false\n  });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const recipientCheckTimeoutRef = useRef(null);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeDevice = async () => {\n      try {\n        // Get device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n\n        // Initialize encryption\n        await initializeEncryption(visitorId);\n      } catch (error) {\n        console.error('Failed to initialize device:', error);\n        // Generate a fallback device ID\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\n        setDeviceId(fallbackId);\n\n        // Initialize encryption with fallback ID\n        await initializeEncryption(fallbackId);\n      }\n    };\n    initializeDevice();\n  }, []);\n\n  // Initialize encryption\n  const initializeEncryption = async deviceIdentifier => {\n    try {\n      setEncryptionStatus('initializing');\n\n      // Check if we have keys in localStorage\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\n      if (storedKeys) {\n        // We have stored keys, check if they're valid\n        try {\n          const parsedKeys = JSON.parse(storedKeys);\n\n          // Validate the keys by testing encryption/decryption\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\n            try {\n              // Test encryption with the stored keys\n              const testMessage = \"test-encryption-\" + Date.now();\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\n              if (decrypted === testMessage) {\n                // Keys are valid\n                setKeyPair(parsedKeys);\n                console.log('Loaded and validated existing encryption keys');\n                setEncryptionStatus('ready');\n              } else {\n                console.warn('Stored keys failed validation test');\n                await generateAndStoreNewKeys(deviceIdentifier);\n              }\n            } catch (testError) {\n              console.error('Error testing stored keys:', testError);\n              await generateAndStoreNewKeys(deviceIdentifier);\n            }\n          } else {\n            console.warn('Stored keys are incomplete');\n            await generateAndStoreNewKeys(deviceIdentifier);\n          }\n        } catch (parseError) {\n          console.error('Error parsing stored keys:', parseError);\n          await generateAndStoreNewKeys(deviceIdentifier);\n        }\n      } else {\n        // No stored keys, generate new ones\n        await generateAndStoreNewKeys(deviceIdentifier);\n      }\n    } catch (error) {\n      console.error('Error initializing encryption:', error);\n      setEncryptionStatus('error');\n      setSecurityAlert({\n        username: 'System',\n        message: 'Failed to initialize encryption. Messages will not be secure.',\n        type: 'error'\n      });\n      setEncryptionEnabled(false);\n    }\n  };\n\n  // Generate and store new keys\n  const generateAndStoreNewKeys = async deviceIdentifier => {\n    try {\n      console.log('Generating new encryption keys...');\n      const newKeyPair = await generateKeyPair();\n      setKeyPair(newKeyPair);\n\n      // Store keys in localStorage\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\n      console.log('Generated and stored new encryption keys');\n      setEncryptionStatus('ready');\n    } catch (error) {\n      console.error('Error generating new keys:', error);\n      throw error;\n    }\n  };\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, {\n        timeout: 5000\n      });\n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n\n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    tempSocket.on('connect_error', err => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n    }\n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        clearTimeout(recipientCheckTimeoutRef.current);\n        clearTimeout(typingTimeoutRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n  useEffect(() => {\n    if (connected && socketRef.current) {\n      const fetchRelayInfo = () => {\n        console.log('Fetching relay info...');\n\n        // First try to get relay info directly from the socket\n        socketRef.current.emit('getRelayInfo', {}, info => {\n          if (info && info.relayId) {\n            console.log('Received relay info from socket:', info);\n            // Update relay server information\n            setRelayServerUrl(info.relayId);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: info.relayId,\n              relayStatus: info.status || 'connected',\n              connectedUsers: info.connectedUsers,\n              ip: info.ip,\n              port: info.port\n            }));\n\n            // Show connection info automatically on first connect\n            if (!showConnectionInfo) {\n              setShowConnectionInfo(true);\n\n              // Auto-hide after 5 seconds\n              setTimeout(() => {\n                setShowConnectionInfo(false);\n              }, 5000);\n            }\n          } else {\n            console.warn('No relay info received from socket, checking with base node');\n\n            // If we're connected to the base node, try to get our relay assignment\n            socketRef.current.emit('getMyRelayInfo', {\n              username\n            }, relayInfo => {\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\n                console.log('Received relay assignment from base node:', relayInfo);\n                if (relayInfo.isDirect) {\n                  // We're directly connected to the base node\n                  setRelayServerUrl('Direct to Base Node');\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: 'direct',\n                    relayStatus: 'direct_to_base'\n                  }));\n                } else {\n                  // We're assigned to a relay\n                  setRelayServerUrl(relayInfo.relayId);\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: relayInfo.relayId,\n                    relayStatus: 'assigned_by_base'\n                  }));\n                }\n              } else {\n                console.warn('No relay assignment from base node, assuming direct connection');\n\n                // If we can't get relay info, we're probably directly connected to the base node\n                const socketId = socketRef.current.id;\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\n                setConnectionDetails(prev => ({\n                  ...prev,\n                  relayId: 'direct',\n                  relayStatus: 'direct_to_base'\n                }));\n              }\n            });\n          }\n        });\n      };\n\n      // Get relay info immediately and then every 10 seconds\n      fetchRelayInfo();\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\n      return () => clearInterval(relayInfoInterval);\n    }\n  }, [connected, showConnectionInfo, username]);\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    // Always connect to base node first for handshake and relay discovery\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\n    setStatus('Connecting to base node for handshake...');\n\n    // Connect to base node\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n\n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node for handshake');\n      setRelayStatus('online');\n\n      // When connecting to the base node, set the relay information accordingly\n      setRelayServerUrl(`Base Node (Handshake)`);\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL,\n        relayId: 'base_handshake',\n        relayStatus: 'handshake'\n      });\n\n      // Get available relays first\n      socketRef.current.emit('getAvailableRelays', {}, response => {\n        console.log('Available relays:', response);\n        if (response && response.relays && response.relays.length > 0) {\n          // Cache relay information\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\n            timestamp: Date.now(),\n            relays: response.relays\n          }));\n\n          // Register with base node temporarily\n          registerWithBaseNode(() => {\n            // After successful registration, connect to a relay\n            connectToRelay(response.relays);\n          });\n        } else {\n          // No relays available, register directly with base node\n          registerWithBaseNode(() => {\n            // Set UI to indicate we're using base node as fallback\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            setStatus('Using Base Node as fallback (no relays available)');\n\n            // Start polling for available relays\n            startRelayPolling();\n          });\n        }\n      });\n    });\n    const registerWithBaseNode = callback => {\n      // Register with base node\n      socketRef.current.emit('registerUser', {\n        username,\n        deviceId\n      }, response => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully with base node');\n\n          // Set up socket event handlers\n          connectSocketEvents();\n\n          // Get initial data\n          getOnlineUsers();\n          startPingInterval();\n\n          // Execute callback if provided\n          if (callback && typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`,\n            type: 'error'\n          });\n        }\n      });\n    };\n    socketRef.current.on('connect_error', err => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n\n      // Try to use cached relays if available\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\n      let cachedRelays = [];\n      if (cachedRelayInfo) {\n        try {\n          const parsedCache = JSON.parse(cachedRelayInfo);\n          if (parsedCache.timestamp && Date.now() - parsedCache.timestamp < 3600000) {\n            // Cache valid for 1 hour\n            cachedRelays = parsedCache.relays || [];\n            console.log('Using cached relay information:', cachedRelays);\n            if (cachedRelays.length > 0) {\n              setTimeout(() => {\n                connectToRelay(cachedRelays);\n              }, 1000);\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing cached relay info:', error);\n        }\n      }\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n\n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect' && connected) {\n        setTimeout(() => {\n          if (connected) {\n            // Try to reconnect to base node first\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n  };\n\n  // Function to connect to a relay server\n  const connectToRelay = relays => {\n    if (!relays || !relays.length) {\n      console.log('No relays available to connect to');\n      return;\n    }\n\n    // Use the first available relay\n    const relay = relays[0];\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\n    console.log(`Switching to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay server: ${relay.id}...`);\n\n    // Disconnect from base node first\n    if (socketRef.current) {\n      // Keep a reference to the old socket for cleanup\n      const oldSocket = socketRef.current;\n\n      // Create new socket for relay\n      socketRef.current = io(relayUrl, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 2000,\n        forceNew: true\n      });\n\n      // Set a timeout to disconnect from base node after relay connection is established\n      const relayConnectionTimeout = setTimeout(() => {\n        if (!socketRef.current || !socketRef.current.connected) {\n          console.log('Relay connection timed out, staying with base node');\n          socketRef.current = oldSocket; // Restore old socket\n          setStatus('Using Base Node (relay connection failed)');\n          setRelayServerUrl('Base Node (Fallback)');\n          setConnectionDetails(prev => ({\n            ...prev,\n            relayId: 'direct',\n            relayStatus: 'direct_to_base'\n          }));\n\n          // Start polling for available relays\n          startRelayPolling();\n        }\n      }, 5000);\n      socketRef.current.on('connect', () => {\n        clearTimeout(relayConnectionTimeout);\n        console.log(`Connected to relay server: ${relayUrl}`);\n\n        // Register with the relay\n        socketRef.current.emit('register', {\n          username,\n          deviceId\n        }, response => {\n          if (response && response.success) {\n            console.log('Successfully registered with relay');\n\n            // Now we can safely disconnect from the base node\n            oldSocket.disconnect();\n            setStatus(`Connected to relay server: ${relay.id}`);\n            setRelayServerUrl(relay.id);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: relay.id,\n              socketId: socketRef.current.id,\n              transport: socketRef.current.io.engine.transport.name,\n              relayStatus: 'connected_to_relay'\n            }));\n\n            // Set up socket event handlers\n            connectSocketEvents();\n\n            // Start ping interval\n            startPingInterval();\n\n            // Show connection info automatically\n            setShowConnectionInfo(true);\n            setTimeout(() => {\n              setShowConnectionInfo(false);\n            }, 5000);\n          } else {\n            console.error('Failed to register with relay:', response);\n            setStatus('Failed to register with relay server');\n\n            // Disconnect from relay and stay with base node\n            socketRef.current.disconnect();\n            socketRef.current = oldSocket;\n            setStatus('Using Base Node (relay registration failed)');\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n\n            // Start polling for available relays\n            startRelayPolling();\n          }\n        });\n      });\n      socketRef.current.on('connect_error', err => {\n        clearTimeout(relayConnectionTimeout);\n        console.error(`Relay connection error: ${err.message}`);\n\n        // Stay with base node\n        socketRef.current = oldSocket;\n        setStatus('Using Base Node (relay connection error)');\n        setRelayServerUrl('Base Node (Fallback)');\n        setConnectionDetails(prev => ({\n          ...prev,\n          relayId: 'direct',\n          relayStatus: 'direct_to_base'\n        }));\n\n        // Start polling for available relays\n        startRelayPolling();\n      });\n      socketRef.current.on('disconnect', reason => {\n        console.log(`Disconnected from relay: ${reason}`);\n\n        // If we were previously connected to a relay and lost connection\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\n          setStatus(`Disconnected from relay: ${reason}`);\n\n          // Try to reconnect to base node\n          setTimeout(() => {\n            if (connected) {\n              connectToBaseNode();\n            }\n          }, 1000);\n        }\n      });\n    }\n  };\n\n  // Function to periodically poll for available relays when using base node as fallback\n  const startRelayPolling = () => {\n    // Clear any existing polling interval\n    if (window.relayPollingInterval) {\n      clearInterval(window.relayPollingInterval);\n    }\n\n    // Set up polling interval\n    window.relayPollingInterval = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected && connectionDetails.relayStatus === 'direct_to_base') {\n        console.log('Polling for available relays...');\n        socketRef.current.emit('getAvailableRelays', {}, response => {\n          if (response && response.relays && response.relays.length > 0) {\n            console.log('Found available relays:', response.relays);\n\n            // Cache relay information\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\n              timestamp: Date.now(),\n              relays: response.relays\n            }));\n\n            // Connect to a relay\n            connectToRelay(response.relays);\n\n            // Clear polling interval\n            clearInterval(window.relayPollingInterval);\n          } else {\n            console.log('No relays available, continuing to use base node');\n          }\n        });\n      }\n    }, 30000); // Poll every 30 seconds\n\n    // Clean up on component unmount\n    return () => {\n      if (window.relayPollingInterval) {\n        clearInterval(window.relayPollingInterval);\n      }\n    };\n  };\n  const connectSocketEvents = () => {\n    // Message handling\n    socketRef.current.on('receiveMessage', async data => {\n      console.log('Received message:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp,\n        encrypted,\n        publicKey,\n        bounced\n      } = data;\n\n      // Store sender's public key if provided\n      if (publicKey && from) {\n        console.log(`Storing public key for ${from}`);\n        setPublicKeys(prev => ({\n          ...prev,\n          [from]: publicKey\n        }));\n      }\n\n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`,\n          type: 'warning'\n        });\n      }\n      let decryptedMessage = message;\n      let decryptionStatus = 'plaintext';\n\n      // Decrypt the message if it's encrypted and we have our private key\n      if (encrypted && keyPair !== null && keyPair !== void 0 && keyPair.privateKey) {\n        try {\n          console.log('Decrypting message...');\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\n          decryptionStatus = 'decrypted';\n          console.log('Message decrypted successfully');\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\n          decryptionStatus = 'failed';\n          setSecurityAlert({\n            username: 'System',\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\n            type: 'warning'\n          });\n        }\n      }\n      setMessages(msgs => [...msgs, {\n        from,\n        message: decryptedMessage,\n        fromDeviceId,\n        timestamp: new Date(timestamp || new Date()),\n        encrypted,\n        decryptionStatus,\n        bounced\n      }]);\n    });\n\n    // Handle public key requests\n    socketRef.current.on('publicKeyRequest', ({\n      from\n    }, ack) => {\n      console.log(`Public key requested by ${from}`);\n      if (keyPair && keyPair.publicKey) {\n        console.log(`Sending public key to ${from}`);\n        if (ack) ack({\n          success: true,\n          publicKey: keyPair.publicKey\n        });\n      } else {\n        console.warn('No public key available to share');\n        if (ack) ack({\n          success: false,\n          reason: 'Public key not available'\n        });\n      }\n    });\n\n    // User status updates\n    socketRef.current.on('userStatusUpdate', data => {\n      console.log('User status update:', data);\n      const {\n        username: user,\n        online\n      } = data;\n\n      // If this is our current recipient, update their status\n      if (user === recipient) {\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\n        setRecipientStatus(prev => ({\n          ...prev,\n          exists: true,\n          // If we got a status update, the user definitely exists\n          online,\n          notRegisteredYet: false // Clear this flag since we know the user exists\n        }));\n      }\n\n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          console.log(`Adding ${user} to online users list`);\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          console.log(`Removing ${user} from online users list`);\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n\n      // If we're currently checking a recipient, refresh their status\n      if (recipient) {\n        checkRecipientStatus();\n      }\n    });\n\n    // Handle bulk online users updates\n    socketRef.current.on('onlineUsersUpdate', data => {\n      console.log('Online users update:', data);\n      if (data && Array.isArray(data.users)) {\n        setOnlineUsers(data.users);\n\n        // If we have a recipient, check if they're in the online users list\n        if (recipient && data.users.includes(recipient)) {\n          setRecipientStatus(prev => ({\n            ...prev,\n            exists: true,\n            online: true,\n            notRegisteredYet: false\n          }));\n        } else if (recipient) {\n          // If recipient is not in the online users list, refresh their status\n          checkRecipientStatus();\n        }\n      }\n    });\n\n    // Typing indicators\n    socketRef.current.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n\n    // Error handling\n    socketRef.current.on('error', error => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`,\n        type: 'error'\n      });\n    });\n  };\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, users => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        // Send ping to keep connection alive\n        socketRef.current.emit('ping', {}, response => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n\n        // Also refresh online users list\n        getOnlineUsers();\n\n        // If we have a recipient, check their status\n        if (recipient) {\n          checkRecipientStatus();\n        }\n      }\n    }, 30000); // Every 30 seconds\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient || !socketRef.current) {\n      setRecipientStatus({\n        exists: false,\n        online: false,\n        checking: false\n      });\n      return;\n    }\n    console.log(`Checking status for recipient: ${recipient}`);\n\n    // Set status to checking while we wait for the response\n    setRecipientStatus(prev => ({\n      ...prev,\n      checking: true\n    }));\n\n    // Set a timeout to clear the checking status if we don't get a response\n    const checkingTimeout = setTimeout(() => {\n      setRecipientStatus(prev => {\n        if (prev.checking) {\n          return {\n            ...prev,\n            checking: false\n          };\n        }\n        return prev;\n      });\n    }, 3000); // 3 seconds timeout\n\n    // First check if the recipient is in the online users list\n    if (onlineUsers.includes(recipient)) {\n      clearTimeout(checkingTimeout);\n      console.log(`${recipient} found in online users list`);\n      setRecipientStatus({\n        exists: true,\n        online: true,\n        checking: false\n      });\n      return;\n    }\n\n    // If we're connected to a relay, use the checkRecipient event\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\n      socketRef.current.emit('checkRecipient', {\n        username: recipient\n      }, relayResponse => {\n        clearTimeout(checkingTimeout);\n        console.log('Relay recipient check response:', relayResponse);\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\n          // Only update if we got a valid response\n          setRecipientStatus({\n            ...relayResponse,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    } else {\n      // If connected directly to base node, use checkUser\n      socketRef.current.emit('checkUser', {\n        username: recipient\n      }, response => {\n        clearTimeout(checkingTimeout);\n        console.log('Base node recipient check response:', response);\n\n        // If we got a valid response, use it\n        if (response && typeof response.exists === 'boolean') {\n          setRecipientStatus({\n            ...response,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    }\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleUsernameSubmit = async e => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      setIsCheckingUsername(true);\n      const tempSocket = io(BASE_NODE_URL, {\n        forceNew: true,\n        timeout: 5000\n      });\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', {\n          username: username.trim()\n        }, response => {\n          setIsCheckingUsername(false);\n          if (response && response.exists) {\n            setUsernameAvailable(false);\n            setSecurityAlert({\n              username: 'System',\n              message: `Username \"${username}\" is already taken.`,\n              type: 'error'\n            });\n            // Explicitly disconnect and do NOT set connected to true\n            tempSocket.disconnect();\n          } else {\n            setUsernameAvailable(true);\n            setConnected(true);\n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', error => {\n        console.error('Connection error during username check:', error);\n        setIsCheckingUsername(false);\n        setSecurityAlert({\n          username: 'System',\n          message: 'Could not verify username. Base node may be offline.',\n          type: 'error'\n        });\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        username: 'System',\n        message: 'Cannot connect: Base node is offline',\n        type: 'error'\n      });\n    }\n  };\n  const handleRecipientChange = e => {\n    const newRecipient = e.target.value.trim();\n    setRecipient(newRecipient);\n\n    // Reset recipient status when the recipient changes\n    setRecipientStatus({\n      exists: false,\n      online: false,\n      checking: false\n    });\n\n    // If the recipient is not empty, check their status\n    if (newRecipient && socketRef.current) {\n      // Use a small delay to avoid too many checks while typing\n      if (recipientCheckTimeoutRef.current) {\n        clearTimeout(recipientCheckTimeoutRef.current);\n      }\n      recipientCheckTimeoutRef.current = setTimeout(() => {\n        checkRecipientStatus();\n      }, 500); // 500ms delay\n    }\n  };\n  const handleSend = async (e, bounce = false) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    try {\n      // Show sending indicator\n      setStatus('Sending message...');\n\n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\n      if (!bounce) {\n        // For direct messages, we need to check if the recipient exists and is online\n        const recipientOnline = recipientStatus.online;\n\n        // If recipient is not online, suggest using relay\n        if (!recipientOnline) {\n          setSecurityAlert({\n            username: 'System',\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\n            type: 'warning'\n          });\n          setStatus('Registered successfully');\n          return;\n        }\n      }\n\n      // Get recipient's public key if we don't have it and encryption is enabled\n      if (encryptionEnabled && !publicKeys[recipient]) {\n        try {\n          await requestPublicKey(recipient);\n        } catch (error) {\n          console.error('Failed to get public key:', error);\n          // Continue without encryption if we can't get the key\n        }\n      }\n      let finalMessage = message.trim();\n      let isEncrypted = false;\n\n      // Encrypt the message if encryption is enabled and we have the recipient's public key\n      if (encryptionEnabled && publicKeys[recipient]) {\n        try {\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\n          isEncrypted = true;\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          setSecurityAlert({\n            username: 'System',\n            message: 'Failed to encrypt message. Sending as plaintext.',\n            type: 'warning'\n          });\n        }\n      }\n      const messageData = {\n        to: recipient,\n        message: finalMessage,\n        deviceId,\n        timestamp: new Date().toISOString(),\n        bounce: bounce,\n        // Always use the bounce parameter directly\n        encrypted: isEncrypted,\n        publicKey: keyPair === null || keyPair === void 0 ? void 0 : keyPair.publicKey // Send our public key with the message\n      };\n      console.log('Sending message:', {\n        ...messageData,\n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\n        bounce: bounce\n      });\n\n      // Add a timeout to handle cases where the server doesn't respond\n      const messageTimeout = setTimeout(() => {\n        setSecurityAlert({\n          username: 'System',\n          message: 'Message sending timed out. Server may be offline.',\n          type: 'error'\n        });\n        setStatus('Registered successfully');\n      }, 10000);\n      socketRef.current.emit('sendMessage', messageData, response => {\n        clearTimeout(messageTimeout);\n        console.log('Send message response:', response);\n        setStatus('Registered successfully');\n        if (response && (response.delivered || response.bounced)) {\n          // Add message to local state (store original message for display)\n          setMessages(msgs => [...msgs, {\n            from: username,\n            message: message.trim(),\n            // Store original message for display\n            fromDeviceId: deviceId,\n            timestamp: new Date(),\n            status: response.delivered ? 'delivered' : 'bounced',\n            expiresAt: response.expiresAt,\n            encrypted: isEncrypted\n          }]);\n          setMessage('');\n\n          // Show notification if message was bounced\n          if (response.bounced) {\n            setSecurityAlert({\n              username: 'System',\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\n              type: 'info'\n            });\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Message delivery failed';\n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\n            if (bounce) {\n              // For bounced messages to non-existent users, show a special message\n              setSecurityAlert({\n                username: 'System',\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\n                type: 'info'\n              });\n\n              // Add message to local state as bounced\n              setMessages(msgs => [...msgs, {\n                from: username,\n                message: message.trim(),\n                fromDeviceId: deviceId,\n                timestamp: new Date(),\n                status: 'bounced',\n                expiresAt: Date.now() + 14400000,\n                // 4 hours\n                encrypted: isEncrypted\n              }]);\n              setMessage('');\n            } else {\n              setSecurityAlert({\n                username: 'System',\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\n                type: 'warning'\n              });\n            }\n          } else if (errorMsg.includes('offline')) {\n            setSecurityAlert({\n              username: 'System',\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\n              type: 'warning'\n            });\n          } else {\n            setSecurityAlert({\n              username: 'System',\n              message: `Failed to send message: ${errorMsg}`,\n              type: 'error'\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error sending message: ${error.message}`,\n        type: 'error'\n      });\n      setStatus('Registered successfully');\n    }\n  };\n\n  // Request public key from a user\n  const requestPublicKey = async username => {\n    return new Promise((resolve, reject) => {\n      if (!socketRef.current) {\n        reject(new Error('Not connected'));\n        return;\n      }\n      console.log(`Requesting public key for ${username}...`);\n\n      // Set a timeout in case the server doesn't respond\n      const requestTimeout = setTimeout(() => {\n        console.error(`Public key request for ${username} timed out`);\n        reject(new Error('Request timed out'));\n      }, 10000);\n      socketRef.current.emit('requestPublicKey', {\n        username\n      }, response => {\n        clearTimeout(requestTimeout);\n        if (response && response.success && response.publicKey) {\n          console.log(`Received public key for ${username}`);\n          setPublicKeys(prev => ({\n            ...prev,\n            [username]: response.publicKey\n          }));\n          resolve(response.publicKey);\n        } else {\n          const reason = (response === null || response === void 0 ? void 0 : response.reason) || 'Public key not available';\n          console.log(`No public key available for ${username}: ${reason}`);\n          reject(new Error(reason));\n        }\n      });\n    });\n  };\n\n  // Handle relay bounce for any user\n  const handleRelayBounce = e => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n\n    // Show confirmation before bouncing\n    const confirmBounce = window.confirm(`RELAY MESSAGE\\n\\n` + `Your message to \"${recipient}\" will be stored on ${connectionDetails.relayStatus === 'connected_to_relay' ? 'relay' : 'base node'} servers for up to 4 hours.\\n\\n` + `It will be delivered when ${recipient} comes online or registers with the network.\\n\\n` + `Continue?`);\n    if (confirmBounce) {\n      handleSend(e, true);\n    }\n  };\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n\n    // Send typing indicator\n    if (socketRef.current && recipient && e.target.value.length > 0) {\n      socketRef.current.emit('typing', {\n        to: recipient\n      });\n    }\n  };\n  const handleDisconnect = () => {\n    if (socketRef.current) {\n      // Notify the server that we're intentionally disconnecting\n      socketRef.current.emit('userLogout', {\n        username,\n        deviceId\n      }, () => {\n        console.log('Sent logout notification to server');\n\n        // Now disconnect\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      });\n    }\n\n    // Clear local state\n    setConnected(false);\n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({\n      exists: false,\n      online: false\n    });\n    setStatus('Disconnected');\n    setRelayStatus('offline');\n    clearInterval(pingIntervalRef.current);\n  };\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  const formatMessageTime = timestamp => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#0a0e14',\n      minHeight: '100vh',\n      width: '100vw',\n      height: '100vh',\n      color: '#a2aabc',\n      display: 'flex',\n      flexDirection: 'column',\n      fontFamily: '\"Fira Code\", monospace',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#171c28',\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          padding: '16px 24px',\n          borderBottom: '1px solid #1e2d3d'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: 0,\n            color: '#5ccfe6',\n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          },\n          children: \"WhisperNet_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 12,\n            padding: '4px 8px',\n            borderRadius: 4,\n            background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n            color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n            cursor: 'pointer'\n          },\n          onClick: () => setShowConnectionInfo(!showConnectionInfo),\n          children: relayStatus === 'online' ? 'Base Node Online' : relayStatus === 'checking' ? 'Checking...' : 'Base Node Offline'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 9\n      }, this), showConnectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#0d1117',\n          padding: '8px 24px',\n          fontSize: 12,\n          fontFamily: 'monospace',\n          borderBottom: '1px solid #1e2d3d',\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '8px 24px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1373,\n          columnNumber: 13\n        }, this), connected && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Socket ID: \", connectionDetails.socketId || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Transport: \", connectionDetails.transport || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1377,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Base Node: \", connectionDetails.baseNodeUrl || BASE_NODE_URL]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1378,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#5ccfe6'\n              },\n              children: relayServerUrl || 'Unknown'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1379,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1379,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40'\n              },\n              children: connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1380,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1380,\n            columnNumber: 17\n          }, this), connectionDetails.connectedUsers !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Users on Relay: \", connectionDetails.connectedUsers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1389,\n            columnNumber: 19\n          }, this), connectionDetails.ip && connectionDetails.port && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Address: \", connectionDetails.ip, \":\", connectionDetails.port]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1392,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Base Node Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            },\n            children: relayStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1396,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1396,\n          columnNumber: 13\n        }, this), deviceId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Device ID: \", deviceId.substring(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1399,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 11\n      }, this), securityAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#4b1c1c',\n          color: '#ff8f40',\n          padding: '12px 24px',\n          borderBottom: '1px solid #1e2d3d',\n          position: 'relative',\n          fontSize: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 20\n          },\n          children: securityAlert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1412,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            position: 'absolute',\n            top: 12,\n            right: 24,\n            background: 'none',\n            border: 'none',\n            color: '#ff8f40',\n            cursor: 'pointer',\n            fontSize: 16\n          },\n          onClick: dismissAlert,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1413,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1404,\n        columnNumber: 11\n      }, this), !connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: '0 24px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxWidth: '400px',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 16,\n              fontSize: 14,\n              color: '#5ccfe6'\n            },\n            children: [getTimestamp(), \" Initializing secure connection...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1444,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleUsernameSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                width: '100%',\n                padding: 10,\n                marginBottom: 12,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 16,\n                fontFamily: '\"Fira Code\", monospace',\n                boxSizing: 'border-box'\n              },\n              placeholder: \"Enter username\",\n              value: username,\n              onChange: e => {\n                setUsername(e.target.value);\n                setUsernameAvailable(true);\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1448,\n              columnNumber: 17\n            }, this), !usernameAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: '#ff8f40',\n                fontSize: 12,\n                marginTop: -8,\n                marginBottom: 8\n              },\n              children: \"Username not available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1469,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                width: '100%',\n                padding: 10,\n                borderRadius: 4,\n                background: relayStatus === 'online' ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n                color: '#171c28',\n                fontWeight: 'bold',\n                fontSize: 16,\n                border: 'none',\n                cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              type: \"submit\",\n              disabled: relayStatus !== 'online' || isCheckingUsername,\n              children: isCheckingUsername ? 'CHECKING...' : relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1470,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1447,\n            columnNumber: 15\n          }, this), relayStatus !== 'online' && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '100%',\n              padding: 8,\n              marginTop: 8,\n              borderRadius: 4,\n              background: '#4b1c1c',\n              color: '#ff8f40',\n              fontSize: 14,\n              border: 'none',\n              cursor: 'pointer',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            onClick: retryConnection,\n            children: \"RETRY CONNECTION\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1492,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 12,\n              color: '#ff3333',\n              textAlign: 'center',\n              fontSize: 14\n            },\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1510,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1440,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1432,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n          padding: '0 24px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSend,\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            padding: '16px 0'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginBottom: 8\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Recipient username\",\n              value: recipient,\n              onChange: handleRecipientChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1529,\n              columnNumber: 17\n            }, this), recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                marginLeft: 8,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 8,\n                  height: 8,\n                  borderRadius: '50%',\n                  background: recipientStatus.online ? '#bae67e' : recipientStatus.exists ? '#ff8f40' : '#ff3333',\n                  marginRight: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1553,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 12,\n                  color: recipientStatus.online ? '#bae67e' : recipientStatus.exists ? '#ff8f40' : '#ff3333'\n                },\n                children: recipientStatus.online ? 'ONLINE' : 'OFFLINE'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1561,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1547,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1528,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Type a message\",\n              value: message,\n              onChange: handleMessageChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1572,\n              columnNumber: 17\n            }, this), recipient ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  padding: '0 18px',\n                  borderRadius: '4px 0 0 4px',\n                  background: recipientStatus.online ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n                  color: '#171c28',\n                  fontWeight: 'bold',\n                  fontSize: 14,\n                  border: 'none',\n                  cursor: recipientStatus.online ? 'pointer' : 'not-allowed',\n                  fontFamily: '\"Fira Code\", monospace'\n                },\n                type: \"submit\",\n                disabled: !recipientStatus.online,\n                title: recipientStatus.online ? \"Send message directly\" : \"User is offline or not found\",\n                children: \"SEND\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1592,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  padding: '0 12px',\n                  borderRadius: '0 4px 4px 0',\n                  background: '#4b1c1c',\n                  color: '#ff8f40',\n                  fontWeight: 'bold',\n                  fontSize: 14,\n                  border: 'none',\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace',\n                  display: 'flex',\n                  alignItems: 'center'\n                },\n                onClick: handleRelayBounce,\n                title: \"Message will be stored on relay servers for up to 4 hours\",\n                children: [\"RELAY\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    fontSize: 10,\n                    marginLeft: 4,\n                    background: 'rgba(255, 143, 64, 0.2)',\n                    padding: '1px 3px',\n                    borderRadius: 2\n                  },\n                  children: \"4h\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1632,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1614,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1590,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '0 18px',\n                borderRadius: 4,\n                background: '#636b78',\n                color: '#171c28',\n                fontWeight: 'bold',\n                fontSize: 14,\n                border: 'none',\n                cursor: 'not-allowed',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              disabled: true,\n              children: \"SEND\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1644,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1571,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1523,\n          columnNumber: 13\n        }, this), typing && recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 12,\n            color: '#5ccfe6',\n            marginBottom: 8\n          },\n          children: [recipient, \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1665,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#0d1117',\n            borderRadius: 4,\n            padding: 12,\n            flex: 1,\n            overflowY: 'auto',\n            marginBottom: 12,\n            border: '1px solid #1e2d3d',\n            fontFamily: 'monospace'\n          },\n          children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: '#5ccfe6',\n              fontSize: 14\n            },\n            children: [getTimestamp(), \" Connection established. Awaiting transmission...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1681,\n            columnNumber: 17\n          }, this) : messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 12,\n              padding: 8,\n              borderRadius: 4,\n              background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\n              borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: 4,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: msg.from === username ? '#5ccfe6' : '#bae67e',\n                  fontWeight: 'bold'\n                },\n                children: [msg.from === username ? 'YOU' : msg.from, msg.bounced && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: '#ff8f40',\n                    marginLeft: 6\n                  },\n                  children: \"(bounced)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1704,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1699,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#636b78'\n                },\n                children: formatMessageTime(msg.timestamp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1706,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1693,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                wordBreak: 'break-word',\n                fontSize: 14\n              },\n              children: msg.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1708,\n              columnNumber: 21\n            }, this), msg.status === 'bounced' && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 10,\n                color: '#ff8f40',\n                marginTop: 4,\n                fontStyle: 'italic'\n              },\n              children: \"Message will be delivered when recipient comes online (expires in 4 hours)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1710,\n              columnNumber: 23\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1686,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1722,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1670,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            padding: '8px 0 16px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              padding: '8px 16px',\n              borderRadius: 4,\n              background: '#4b1c1c',\n              color: '#ff8f40',\n              fontSize: 14,\n              border: 'none',\n              cursor: 'pointer',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            onClick: handleDisconnect,\n            children: \"DISCONNECT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1726,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              color: '#636b78',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: 8,\n                height: 8,\n                borderRadius: '50%',\n                background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                marginRight: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1748,\n              columnNumber: 17\n            }, this), status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1742,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1725,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1516,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1329,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1318,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CtxKXeQHcyPuPVyOgPLQx6q2j1k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","axios","FingerprintJS","ChatManager","jsxDEV","_jsxDEV","Fragment","_Fragment","BASE_NODE_URL","process","env","REACT_APP_BASE_NODE_URL","generateKeyPair","keyPair","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","publicKey","exportKey","privateKey","error","console","encryptMessage","message","publicKeyJwk","importKey","encoder","TextEncoder","data","encode","encryptedData","encrypt","btoa","String","fromCharCode","decryptMessage","encryptedMessage","privateKeyJwk","from","atob","c","charCodeAt","decryptedData","decrypt","decoder","TextDecoder","decode","fpPromise","load","App","_s","username","setUsername","recipient","setRecipient","setMessage","messages","setMessages","connected","setConnected","status","setStatus","deviceId","setDeviceId","connectionDetails","setConnectionDetails","showConnectionInfo","setShowConnectionInfo","securityAlert","setSecurityAlert","typing","setTyping","relayServerUrl","setRelayServerUrl","relayStatus","setRelayStatus","onlineUsers","setOnlineUsers","recipientStatus","setRecipientStatus","exists","online","isCheckingUsername","setIsCheckingUsername","usernameAvailable","setUsernameAvailable","setKeyPair","publicKeys","setPublicKeys","encryptionEnabled","setEncryptionEnabled","encryptionStatus","setEncryptionStatus","socketRef","messagesEndRef","typingTimeoutRef","pingIntervalRef","recipientCheckTimeoutRef","initializeDevice","fp","result","get","visitorId","initializeEncryption","fallbackId","Math","random","toString","substr","deviceIdentifier","storedKeys","localStorage","getItem","parsedKeys","JSON","parse","testMessage","Date","now","encrypted","decrypted","log","warn","generateAndStoreNewKeys","testError","parseError","type","newKeyPair","setItem","stringify","checkRelayStatus","response","timeout","tempSocket","transports","reconnectionAttempts","reconnectionDelay","forceNew","connectionTimeout","setTimeout","disconnect","on","clearTimeout","err","connectToBaseNode","current","clearInterval","fetchRelayInfo","emit","info","relayId","prev","connectedUsers","ip","port","relayInfo","success","isDirect","socketId","id","substring","relayInfoInterval","setInterval","query","transport","engine","baseNodeUrl","relays","length","timestamp","registerWithBaseNode","connectToRelay","startRelayPolling","callback","connectSocketEvents","getOnlineUsers","startPingInterval","errorMsg","reason","cachedRelayInfo","cachedRelays","parsedCache","relay","relayUrl","startsWith","oldSocket","relayConnectionTimeout","relayPollingInterval","fromDeviceId","bounced","previousMessages","filter","msg","decryptedMessage","decryptionStatus","msgs","ack","user","notRegisteredYet","includes","u","checkRecipientStatus","Array","isArray","users","typingUser","checking","checkingTimeout","relayResponse","timeoutId","_messagesEndRef$curre","scrollIntoView","behavior","handleUsernameSubmit","e","preventDefault","trim","handleRecipientChange","newRecipient","target","value","handleSend","bounce","recipientOnline","requestPublicKey","finalMessage","isEncrypted","messageData","to","toISOString","messageTimeout","delivered","expiresAt","Promise","resolve","reject","Error","requestTimeout","handleRelayBounce","confirmBounce","confirm","handleMessageChange","handleDisconnect","dismissAlert","retryConnection","getTimestamp","getHours","padStart","getMinutes","getSeconds","formatMessageTime","date","style","background","minHeight","width","height","color","display","flexDirection","fontFamily","overflow","children","flex","justifyContent","alignItems","padding","borderBottom","margin","letterSpacing","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","borderRadius","cursor","onClick","flexWrap","gap","undefined","position","marginRight","top","right","border","maxWidth","marginBottom","onSubmit","boxSizing","placeholder","onChange","required","marginTop","fontWeight","disabled","textAlign","marginLeft","title","overflowY","map","i","borderLeft","wordBreak","fontStyle","ref","_c","$RefreshReg$"],"sources":["C:/Users/siddharth/Documents/GitHub/WhisperNet/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport ChatManager from './components/ChatManager';\n\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Encryption utilities\nconst generateKeyPair = async () => {\n  try {\n    const keyPair = await window.crypto.subtle.generateKey(\n      {\n        name: \"RSA-OAEP\",\n        modulusLength: 2048,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n      },\n      true,\n      [\"encrypt\", \"decrypt\"]\n    );\n    \n    // Export the keys to JWK format\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\n    \n    return { publicKey, privateKey };\n  } catch (error) {\n    console.error('Error generating key pair:', error);\n    throw error;\n  }\n};\n\nconst encryptMessage = async (message, publicKeyJwk) => {\n  try {\n    // Import the public key\n    const publicKey = await window.crypto.subtle.importKey(\n      \"jwk\",\n      publicKeyJwk,\n      {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\",\n      },\n      false,\n      [\"encrypt\"]\n    );\n    \n    // Convert the message to ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n    \n    // Encrypt the data\n    const encryptedData = await window.crypto.subtle.encrypt(\n      {\n        name: \"RSA-OAEP\"\n      },\n      publicKey,\n      data\n    );\n    \n    // Convert the encrypted data to base64\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n  } catch (error) {\n    console.error('Error encrypting message:', error);\n    throw error;\n  }\n};\n\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\n  try {\n    // Import the private key\n    const privateKey = await window.crypto.subtle.importKey(\n      \"jwk\",\n      privateKeyJwk,\n      {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\",\n      },\n      false,\n      [\"decrypt\"]\n    );\n    \n    // Convert the base64 encrypted message to ArrayBuffer\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\n    \n    // Decrypt the data\n    const decryptedData = await window.crypto.subtle.decrypt(\n      {\n        name: \"RSA-OAEP\"\n      },\n      privateKey,\n      encryptedData\n    );\n    \n    // Convert the decrypted data to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n  } catch (error) {\n    console.error('Error decrypting message:', error);\n    return '[Encrypted message - cannot decrypt]';\n  }\n};\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [status, setStatus] = useState('Checking relay status...');\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [typing, setTyping] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\n  const [relayStatus, setRelayStatus] = useState('checking');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [recipientStatus, setRecipientStatus] = useState({ exists: false, online: false });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const recipientCheckTimeoutRef = useRef(null);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeDevice = async () => {\n      try {\n        // Get device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n        \n        // Initialize encryption\n        await initializeEncryption(visitorId);\n      } catch (error) {\n        console.error('Failed to initialize device:', error);\n        // Generate a fallback device ID\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\n        setDeviceId(fallbackId);\n        \n        // Initialize encryption with fallback ID\n        await initializeEncryption(fallbackId);\n      }\n    };\n    \n    initializeDevice();\n  }, []);\n  \n  // Initialize encryption\n  const initializeEncryption = async (deviceIdentifier) => {\n    try {\n      setEncryptionStatus('initializing');\n      \n      // Check if we have keys in localStorage\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\n      \n      if (storedKeys) {\n        // We have stored keys, check if they're valid\n        try {\n          const parsedKeys = JSON.parse(storedKeys);\n          \n          // Validate the keys by testing encryption/decryption\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\n            try {\n              // Test encryption with the stored keys\n              const testMessage = \"test-encryption-\" + Date.now();\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\n              \n              if (decrypted === testMessage) {\n                // Keys are valid\n                setKeyPair(parsedKeys);\n                console.log('Loaded and validated existing encryption keys');\n                setEncryptionStatus('ready');\n              } else {\n                console.warn('Stored keys failed validation test');\n                await generateAndStoreNewKeys(deviceIdentifier);\n              }\n            } catch (testError) {\n              console.error('Error testing stored keys:', testError);\n              await generateAndStoreNewKeys(deviceIdentifier);\n            }\n          } else {\n            console.warn('Stored keys are incomplete');\n            await generateAndStoreNewKeys(deviceIdentifier);\n          }\n        } catch (parseError) {\n          console.error('Error parsing stored keys:', parseError);\n          await generateAndStoreNewKeys(deviceIdentifier);\n        }\n      } else {\n        // No stored keys, generate new ones\n        await generateAndStoreNewKeys(deviceIdentifier);\n      }\n    } catch (error) {\n      console.error('Error initializing encryption:', error);\n      setEncryptionStatus('error');\n      setSecurityAlert({\n        username: 'System',\n        message: 'Failed to initialize encryption. Messages will not be secure.',\n        type: 'error'\n      });\n      setEncryptionEnabled(false);\n    }\n  };\n  \n  // Generate and store new keys\n  const generateAndStoreNewKeys = async (deviceIdentifier) => {\n    try {\n      console.log('Generating new encryption keys...');\n      const newKeyPair = await generateKeyPair();\n      setKeyPair(newKeyPair);\n      \n      // Store keys in localStorage\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\n      \n      console.log('Generated and stored new encryption keys');\n      setEncryptionStatus('ready');\n    } catch (error) {\n      console.error('Error generating new keys:', error);\n      throw error;\n    }\n  };\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    \n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, { \n        timeout: 5000 \n      });\n      \n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n    \n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    \n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    \n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    \n    tempSocket.on('connect_error', (err) => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n    }\n    \n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        clearTimeout(recipientCheckTimeoutRef.current);\n        clearTimeout(typingTimeoutRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n\n  useEffect(() => {\n    if (connected && socketRef.current) {\n      const fetchRelayInfo = () => {\n        console.log('Fetching relay info...');\n        \n        // First try to get relay info directly from the socket\n        socketRef.current.emit('getRelayInfo', {}, (info) => {\n          if (info && info.relayId) {\n            console.log('Received relay info from socket:', info);\n            // Update relay server information\n            setRelayServerUrl(info.relayId);\n            setConnectionDetails(prev => ({ \n              ...prev, \n              relayId: info.relayId,\n              relayStatus: info.status || 'connected',\n              connectedUsers: info.connectedUsers,\n              ip: info.ip,\n              port: info.port\n            }));\n            \n            // Show connection info automatically on first connect\n            if (!showConnectionInfo) {\n              setShowConnectionInfo(true);\n              \n              // Auto-hide after 5 seconds\n              setTimeout(() => {\n                setShowConnectionInfo(false);\n              }, 5000);\n            }\n          } else {\n            console.warn('No relay info received from socket, checking with base node');\n            \n            // If we're connected to the base node, try to get our relay assignment\n            socketRef.current.emit('getMyRelayInfo', { username }, (relayInfo) => {\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\n                console.log('Received relay assignment from base node:', relayInfo);\n                \n                if (relayInfo.isDirect) {\n                  // We're directly connected to the base node\n                  setRelayServerUrl('Direct to Base Node');\n                  setConnectionDetails(prev => ({ \n                    ...prev, \n                    relayId: 'direct',\n                    relayStatus: 'direct_to_base',\n                  }));\n                } else {\n                  // We're assigned to a relay\n                  setRelayServerUrl(relayInfo.relayId);\n                  setConnectionDetails(prev => ({ \n                    ...prev, \n                    relayId: relayInfo.relayId,\n                    relayStatus: 'assigned_by_base',\n                  }));\n                }\n              } else {\n                console.warn('No relay assignment from base node, assuming direct connection');\n                \n                // If we can't get relay info, we're probably directly connected to the base node\n                const socketId = socketRef.current.id;\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\n                setConnectionDetails(prev => ({ \n                  ...prev, \n                  relayId: 'direct',\n                  relayStatus: 'direct_to_base',\n                }));\n              }\n            });\n          }\n        });\n      };\n      \n      // Get relay info immediately and then every 10 seconds\n      fetchRelayInfo();\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\n      \n      return () => clearInterval(relayInfoInterval);\n    }\n  }, [connected, showConnectionInfo, username]);\n\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    \n    // Always connect to base node first for handshake and relay discovery\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\n    setStatus('Connecting to base node for handshake...');\n    \n    // Connect to base node\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: { \n        deviceId,\n        username \n      },\n      forceNew: true\n    });\n    \n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node for handshake');\n      setRelayStatus('online');\n      \n      // When connecting to the base node, set the relay information accordingly\n      setRelayServerUrl(`Base Node (Handshake)`);\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL,\n        relayId: 'base_handshake',\n        relayStatus: 'handshake'\n      });\n      \n      // Get available relays first\n      socketRef.current.emit('getAvailableRelays', {}, (response) => {\n        console.log('Available relays:', response);\n        \n        if (response && response.relays && response.relays.length > 0) {\n          // Cache relay information\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\n            timestamp: Date.now(),\n            relays: response.relays\n          }));\n          \n          // Register with base node temporarily\n          registerWithBaseNode(() => {\n            // After successful registration, connect to a relay\n            connectToRelay(response.relays);\n          });\n        } else {\n          // No relays available, register directly with base node\n          registerWithBaseNode(() => {\n            // Set UI to indicate we're using base node as fallback\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            setStatus('Using Base Node as fallback (no relays available)');\n            \n            // Start polling for available relays\n            startRelayPolling();\n          });\n        }\n      });\n    });\n    \n    const registerWithBaseNode = (callback) => {\n      // Register with base node\n      socketRef.current.emit('registerUser', { \n        username, \n        deviceId \n      }, (response) => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully with base node');\n          \n          // Set up socket event handlers\n          connectSocketEvents();\n          \n          // Get initial data\n          getOnlineUsers();\n          startPingInterval();\n          \n          // Execute callback if provided\n          if (callback && typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = response?.reason || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`,\n            type: 'error'\n          });\n        }\n      });\n    };\n    \n    socketRef.current.on('connect_error', (err) => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n      \n      // Try to use cached relays if available\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\n      let cachedRelays = [];\n      \n      if (cachedRelayInfo) {\n        try {\n          const parsedCache = JSON.parse(cachedRelayInfo);\n          if (parsedCache.timestamp && (Date.now() - parsedCache.timestamp < 3600000)) { // Cache valid for 1 hour\n            cachedRelays = parsedCache.relays || [];\n            console.log('Using cached relay information:', cachedRelays);\n            \n            if (cachedRelays.length > 0) {\n              setTimeout(() => {\n                connectToRelay(cachedRelays);\n              }, 1000);\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing cached relay info:', error);\n        }\n      }\n    });\n    \n    socketRef.current.on('disconnect', (reason) => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n      \n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect' && connected) {\n        setTimeout(() => {\n          if (connected) {\n            // Try to reconnect to base node first\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n  };\n  \n  // Function to connect to a relay server\n  const connectToRelay = (relays) => {\n    if (!relays || !relays.length) {\n      console.log('No relays available to connect to');\n      return;\n    }\n    \n    // Use the first available relay\n    const relay = relays[0];\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\n    \n    console.log(`Switching to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay server: ${relay.id}...`);\n    \n    // Disconnect from base node first\n    if (socketRef.current) {\n      // Keep a reference to the old socket for cleanup\n      const oldSocket = socketRef.current;\n      \n      // Create new socket for relay\n      socketRef.current = io(relayUrl, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 2000,\n        forceNew: true\n      });\n      \n      // Set a timeout to disconnect from base node after relay connection is established\n      const relayConnectionTimeout = setTimeout(() => {\n        if (!socketRef.current || !socketRef.current.connected) {\n          console.log('Relay connection timed out, staying with base node');\n          socketRef.current = oldSocket; // Restore old socket\n          setStatus('Using Base Node (relay connection failed)');\n          setRelayServerUrl('Base Node (Fallback)');\n          setConnectionDetails(prev => ({\n            ...prev,\n            relayId: 'direct',\n            relayStatus: 'direct_to_base'\n          }));\n          \n          // Start polling for available relays\n          startRelayPolling();\n        }\n      }, 5000);\n      \n      socketRef.current.on('connect', () => {\n        clearTimeout(relayConnectionTimeout);\n        console.log(`Connected to relay server: ${relayUrl}`);\n        \n        // Register with the relay\n        socketRef.current.emit('register', { \n          username, \n          deviceId \n        }, (response) => {\n          if (response && response.success) {\n            console.log('Successfully registered with relay');\n            \n            // Now we can safely disconnect from the base node\n            oldSocket.disconnect();\n            \n            setStatus(`Connected to relay server: ${relay.id}`);\n            setRelayServerUrl(relay.id);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: relay.id,\n              socketId: socketRef.current.id,\n              transport: socketRef.current.io.engine.transport.name,\n              relayStatus: 'connected_to_relay'\n            }));\n            \n            // Set up socket event handlers\n            connectSocketEvents();\n            \n            // Start ping interval\n            startPingInterval();\n            \n            // Show connection info automatically\n            setShowConnectionInfo(true);\n            setTimeout(() => {\n              setShowConnectionInfo(false);\n            }, 5000);\n          } else {\n            console.error('Failed to register with relay:', response);\n            setStatus('Failed to register with relay server');\n            \n            // Disconnect from relay and stay with base node\n            socketRef.current.disconnect();\n            socketRef.current = oldSocket;\n            \n            setStatus('Using Base Node (relay registration failed)');\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            \n            // Start polling for available relays\n            startRelayPolling();\n          }\n        });\n      });\n      \n      socketRef.current.on('connect_error', (err) => {\n        clearTimeout(relayConnectionTimeout);\n        console.error(`Relay connection error: ${err.message}`);\n        \n        // Stay with base node\n        socketRef.current = oldSocket;\n        \n        setStatus('Using Base Node (relay connection error)');\n        setRelayServerUrl('Base Node (Fallback)');\n        setConnectionDetails(prev => ({\n          ...prev,\n          relayId: 'direct',\n          relayStatus: 'direct_to_base'\n        }));\n        \n        // Start polling for available relays\n        startRelayPolling();\n      });\n      \n      socketRef.current.on('disconnect', (reason) => {\n        console.log(`Disconnected from relay: ${reason}`);\n        \n        // If we were previously connected to a relay and lost connection\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\n          setStatus(`Disconnected from relay: ${reason}`);\n          \n          // Try to reconnect to base node\n          setTimeout(() => {\n            if (connected) {\n              connectToBaseNode();\n            }\n          }, 1000);\n        }\n      });\n    }\n  };\n  \n  // Function to periodically poll for available relays when using base node as fallback\n  const startRelayPolling = () => {\n    // Clear any existing polling interval\n    if (window.relayPollingInterval) {\n      clearInterval(window.relayPollingInterval);\n    }\n    \n    // Set up polling interval\n    window.relayPollingInterval = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected && \n          connectionDetails.relayStatus === 'direct_to_base') {\n        console.log('Polling for available relays...');\n        \n        socketRef.current.emit('getAvailableRelays', {}, (response) => {\n          if (response && response.relays && response.relays.length > 0) {\n            console.log('Found available relays:', response.relays);\n            \n            // Cache relay information\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\n              timestamp: Date.now(),\n              relays: response.relays\n            }));\n            \n            // Connect to a relay\n            connectToRelay(response.relays);\n            \n            // Clear polling interval\n            clearInterval(window.relayPollingInterval);\n          } else {\n            console.log('No relays available, continuing to use base node');\n          }\n        });\n      }\n    }, 30000); // Poll every 30 seconds\n    \n    // Clean up on component unmount\n    return () => {\n      if (window.relayPollingInterval) {\n        clearInterval(window.relayPollingInterval);\n      }\n    };\n  };\n\n  const connectSocketEvents = () => {\n    // Message handling\n    socketRef.current.on('receiveMessage', async (data) => {\n      console.log('Received message:', data);\n      const { from, message, fromDeviceId, timestamp, encrypted, publicKey, bounced } = data;\n      \n      // Store sender's public key if provided\n      if (publicKey && from) {\n        console.log(`Storing public key for ${from}`);\n        setPublicKeys(prev => ({ ...prev, [from]: publicKey }));\n      }\n      \n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && \n          previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`,\n          type: 'warning'\n        });\n      }\n      \n      let decryptedMessage = message;\n      let decryptionStatus = 'plaintext';\n      \n      // Decrypt the message if it's encrypted and we have our private key\n      if (encrypted && keyPair?.privateKey) {\n        try {\n          console.log('Decrypting message...');\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\n          decryptionStatus = 'decrypted';\n          console.log('Message decrypted successfully');\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\n          decryptionStatus = 'failed';\n          \n          setSecurityAlert({\n            username: 'System',\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\n            type: 'warning'\n          });\n        }\n      }\n      \n      setMessages(msgs => [...msgs, { \n        from, \n        message: decryptedMessage, \n        fromDeviceId, \n        timestamp: new Date(timestamp || new Date()),\n        encrypted,\n        decryptionStatus,\n        bounced\n      }]);\n    });\n    \n    // Handle public key requests\n    socketRef.current.on('publicKeyRequest', ({ from }, ack) => {\n      console.log(`Public key requested by ${from}`);\n      \n      if (keyPair && keyPair.publicKey) {\n        console.log(`Sending public key to ${from}`);\n        if (ack) ack({ success: true, publicKey: keyPair.publicKey });\n      } else {\n        console.warn('No public key available to share');\n        if (ack) ack({ success: false, reason: 'Public key not available' });\n      }\n    });\n    \n    // User status updates\n    socketRef.current.on('userStatusUpdate', (data) => {\n      console.log('User status update:', data);\n      const { username: user, online } = data;\n      \n      // If this is our current recipient, update their status\n      if (user === recipient) {\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\n        setRecipientStatus(prev => ({ \n          ...prev, \n          exists: true, // If we got a status update, the user definitely exists\n          online,\n          notRegisteredYet: false // Clear this flag since we know the user exists\n        }));\n      }\n      \n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          console.log(`Adding ${user} to online users list`);\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          console.log(`Removing ${user} from online users list`);\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n      \n      // If we're currently checking a recipient, refresh their status\n      if (recipient) {\n        checkRecipientStatus();\n      }\n    });\n    \n    // Handle bulk online users updates\n    socketRef.current.on('onlineUsersUpdate', (data) => {\n      console.log('Online users update:', data);\n      if (data && Array.isArray(data.users)) {\n        setOnlineUsers(data.users);\n        \n        // If we have a recipient, check if they're in the online users list\n        if (recipient && data.users.includes(recipient)) {\n          setRecipientStatus(prev => ({ \n            ...prev, \n            exists: true,\n            online: true,\n            notRegisteredYet: false\n          }));\n        } else if (recipient) {\n          // If recipient is not in the online users list, refresh their status\n          checkRecipientStatus();\n        }\n      }\n    });\n    \n    // Typing indicators\n    socketRef.current.on('userTyping', (data) => {\n      const { username: typingUser } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n    \n    // Error handling\n    socketRef.current.on('error', (error) => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`,\n        type: 'error'\n      });\n    });\n  };\n\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, (users) => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        // Send ping to keep connection alive\n        socketRef.current.emit('ping', {}, (response) => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n        \n        // Also refresh online users list\n        getOnlineUsers();\n        \n        // If we have a recipient, check their status\n        if (recipient) {\n          checkRecipientStatus();\n        }\n      }\n    }, 30000); // Every 30 seconds\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient || !socketRef.current) {\n      setRecipientStatus({ exists: false, online: false, checking: false });\n      return;\n    }\n    \n    console.log(`Checking status for recipient: ${recipient}`);\n    \n    // Set status to checking while we wait for the response\n    setRecipientStatus(prev => ({ ...prev, checking: true }));\n    \n    // Set a timeout to clear the checking status if we don't get a response\n    const checkingTimeout = setTimeout(() => {\n      setRecipientStatus(prev => {\n        if (prev.checking) {\n          return { ...prev, checking: false };\n        }\n        return prev;\n      });\n    }, 3000); // 3 seconds timeout\n    \n    // First check if the recipient is in the online users list\n    if (onlineUsers.includes(recipient)) {\n      clearTimeout(checkingTimeout);\n      console.log(`${recipient} found in online users list`);\n      setRecipientStatus({ exists: true, online: true, checking: false });\n      return;\n    }\n    \n    // If we're connected to a relay, use the checkRecipient event\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\n      socketRef.current.emit('checkRecipient', { username: recipient }, (relayResponse) => {\n        clearTimeout(checkingTimeout);\n        console.log('Relay recipient check response:', relayResponse);\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\n          // Only update if we got a valid response\n          setRecipientStatus({\n            ...relayResponse,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({ \n            exists: false, \n            online: false, \n            checking: false \n          });\n        }\n      });\n    } else {\n      // If connected directly to base node, use checkUser\n      socketRef.current.emit('checkUser', { username: recipient }, (response) => {\n        clearTimeout(checkingTimeout);\n        console.log('Base node recipient check response:', response);\n        \n        // If we got a valid response, use it\n        if (response && typeof response.exists === 'boolean') {\n          setRecipientStatus({\n            ...response,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({ \n            exists: false, \n            online: false, \n            checking: false \n          });\n        }\n      });\n    }\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n    \n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleUsernameSubmit = async (e) => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      setIsCheckingUsername(true);\n      const tempSocket = io(BASE_NODE_URL, { forceNew: true, timeout: 5000 });\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', { username: username.trim() }, (response) => {\n          setIsCheckingUsername(false);\n          if (response && response.exists) {\n            setUsernameAvailable(false);\n            setSecurityAlert({\n              username: 'System',\n              message: `Username \"${username}\" is already taken.`,\n              type: 'error'\n            });\n            // Explicitly disconnect and do NOT set connected to true\n            tempSocket.disconnect();\n          } else {\n            setUsernameAvailable(true);\n            setConnected(true);\n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', (error) => {\n        console.error('Connection error during username check:', error);\n        setIsCheckingUsername(false);\n        setSecurityAlert({\n          username: 'System',\n          message: 'Could not verify username. Base node may be offline.',\n          type: 'error'\n        });\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        username: 'System',\n        message: 'Cannot connect: Base node is offline',\n        type: 'error'\n      });\n    }\n  };\n\n  const handleRecipientChange = (e) => {\n    const newRecipient = e.target.value.trim();\n    setRecipient(newRecipient);\n    \n    // Reset recipient status when the recipient changes\n    setRecipientStatus({ exists: false, online: false, checking: false });\n    \n    // If the recipient is not empty, check their status\n    if (newRecipient && socketRef.current) {\n      // Use a small delay to avoid too many checks while typing\n      if (recipientCheckTimeoutRef.current) {\n        clearTimeout(recipientCheckTimeoutRef.current);\n      }\n      \n      recipientCheckTimeoutRef.current = setTimeout(() => {\n        checkRecipientStatus();\n      }, 500); // 500ms delay\n    }\n  };\n\n  const handleSend = async (e, bounce = false) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    \n    try {\n      // Show sending indicator\n      setStatus('Sending message...');\n      \n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\n      if (!bounce) {\n        // For direct messages, we need to check if the recipient exists and is online\n        const recipientOnline = recipientStatus.online;\n        \n        // If recipient is not online, suggest using relay\n        if (!recipientOnline) {\n          setSecurityAlert({\n            username: 'System',\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\n            type: 'warning'\n          });\n          setStatus('Registered successfully');\n          return;\n        }\n      }\n      \n      // Get recipient's public key if we don't have it and encryption is enabled\n      if (encryptionEnabled && !publicKeys[recipient]) {\n        try {\n          await requestPublicKey(recipient);\n        } catch (error) {\n          console.error('Failed to get public key:', error);\n          // Continue without encryption if we can't get the key\n        }\n      }\n      \n      let finalMessage = message.trim();\n      let isEncrypted = false;\n      \n      // Encrypt the message if encryption is enabled and we have the recipient's public key\n      if (encryptionEnabled && publicKeys[recipient]) {\n        try {\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\n          isEncrypted = true;\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          setSecurityAlert({\n            username: 'System',\n            message: 'Failed to encrypt message. Sending as plaintext.',\n            type: 'warning'\n          });\n        }\n      }\n      \n      const messageData = {\n        to: recipient,\n        message: finalMessage,\n        deviceId,\n        timestamp: new Date().toISOString(),\n        bounce: bounce, // Always use the bounce parameter directly\n        encrypted: isEncrypted,\n        publicKey: keyPair?.publicKey // Send our public key with the message\n      };\n      \n      console.log('Sending message:', { \n        ...messageData, \n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\n        bounce: bounce\n      });\n      \n      // Add a timeout to handle cases where the server doesn't respond\n      const messageTimeout = setTimeout(() => {\n        setSecurityAlert({\n          username: 'System',\n          message: 'Message sending timed out. Server may be offline.',\n          type: 'error'\n        });\n        setStatus('Registered successfully');\n      }, 10000);\n      \n      socketRef.current.emit('sendMessage', messageData, (response) => {\n        clearTimeout(messageTimeout);\n        console.log('Send message response:', response);\n        setStatus('Registered successfully');\n        \n        if (response && (response.delivered || response.bounced)) {\n          // Add message to local state (store original message for display)\n          setMessages(msgs => [...msgs, { \n            from: username, \n            message: message.trim(), // Store original message for display\n            fromDeviceId: deviceId, \n            timestamp: new Date(),\n            status: response.delivered ? 'delivered' : 'bounced',\n            expiresAt: response.expiresAt,\n            encrypted: isEncrypted\n          }]);\n          setMessage('');\n          \n          // Show notification if message was bounced\n          if (response.bounced) {\n            setSecurityAlert({\n              username: 'System',\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\n              type: 'info'\n            });\n          }\n        } else {\n          const errorMsg = response?.reason || 'Message delivery failed';\n          \n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\n            if (bounce) {\n              // For bounced messages to non-existent users, show a special message\n              setSecurityAlert({\n                username: 'System',\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\n                type: 'info'\n              });\n              \n              // Add message to local state as bounced\n              setMessages(msgs => [...msgs, { \n                from: username, \n                message: message.trim(),\n                fromDeviceId: deviceId, \n                timestamp: new Date(),\n                status: 'bounced',\n                expiresAt: Date.now() + 14400000, // 4 hours\n                encrypted: isEncrypted\n              }]);\n              setMessage('');\n            } else {\n              setSecurityAlert({\n                username: 'System',\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\n                type: 'warning'\n              });\n            }\n          } else if (errorMsg.includes('offline')) {\n            setSecurityAlert({\n              username: 'System',\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\n              type: 'warning'\n            });\n          } else {\n            setSecurityAlert({\n              username: 'System',\n              message: `Failed to send message: ${errorMsg}`,\n              type: 'error'\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error sending message: ${error.message}`,\n        type: 'error'\n      });\n      setStatus('Registered successfully');\n    }\n  };\n  \n  // Request public key from a user\n  const requestPublicKey = async (username) => {\n    return new Promise((resolve, reject) => {\n      if (!socketRef.current) {\n        reject(new Error('Not connected'));\n        return;\n      }\n      \n      console.log(`Requesting public key for ${username}...`);\n      \n      // Set a timeout in case the server doesn't respond\n      const requestTimeout = setTimeout(() => {\n        console.error(`Public key request for ${username} timed out`);\n        reject(new Error('Request timed out'));\n      }, 10000);\n      \n      socketRef.current.emit('requestPublicKey', { username }, (response) => {\n        clearTimeout(requestTimeout);\n        \n        if (response && response.success && response.publicKey) {\n          console.log(`Received public key for ${username}`);\n          setPublicKeys(prev => ({ ...prev, [username]: response.publicKey }));\n          resolve(response.publicKey);\n        } else {\n          const reason = response?.reason || 'Public key not available';\n          console.log(`No public key available for ${username}: ${reason}`);\n          reject(new Error(reason));\n        }\n      });\n    });\n  };\n  \n  // Handle relay bounce for any user\n  const handleRelayBounce = (e) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    \n    // Show confirmation before bouncing\n    const confirmBounce = window.confirm(\n      `RELAY MESSAGE\\n\\n` +\n      `Your message to \"${recipient}\" will be stored on ${connectionDetails.relayStatus === 'connected_to_relay' ? 'relay' : 'base node'} servers for up to 4 hours.\\n\\n` +\n      `It will be delivered when ${recipient} comes online or registers with the network.\\n\\n` +\n      `Continue?`\n    );\n    \n    if (confirmBounce) {\n      handleSend(e, true);\n    }\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    \n    // Send typing indicator\n    if (socketRef.current && recipient && e.target.value.length > 0) {\n      socketRef.current.emit('typing', { to: recipient });\n    }\n  };\n\n  const handleDisconnect = () => {\n    if (socketRef.current) {\n      // Notify the server that we're intentionally disconnecting\n      socketRef.current.emit('userLogout', { username, deviceId }, () => {\n        console.log('Sent logout notification to server');\n        \n        // Now disconnect\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      });\n    }\n    \n    // Clear local state\n    setConnected(false);\n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({ exists: false, online: false });\n    setStatus('Disconnected');\n    setRelayStatus('offline');\n    clearInterval(pingIntervalRef.current);\n  };\n\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  const formatMessageTime = (timestamp) => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  return (\n    <div style={{ \n      background: '#0a0e14', \n      minHeight: '100vh',\n      width: '100vw',\n      height: '100vh',\n      color: '#a2aabc', \n      display: 'flex', \n      flexDirection: 'column',\n      fontFamily: '\"Fira Code\", monospace',\n      overflow: 'hidden'\n    }}>\n      <div style={{ \n        background: '#171c28', \n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          padding: '16px 24px',\n          borderBottom: '1px solid #1e2d3d'\n        }}>\n          <h2 style={{ \n            margin: 0, \n            color: '#5ccfe6', \n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          }}>WhisperNet_</h2>\n          <div style={{ \n            fontSize: 12, \n            padding: '4px 8px', \n            borderRadius: 4, \n            background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n            color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n            cursor: 'pointer'\n          }} onClick={() => setShowConnectionInfo(!showConnectionInfo)}>\n            {relayStatus === 'online' ? 'Base Node Online' : \n             relayStatus === 'checking' ? 'Checking...' : 'Base Node Offline'}\n          </div>\n        </div>\n        \n        {showConnectionInfo && (\n          <div style={{ \n            background: '#0d1117', \n            padding: '8px 24px', \n            fontSize: 12, \n            fontFamily: 'monospace',\n            borderBottom: '1px solid #1e2d3d',\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '8px 24px'\n          }}>\n            <div>Status: {status}</div>\n            {connected && (\n              <>\n                <div>Socket ID: {connectionDetails.socketId || 'unknown'}</div>\n                <div>Transport: {connectionDetails.transport || 'unknown'}</div>\n                <div>Base Node: {connectionDetails.baseNodeUrl || BASE_NODE_URL}</div>\n                <div>Relay ID: <span style={{ color: '#5ccfe6' }}>{relayServerUrl || 'Unknown'}</span></div>\n                <div>Relay Status: <span style={{ \n                  color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : \n                         connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40' \n                }}>\n                  {connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : \n                   connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : \n                   connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'}\n                </span></div>\n                {connectionDetails.connectedUsers !== undefined && (\n                  <div>Users on Relay: {connectionDetails.connectedUsers}</div>\n                )}\n                {connectionDetails.ip && connectionDetails.port && (\n                  <div>Relay Address: {connectionDetails.ip}:{connectionDetails.port}</div>\n                )}\n              </>\n            )}\n            <div>Base Node Status: <span style={{\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            }}>{relayStatus}</span></div>\n            {deviceId && <div>Device ID: {deviceId.substring(0, 8)}...</div>}\n          </div>\n        )}\n        \n        {securityAlert && (\n          <div style={{ \n            background: '#4b1c1c', \n            color: '#ff8f40', \n            padding: '12px 24px', \n            borderBottom: '1px solid #1e2d3d',\n            position: 'relative',\n            fontSize: 14\n          }}>\n            <div style={{ marginRight: 20 }}>{securityAlert.message}</div>\n            <button \n              style={{ \n                position: 'absolute', \n                top: 12, \n                right: 24, \n                background: 'none', \n                border: 'none', \n                color: '#ff8f40', \n                cursor: 'pointer',\n                fontSize: 16\n              }}\n              onClick={dismissAlert}\n            >\n              ×\n            </button>\n          </div>\n        )}\n        \n        {!connected ? (\n          <div style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '0 24px'\n          }}>\n            <div style={{ \n              maxWidth: '400px',\n              width: '100%'\n            }}>\n              <div style={{ marginBottom: 16, fontSize: 14, color: '#5ccfe6' }}>\n                {getTimestamp()} Initializing secure connection...\n              </div>\n              <form onSubmit={handleUsernameSubmit}>\n                <input\n                  style={{ \n                    width: '100%', \n                    padding: 10, \n                    marginBottom: 12, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 16,\n                    fontFamily: '\"Fira Code\", monospace',\n                    boxSizing: 'border-box'\n                  }}\n                  placeholder=\"Enter username\"\n                  value={username}\n                  onChange={e => {\n                    setUsername(e.target.value);\n                    setUsernameAvailable(true);\n                  }}\n                  required\n                />\n                {!usernameAvailable && <div style={{color: '#ff8f40', fontSize: 12, marginTop: -8, marginBottom: 8}}>Username not available.</div>}\n                <button\n                  style={{\n                    width: '100%',\n                    padding: 10,\n                    borderRadius: 4,\n                    background: relayStatus === 'online' ?\n                      'linear-gradient(90deg, #5ccfe6, #bae67e)' :\n                      '#636b78',\n                    color: '#171c28',\n                    fontWeight: 'bold',\n                    fontSize: 16,\n                    border: 'none',\n                    cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  type=\"submit\"\n                  disabled={relayStatus !== 'online' || isCheckingUsername}\n                >\n                  {isCheckingUsername ? 'CHECKING...' : (relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE')}\n                </button>\n              </form>\n              {relayStatus !== 'online' && (\n                <button \n                  style={{ \n                    width: '100%', \n                    padding: 8, \n                    marginTop: 8,\n                    borderRadius: 4, \n                    background: '#4b1c1c', \n                    color: '#ff8f40', \n                    fontSize: 14, \n                    border: 'none',\n                    cursor: 'pointer',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }} \n                  onClick={retryConnection}\n                >\n                  RETRY CONNECTION\n                </button>\n              )}\n              <div style={{ marginTop: 12, color: '#ff3333', textAlign: 'center', fontSize: 14 }}>\n                {status}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden',\n            padding: '0 24px'\n          }}>\n            <form onSubmit={handleSend} style={{ \n              display: 'flex', \n              flexDirection: 'column', \n              padding: '16px 0'\n            }}>\n              <div style={{ display: 'flex', marginBottom: 8 }}>\n                <input\n                  style={{ \n                    flex: 1, \n                    padding: 10, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 14,\n                    marginRight: 8,\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  placeholder=\"Recipient username\"\n                  value={recipient}\n                  onChange={handleRecipientChange}\n                  required\n                />\n                {recipient && (\n                  <div style={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    marginLeft: 8,\n                    fontSize: 12\n                  }}>\n                    <div style={{ \n                      width: 8, \n                      height: 8, \n                      borderRadius: '50%', \n                      background: recipientStatus.online ? '#bae67e' : \n                                 recipientStatus.exists ? '#ff8f40' : '#ff3333',\n                      marginRight: 6 \n                    }}></div>\n                    <span style={{\n                      fontSize: 12,\n                      color: recipientStatus.online ? '#bae67e' : \n                            recipientStatus.exists ? '#ff8f40' : '#ff3333'\n                    }}>\n                      {recipientStatus.online ? 'ONLINE' : 'OFFLINE'}\n                    </span>\n                  </div>\n                )}\n              </div>\n              <div style={{ display: 'flex' }}>\n                <input\n                  style={{ \n                    flex: 1, \n                    padding: 10, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 14,\n                    marginRight: 8,\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  placeholder=\"Type a message\"\n                  value={message}\n                  onChange={handleMessageChange}\n                  required\n                />\n                {recipient ? (\n                  <div style={{ display: 'flex' }}>\n                    {/* SEND button */}\n                    <button \n                      style={{ \n                        padding: '0 18px', \n                        borderRadius: '4px 0 0 4px', \n                        background: recipientStatus.online ? \n                          'linear-gradient(90deg, #5ccfe6, #bae67e)' : \n                          '#636b78', \n                        color: '#171c28', \n                        fontWeight: 'bold', \n                        fontSize: 14, \n                        border: 'none',\n                        cursor: recipientStatus.online ? 'pointer' : 'not-allowed',\n                        fontFamily: '\"Fira Code\", monospace'\n                      }} \n                      type=\"submit\"\n                      disabled={!recipientStatus.online}\n                      title={recipientStatus.online ? \"Send message directly\" : \"User is offline or not found\"}\n                    >\n                      SEND\n                    </button>\n                    \n                    {/* Always show the RELAY button */}\n                    <button \n                      style={{ \n                        padding: '0 12px', \n                        borderRadius: '0 4px 4px 0', \n                        background: '#4b1c1c', \n                        color: '#ff8f40', \n                        fontWeight: 'bold', \n                        fontSize: 14, \n                        border: 'none',\n                        cursor: 'pointer',\n                        fontFamily: '\"Fira Code\", monospace',\n                        display: 'flex',\n                        alignItems: 'center'\n                      }} \n                      onClick={handleRelayBounce}\n                      title=\"Message will be stored on relay servers for up to 4 hours\"\n                    >\n                      RELAY\n                      <span style={{\n                        fontSize: 10,\n                        marginLeft: 4,\n                        background: 'rgba(255, 143, 64, 0.2)',\n                        padding: '1px 3px',\n                        borderRadius: 2\n                      }}>\n                        4h\n                      </span>\n                    </button>\n                  </div>\n                ) : (\n                  <button \n                    style={{ \n                      padding: '0 18px', \n                      borderRadius: 4, \n                      background: '#636b78', \n                      color: '#171c28', \n                      fontWeight: 'bold', \n                      fontSize: 14, \n                      border: 'none',\n                      cursor: 'not-allowed',\n                      fontFamily: '\"Fira Code\", monospace'\n                    }} \n                    disabled={true}\n                  >\n                    SEND\n                  </button>\n                )}\n              </div>\n            </form>\n            \n            {typing && recipient && (\n              <div style={{ fontSize: 12, color: '#5ccfe6', marginBottom: 8 }}>\n                {recipient} is typing...\n              </div>\n            )}\n            \n            <div style={{ \n              background: '#0d1117', \n              borderRadius: 4, \n              padding: 12, \n              flex: 1,\n              overflowY: 'auto', \n              marginBottom: 12,\n              border: '1px solid #1e2d3d',\n              fontFamily: 'monospace'\n            }}>\n              {messages.length === 0 ? (\n                <div style={{ color: '#5ccfe6', fontSize: 14 }}>\n                  {getTimestamp()} Connection established. Awaiting transmission...\n                </div>\n              ) : (\n                messages.map((msg, i) => (\n                  <div key={i} style={{ \n                    marginBottom: 12, \n                    padding: 8,\n                    borderRadius: 4,\n                    background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\n                    borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\n                  }}>\n                    <div style={{ \n                      display: 'flex', \n                      justifyContent: 'space-between', \n                      marginBottom: 4, \n                      fontSize: 12 \n                    }}>\n                      <span style={{ \n                        color: msg.from === username ? '#5ccfe6' : '#bae67e',\n                        fontWeight: 'bold'\n                      }}>\n                        {msg.from === username ? 'YOU' : msg.from}\n                        {msg.bounced && <span style={{ color: '#ff8f40', marginLeft: 6 }}>(bounced)</span>}\n                      </span>\n                      <span style={{ color: '#636b78' }}>{formatMessageTime(msg.timestamp)}</span>\n                    </div>\n                    <div style={{ wordBreak: 'break-word', fontSize: 14 }}>{msg.message}</div>\n                    {msg.status === 'bounced' && (\n                      <div style={{ \n                        fontSize: 10, \n                        color: '#ff8f40', \n                        marginTop: 4,\n                        fontStyle: 'italic'\n                      }}>\n                        Message will be delivered when recipient comes online (expires in 4 hours)\n                      </div>\n                    )}\n                  </div>\n                ))\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n            \n            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 16px' }}>\n              <button \n                style={{ \n                  padding: '8px 16px', \n                  borderRadius: 4, \n                  background: '#4b1c1c', \n                  color: '#ff8f40', \n                  fontSize: 14, \n                  border: 'none',\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                }} \n                onClick={handleDisconnect}\n              >\n                DISCONNECT\n              </button>\n              \n              <div style={{ \n                fontSize: 12, \n                color: '#636b78', \n                display: 'flex', \n                alignItems: 'center' \n              }}>\n                <div style={{ \n                  width: 8, \n                  height: 8, \n                  borderRadius: '50%', \n                  background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                  marginRight: 6 \n                }}></div>\n                {status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST'}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}