{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddharth\\\\Documents\\\\GitHub\\\\WhisperNet\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport * as EncryptionUtils from './encryptionUtils';\nimport * as MessageUtils from './messageUtils';\nimport { createRelayMessage, sendMessage } from './messageUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\n\n// Random username generator\nconst generateRandomUsername = () => {\n  const adjectives = ['Swift', 'Brave', 'Clever', 'Mighty', 'Noble', 'Wise', 'Calm', 'Bold', 'Bright', 'Agile'];\n  const animals = ['Fox', 'Eagle', 'Wolf', 'Deer', 'Hawk', 'Owl', 'Bear', 'Lion', 'Tiger', 'Dolphin'];\n  const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n  const randomNumber = Math.floor(Math.random() * 1000);\n  return `${randomAdjective}${randomAnimal}${randomNumber}`;\n};\nfunction App() {\n  _s();\n  // State for user information\n  const [username, setUsername] = useState(generateRandomUsername());\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [status, setStatus] = useState('Disconnected');\n  const [connected, setConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [relayStatus, setRelayStatus] = useState('unknown');\n  const [availableRelays, setAvailableRelays] = useState([]);\n  const [activeRelay, setActiveRelay] = useState(null);\n  const [relayConnection, setRelayConnection] = useState(null);\n  const [recipientStatus, setRecipientStatus] = useState({\n    exists: false,\n    online: false\n  });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('');\n\n  // Security and messaging state\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [pendingMessages, setPendingMessages] = useState([]);\n  const [showNewDeviceWarning, setShowNewDeviceWarning] = useState(false);\n  const [newDeviceUsername, setNewDeviceUsername] = useState('');\n\n  // Encryption state\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [offlineMessageEnabled, setOfflineMessageEnabled] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeyBase64, setPublicKeyBase64] = useState(null);\n  const [contactKeys, setContactKeys] = useState({});\n\n  // State for relay message dialog\n  const [showRelayDialog, setShowRelayDialog] = useState(false);\n  const [pendingRelayMessage, setPendingRelayMessage] = useState(null);\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const encryptionKeyRef = useRef({});\n  const pendingKeyExchangeRef = useRef([]);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        // Generate device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n        localStorage.setItem('deviceId', visitorId);\n\n        // Initialize encryption keys\n        const storedKeyPair = localStorage.getItem('keyPair');\n        if (storedKeyPair) {\n          // Use existing keys if available\n          const parsedKeyPair = JSON.parse(storedKeyPair);\n          setKeyPair(parsedKeyPair);\n          const importedPublicKey = await EncryptionUtils.importPublicKey(parsedKeyPair.publicKey);\n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(importedPublicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        } else {\n          // Generate new keys if none exist\n          const newKeyPair = await EncryptionUtils.generateKeyPair();\n          const publicKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.publicKey);\n          const privateKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.privateKey);\n          const keyPairToStore = {\n            publicKey: publicKeyJwk,\n            privateKey: privateKeyJwk\n          };\n          localStorage.setItem('keyPair', JSON.stringify(keyPairToStore));\n          setKeyPair(keyPairToStore);\n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(newKeyPair.publicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        }\n\n        // Load stored contact keys\n        const storedContactKeys = localStorage.getItem('contactKeys');\n        if (storedContactKeys) {\n          setContactKeys(JSON.parse(storedContactKeys));\n        }\n\n        // Load pending messages\n        const storedPendingMessages = localStorage.getItem('pendingMessages');\n        if (storedPendingMessages) {\n          setPendingMessages(JSON.parse(storedPendingMessages));\n        }\n      } catch (error) {\n        console.error('Error initializing app:', error);\n        setStatus('Error initializing encryption. Please refresh.');\n      }\n    };\n    initializeApp();\n  }, []);\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, {\n        timeout: 5000\n      });\n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n\n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    tempSocket.on('connect_error', err => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n\n      // Check if keys are present in localStorage\n      const storedContactKeys = localStorage.getItem('contactKeys');\n      if (!storedContactKeys) {\n        setSecurityAlert({\n          type: 'warning',\n          username: 'System',\n          message: 'No encryption keys found. We cannot verify who you\\'re talking to.'\n        });\n      }\n    }\n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    console.log('Connecting to base node:', BASE_NODE_URL);\n    setStatus('Connecting to base node...');\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n\n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node');\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL\n      });\n\n      // Register with base node including public key for encryption\n      socketRef.current.emit('registerUser', {\n        username,\n        deviceId,\n        publicKey: publicKeyBase64\n      }, response => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully');\n\n          // Get initial data\n          getOnlineUsers();\n\n          // Get available relay servers\n          getAvailableRelays();\n          startPingInterval();\n\n          // Handle any offline messages that were delivered on registration\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n\n          // Handle any known devices warning\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            type: 'error',\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`\n          });\n        }\n      });\n    });\n    socketRef.current.on('connect_error', err => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n      setRelayStatus('offline');\n      clearInterval(pingIntervalRef.current);\n\n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect') {\n        setTimeout(() => {\n          if (connected) {\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n\n    // Message handling\n    socketRef.current.on('message', async data => {\n      console.log('Received message:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp,\n        encrypted,\n        encryptedContent,\n        iv,\n        messageId,\n        publicKey\n      } = data;\n\n      // Acknowledge receipt if message has an ID (for offline message tracking)\n      if (messageId) {\n        socketRef.current.emit('confirmMessageDelivery', {\n          messageId\n        });\n      }\n\n      // Check for device ID changes and show security alert if needed\n      checkDeviceIdChange(from, fromDeviceId);\n\n      // Store sender's public key if provided\n      if (publicKey && (!contactKeys[from] || contactKeys[from] !== publicKey)) {\n        console.log(`Received public key from ${from} in direct message`);\n        const updatedKeys = {\n          ...contactKeys,\n          [from]: publicKey\n        };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n\n        // Resolve any pending key exchange promises\n        const pendingRequests = pendingKeyExchangeRef.current.filter(p => p.username === from);\n        if (pendingRequests.length > 0) {\n          console.log(`Resolving ${pendingRequests.length} pending key requests for ${from}`);\n          pendingRequests.forEach(pending => {\n            if (pending.callback) pending.callback(publicKey);\n          });\n\n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current.filter(p => p.username !== from);\n        }\n      }\n\n      // Handle encrypted messages\n      let finalMessage = message;\n      let isEncrypted = false;\n      if (encrypted && encryptedContent && iv) {\n        isEncrypted = true;\n        try {\n          // Get sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            const key = await requestPublicKey(from);\n            if (!key) {\n              finalMessage = '[Encrypted message - no decryption key available]';\n              throw new Error('No decryption key available');\n            }\n          }\n\n          // Decrypt the message if we have the key\n          finalMessage = await decryptMessage(encryptedContent, iv, from);\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          if (finalMessage === message) {\n            // Only override if not already set to error message\n            finalMessage = '[Encrypted message - unable to decrypt]';\n          }\n        }\n      }\n\n      // Add message to state\n      setMessages(msgs => [...msgs, {\n        from,\n        message: finalMessage,\n        fromDeviceId,\n        timestamp: new Date(timestamp || Date.now()),\n        encrypted: isEncrypted,\n        delivered: true\n      }]);\n    });\n\n    // Handle relay server list updates\n    socketRef.current.on('relayList', relays => {\n      console.log('Received relay list:', relays);\n      setAvailableRelays(relays);\n\n      // If we're not connected to a relay yet, connect to the best one\n      if (!activeRelay && relays.length > 0) {\n        const onlineRelays = relays.filter(relay => relay.status === 'online');\n        if (onlineRelays.length > 0) {\n          connectToRelay(onlineRelays[0]);\n        }\n      }\n    });\n\n    // Handle public key exchange events\n    socketRef.current.on('publicKey', data => {\n      console.log('Received public key:', data);\n      const {\n        username,\n        publicKey\n      } = data;\n      if (username && publicKey) {\n        // Store the public key\n        const updatedKeys = {\n          ...contactKeys,\n          [username]: publicKey\n        };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n\n        // If we have pending key exchanges, process them\n        const pendingExchanges = pendingKeyExchangeRef.current;\n        const pendingForUser = pendingExchanges.filter(p => p.username === username);\n        if (pendingForUser.length > 0) {\n          pendingForUser.forEach(pending => {\n            if (pending.callback) pending.callback(publicKey);\n          });\n\n          // Remove processed exchanges\n          pendingKeyExchangeRef.current = pendingExchanges.filter(p => p.username !== username);\n        }\n      }\n    });\n\n    // Handle relay status updates\n    socketRef.current.on('relayStatusUpdate', data => {\n      console.log('Relay status update:', data);\n      const {\n        relayId,\n        status\n      } = data;\n      setAvailableRelays(prev => {\n        const updated = prev.map(relay => {\n          if (relay.relayId === relayId) {\n            return {\n              ...relay,\n              status\n            };\n          }\n          return relay;\n        });\n\n        // If the relay we're connected to went offline, connect to another one\n        if (activeRelay && activeRelay.relayId === relayId && status === 'offline') {\n          const onlineRelays = updated.filter(r => r.status === 'online');\n          if (onlineRelays.length > 0) {\n            // Schedule a reconnect to avoid doing it during this state update\n            setTimeout(() => connectToRelay(onlineRelays[0]), 100);\n          }\n        }\n        return updated;\n      });\n    });\n\n    // User status updates\n    socketRef.current.on('userStatusUpdate', data => {\n      console.log('User status update:', data);\n      const {\n        username: user,\n        online\n      } = data;\n      if (user === recipient) {\n        setRecipientStatus(prev => ({\n          ...prev,\n          online\n        }));\n      }\n\n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n    });\n\n    // Typing indicators\n    socketRef.current.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n\n    // Error handling\n    socketRef.current.on('error', error => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`\n      });\n    });\n  };\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, users => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n\n  // Get available relay servers from base node\n  const getAvailableRelays = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getRelays', {}, relays => {\n        console.log('Available relays:', relays);\n        if (Array.isArray(relays)) {\n          setAvailableRelays(relays);\n\n          // Connect to the first available relay if we're not connected to any\n          const onlineRelays = relays.filter(relay => relay.status === 'online');\n          if (onlineRelays.length > 0 && !activeRelay) {\n            connectToRelay(onlineRelays[0]);\n          }\n        }\n      });\n    }\n  };\n\n  // Connect to a relay server\n  const connectToRelay = (relay, callback) => {\n    // Handle both relay object and direct URL string\n    let relayUrl;\n    if (typeof relay === 'string') {\n      relayUrl = relay;\n    } else if (relay && relay.ip && relay.port) {\n      relayUrl = `http://${relay.ip}:${relay.port}`;\n    } else {\n      console.error('Invalid relay information:', relay);\n      return;\n    }\n\n    // Disconnect from current relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n    }\n    console.log(`Connecting to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay...`);\n    setRelayServerUrl(relayUrl);\n    const socket = io(relayUrl, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n    socket.on('connect', () => {\n      console.log(`Connected to relay with socket ID: ${socket.id}`);\n      setStatus(`Connected to relay. Registering...`);\n\n      // Register with the relay including public key\n      socket.emit('registerUser', {\n        username,\n        deviceId,\n        publicKey: publicKeyBase64\n      }, response => {\n        console.log('Relay registration response:', response);\n        if (response && response.success) {\n          setActiveRelay(relay);\n          setRelayConnection(socket);\n          setStatus(`Connected to relay`);\n\n          // Store relay info for future use\n          localStorage.setItem('lastRelay', JSON.stringify(relay));\n\n          // Handle any offline messages that were delivered on connect\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n\n          // Handle any new device warnings\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n\n          // Execute callback if provided\n          if (typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration with relay failed';\n          setStatus(`Relay registration failed: ${errorMsg}`);\n          socket.disconnect();\n        }\n      });\n    });\n    socket.on('connect_error', err => {\n      console.error(`Relay connection error: ${err.message}`);\n      setStatus(`Relay connection failed: ${err.message}`);\n\n      // Try another relay if available\n      const otherRelays = availableRelays.filter(r => r.relayId !== relay.relayId && r.status === 'online');\n      if (otherRelays.length > 0) {\n        setTimeout(() => connectToRelay(otherRelays[0]), 1000);\n      } else {\n        setStatus('No available relays. Using base node directly.');\n      }\n    });\n    socket.on('disconnect', reason => {\n      console.log(`Disconnected from relay: ${reason}`);\n      setStatus(`Disconnected from relay: ${reason}`);\n      setActiveRelay(null);\n\n      // Try to reconnect to another relay if available\n      const onlineRelays = availableRelays.filter(r => r.status === 'online');\n      if (onlineRelays.length > 0) {\n        setTimeout(() => connectToRelay(onlineRelays[0]), 2000);\n      }\n    });\n\n    // Message handling\n    socket.on('receiveMessage', async data => {\n      console.log('Received message from relay:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp,\n        encrypted,\n        encryptedContent,\n        iv,\n        publicKey\n      } = data;\n\n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          type: 'warning',\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`\n        });\n      }\n\n      // Store sender's public key if provided\n      if (publicKey && !contactKeys[from]) {\n        console.log(`Received public key from ${from} in message`);\n        const updatedKeys = {\n          ...contactKeys,\n          [from]: publicKey\n        };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n\n        // Resolve any pending key exchange promises\n        const pendingRequests = pendingKeyExchangeRef.current.filter(p => p.username === from);\n        if (pendingRequests.length > 0) {\n          console.log(`Resolving ${pendingRequests.length} pending key requests for ${from}`);\n          pendingRequests.forEach(p => p.callback(publicKey));\n\n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current.filter(p => p.username !== from);\n        }\n      }\n\n      // Handle encrypted messages\n      let displayMessage = message;\n      let isEncrypted = false;\n      if (encrypted && encryptedContent && iv) {\n        isEncrypted = true;\n        try {\n          // Try to decrypt if we have the key\n          if (contactKeys[from]) {\n            displayMessage = await decryptMessage(encryptedContent, iv, from);\n          } else {\n            // Request the key if we don't have it\n            const key = await requestPublicKey(from);\n            if (key) {\n              displayMessage = await decryptMessage(encryptedContent, iv, from);\n            } else {\n              displayMessage = '[Encrypted message - no decryption key available]';\n            }\n          }\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          displayMessage = '[Encrypted message - unable to decrypt]';\n        }\n      }\n\n      // Add to messages\n      setMessages(msgs => [...msgs, {\n        from,\n        message: displayMessage,\n        fromDeviceId,\n        timestamp: new Date(timestamp || new Date()),\n        encrypted: isEncrypted,\n        isRelay: true\n      }]);\n    });\n\n    // Typing indicators\n    socket.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n    return socket;\n  };\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        socketRef.current.emit('ping', {}, response => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n      }\n    }, 30000);\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient) {\n      setRecipientStatus({\n        exists: false,\n        online: false\n      });\n      return;\n    }\n\n    // Check through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    if (!socket) {\n      setRecipientStatus({\n        exists: false,\n        online: false\n      });\n      return;\n    }\n    const checkMethod = relayConnection ? 'checkRecipient' : 'checkUser';\n    socket.emit(checkMethod, {\n      username: recipient\n    }, response => {\n      console.log('Recipient check response:', response);\n      setRecipientStatus(response || {\n        exists: false,\n        online: false\n      });\n    });\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleUsernameSubmit = e => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      // Check if username exists before connecting\n      const tempSocket = io(BASE_NODE_URL, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 2,\n        reconnectionDelay: 1000,\n        timeout: 5000,\n        forceNew: true\n      });\n      setStatus('Verifying username...');\n      setIsCheckingUsername(true);\n      tempSocket.on('connect', () => {\n        // First check if username is available (not registered)\n        tempSocket.emit('checkUsernameAvailable', {\n          username: username.trim()\n        }, availableResponse => {\n          console.log('Username availability response:', availableResponse);\n          if (availableResponse && availableResponse.available) {\n            // Username is available for registration (new user)\n            console.log('Username is available for registration');\n            setUsernameAvailable(true);\n            setConnected(true);\n            tempSocket.disconnect();\n          } else {\n            // Username exists, check if it's online\n            tempSocket.emit('checkUser', {\n              username: username.trim()\n            }, response => {\n              console.log('Username check response:', response);\n              setIsCheckingUsername(false);\n              if (response && response.exists) {\n                // Username exists, proceed with connection\n                setConnected(true);\n                tempSocket.disconnect();\n              } else {\n                // Username doesn't exist but isn't available (being cleaned up)\n                setStatus('Username not available');\n                // Generate a new random username\n                const newUsername = generateRandomUsername();\n                setUsername(newUsername);\n                setSecurityAlert({\n                  type: 'info',\n                  username: 'System',\n                  message: `That username is not available. We've generated a new username for you: ${newUsername}`\n                });\n                tempSocket.disconnect();\n              }\n            });\n          }\n        });\n      });\n      tempSocket.on('connect_error', err => {\n        console.error('Socket connection error:', err);\n        setStatus('Connection error. Please try again.');\n        setIsCheckingUsername(false);\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: 'Cannot connect: Base node is offline'\n      });\n    }\n  };\n  const handleRecipientChange = e => {\n    setRecipient(e.target.value.trim());\n  };\n\n  // Handle offline messages received on connect\n  const handleOfflineMessages = offlineMessages => {\n    if (!Array.isArray(offlineMessages) || offlineMessages.length === 0) return;\n    console.log('Processing offline messages:', offlineMessages);\n\n    // Process each offline message\n    offlineMessages.forEach(async msgData => {\n      try {\n        const {\n          from,\n          message,\n          encrypted,\n          encryptedContent,\n          iv,\n          fromDeviceId,\n          timestamp,\n          messageId\n        } = msgData;\n\n        // Acknowledge receipt to remove from storage\n        if (socketRef.current && messageId) {\n          socketRef.current.emit('confirmMessageDelivery', {\n            messageId\n          });\n        }\n\n        // If message is encrypted, decrypt it\n        let decryptedMessage = message;\n        if (encrypted && encryptedContent && iv) {\n          // Get the sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            await requestPublicKey(from);\n          }\n\n          // Try to decrypt if we have the key\n          if (contactKeys[from]) {\n            try {\n              decryptedMessage = await decryptMessage(encryptedContent, iv, from);\n            } catch (error) {\n              console.error('Failed to decrypt offline message:', error);\n              decryptedMessage = '[Encrypted message - unable to decrypt]';\n            }\n          } else {\n            decryptedMessage = '[Encrypted message - no decryption key available]';\n          }\n        }\n\n        // Add to messages\n        setMessages(msgs => [...msgs, {\n          from,\n          message: decryptedMessage,\n          fromDeviceId,\n          timestamp: new Date(timestamp || Date.now()),\n          encrypted\n        }]);\n\n        // Check for device ID changes\n        checkDeviceIdChange(from, fromDeviceId);\n      } catch (error) {\n        console.error('Error processing offline message:', error);\n      }\n    });\n  };\n\n  // Request public key from a user\n  const requestPublicKey = async username => {\n    if (!socketRef.current) return null;\n    return new Promise(resolve => {\n      // Check if we already have the key\n      if (contactKeys[username]) {\n        console.log(`Using cached public key for ${username}`);\n        resolve(contactKeys[username]);\n        return;\n      }\n      console.log(`Requesting public key for ${username}`);\n\n      // Add to pending key exchanges\n      pendingKeyExchangeRef.current = [...pendingKeyExchangeRef.current, {\n        username,\n        callback: resolve,\n        timestamp: Date.now()\n      }];\n      socketRef.current.emit('requestPublicKey', {\n        username\n      }, response => {\n        console.log('Public key request response:', response);\n        if (response && response.publicKey) {\n          // Store the public key\n          const updatedKeys = {\n            ...contactKeys,\n            [username]: response.publicKey\n          };\n          setContactKeys(updatedKeys);\n          localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n          resolve(response.publicKey);\n\n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current.filter(p => p.username !== username);\n        } else {\n          console.error('Failed to get public key for:', username);\n          resolve(null);\n        }\n      });\n\n      // Set timeout to prevent hanging\n      setTimeout(() => {\n        const stillPending = pendingKeyExchangeRef.current.find(p => p.username === username && p.callback === resolve);\n        if (stillPending) {\n          console.warn(`Public key request for ${username} timed out`);\n          resolve(null);\n\n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current.filter(p => !(p.username === username && p.callback === resolve));\n        }\n      }, 5000); // 5 second timeout\n    });\n  };\n\n  // Decrypt a message using the sender's public key\n  const decryptMessage = async (encryptedContent, iv, sender) => {\n    try {\n      if (!keyPair || !contactKeys[sender]) {\n        throw new Error('Missing keys for decryption');\n      }\n\n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const senderPublicKey = await EncryptionUtils.importPublicKey(contactKeys[sender]);\n\n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, senderPublicKey);\n\n      // Decrypt the message\n      return await EncryptionUtils.decryptMessage(encryptedContent, iv, sharedSecret);\n    } catch (error) {\n      console.error('Decryption error:', error);\n      throw error;\n    }\n  };\n\n  // Encrypt a message using the recipient's public key\n  const encryptMessage = async (message, recipient) => {\n    try {\n      if (!keyPair || !contactKeys[recipient]) {\n        throw new Error('Missing keys for encryption');\n      }\n\n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const recipientPublicKey = await EncryptionUtils.importPublicKey(contactKeys[recipient]);\n\n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, recipientPublicKey);\n\n      // Encrypt the message\n      return await EncryptionUtils.encryptMessage(message, sharedSecret);\n    } catch (error) {\n      console.error('Encryption error:', error);\n      throw error;\n    }\n  };\n\n  // Check if a user is messaging from a new device\n  const checkDeviceIdChange = (username, newDeviceId) => {\n    // Get previous messages from this user\n    const previousMessages = messages.filter(msg => msg.from === username);\n    if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== newDeviceId) {\n      // Show warning about new device\n      setNewDeviceUsername(username);\n      setShowNewDeviceWarning(true);\n      setSecurityAlert({\n        type: 'warning',\n        username,\n        message: `Warning: ${username} appears to be messaging from a new device!`\n      });\n    }\n  };\n  const handleSend = async e => {\n    e.preventDefault();\n    if (!recipient || !message.trim()) return;\n    try {\n      const messageId = MessageUtils.generateMessageId();\n      const timestamp = new Date().toISOString();\n      const originalMessage = message.trim();\n\n      // Prepare base message data\n      const messageData = {\n        to: recipient,\n        message: originalMessage,\n        deviceId,\n        timestamp,\n        messageId,\n        ttl: offlineMessageEnabled ? MessageUtils.calculateTTL() : 0 // 4 hours TTL if offline messaging enabled\n      };\n\n      // Add message to local state immediately for better UX\n      const newMessageId = `msg-${Date.now()}`;\n      setMessages(msgs => [...msgs, {\n        id: newMessageId,\n        from: username,\n        message: originalMessage,\n        fromDeviceId: deviceId,\n        timestamp: new Date(timestamp),\n        pending: true\n      }]);\n      setMessage('');\n\n      // Check if recipient exists - if not, automatically send via relay\n      if (!recipientStatus.exists) {\n        console.log('Recipient not found, sending via relay automatically');\n        // If relay is already connected, send through it\n        if (relayConnection) {\n          console.log('Using existing relay connection');\n          messageData.useRelay = true;\n          relayConnection.emit('sendMessage', messageData, response => {\n            console.log('Relay message response:', response);\n            updateMessageStatus(messageId, response, originalMessage);\n          });\n          return;\n        } else if (availableRelays.length > 0) {\n          // Connect to the first available relay\n          const relay = availableRelays[0];\n          console.log('Connecting to relay:', relay);\n\n          // Connect to relay and send message\n          const relayUrl = `http://${relay.ip}:${relay.port}`;\n          const socket = io(relayUrl, {\n            transports: ['websocket', 'polling'],\n            reconnectionAttempts: 5,\n            reconnectionDelay: 2000,\n            query: {\n              deviceId,\n              username\n            },\n            forceNew: true\n          });\n          socket.on('connect', () => {\n            console.log('Connected to relay, sending message');\n            socket.emit('sendMessage', messageData, response => {\n              console.log('Relay message response:', response);\n              updateMessageStatus(messageId, response, originalMessage);\n              socket.disconnect();\n            });\n          });\n          socket.on('connect_error', err => {\n            console.error('Relay connection error:', err);\n            updateMessageStatus(messageId, {\n              success: false,\n              reason: 'Relay connection failed'\n            }, originalMessage);\n          });\n          return;\n        } else {\n          // No relays available, show error\n          updateMessageStatus(messageId, {\n            success: false,\n            reason: 'No relay servers available'\n          }, originalMessage);\n          return;\n        }\n      }\n\n      // Include the public key with the message for key exchange\n      if (keyPair && keyPair.publicKey) {\n        messageData.publicKey = keyPair.publicKey;\n      }\n\n      // Try to encrypt the message if we have the recipient's public key\n      if (encryptionEnabled && contactKeys[recipient]) {\n        try {\n          console.log('Attempting to encrypt message...');\n          const recipientPublicKey = await EncryptionUtils.importPublicKey(contactKeys[recipient]);\n          const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n\n          // Derive shared secret\n          const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, recipientPublicKey);\n\n          // Encrypt the message\n          const {\n            encryptedContent,\n            iv\n          } = await EncryptionUtils.encryptMessage(originalMessage, sharedSecret);\n\n          // Update message data\n          messageData.encrypted = true;\n          messageData.encryptedContent = encryptedContent;\n          messageData.iv = iv;\n          messageData.message = ''; // Clear plaintext message\n\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Encryption failed:', error);\n          // Fall back to unencrypted message\n          messageData.encrypted = false;\n          setSecurityAlert({\n            type: 'warning',\n            username: 'System',\n            message: `Message sent unencrypted: ${error.message}`\n          });\n        }\n      } else {\n        // No encryption key available\n        messageData.encrypted = false;\n\n        // Request the public key for future messages\n        if (encryptionEnabled && !contactKeys[recipient]) {\n          console.log(`No encryption key for ${recipient}, requesting...`);\n          requestPublicKey(recipient).then(key => {\n            if (key) {\n              console.log(`Received public key for ${recipient} for future encryption`);\n            }\n          });\n        }\n      }\n      console.log('Sending message:', messageData);\n\n      // Send through base node\n      const socket = socketRef.current;\n      if (!socket) {\n        setSecurityAlert({\n          type: 'error',\n          username: 'System',\n          message: 'No active connection to send message'\n        });\n        updateMessageStatus(messageId, {\n          success: false,\n          reason: 'No active connection'\n        }, originalMessage);\n        return;\n      }\n\n      // Log connection details before sending\n      console.log(`Sending through base node...`);\n\n      // Store message locally if offline messaging is enabled\n      if (offlineMessageEnabled) {\n        const pendingMsg = {\n          ...messageData,\n          sentAt: Date.now()\n        };\n        const updatedPending = [...pendingMessages, pendingMsg];\n        setPendingMessages(updatedPending);\n        localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n      }\n\n      // Create message object\n      const relayMessage = createRelayMessage(username, recipient, message, deviceId, messageData.encryptedContent, messageData.iv);\n\n      // Try to send message\n      const sendSuccess = await sendMessage(relayMessage, activeRelay.url);\n      if (sendSuccess) {\n        // Message sent successfully\n        setMessages(prev => [...prev, {\n          ...relayMessage,\n          from: username\n        }]);\n      } else {\n        // Handle send failure\n        setStatus('Message failed to send. Storing offline...');\n        storePendingMessage(relayMessage);\n        setPendingMessages(prev => [...prev, relayMessage]);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: `Error sending message: ${error.message}`\n      });\n    }\n  };\n  const handleRelayConfirm = async () => {\n    if (pendingRelayMessage) {\n      // Set TTL to maximum for relay messages\n      const messageData = {\n        ...pendingRelayMessage.messageData,\n        ttl: MessageUtils.calculateTTL(24) // 24 hours TTL for relay messages\n      };\n\n      // Send the message\n      const socket = relayConnection || socketRef.current;\n      if (socket) {\n        socket.emit('sendMessage', messageData, response => {\n          console.log('Relay message response:', response);\n          if (response && (response.success || response.delivered)) {\n            // Add message to local state\n            setMessages(msgs => [...msgs, {\n              from: username,\n              message: pendingRelayMessage.message,\n              fromDeviceId: deviceId,\n              timestamp: new Date(),\n              encrypted: messageData.encrypted,\n              isRelay: true\n            }]);\n            setMessage('');\n\n            // Show confirmation\n            setSecurityAlert({\n              type: 'info',\n              username: 'System',\n              message: `Message queued for relay delivery to ${recipient}`\n            });\n          } else {\n            const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Relay message delivery failed';\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: `Failed to send relay message: ${errorMsg}`\n            });\n          }\n        });\n      }\n    }\n\n    // Reset relay dialog\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n  const handleRelayCancel = () => {\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n\n    // Send typing indicator through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    if (socket && recipient && e.target.value.length > 0) {\n      socket.emit('typing', {\n        to: recipient\n      });\n    }\n  };\n  const handleDisconnect = () => {\n    setConnected(false);\n\n    // Disconnect from relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n      setActiveRelay(null);\n    }\n\n    // Disconnect from base node\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({\n      exists: false,\n      online: false\n    });\n    setStatus('Disconnected');\n\n    // Clear stored relay info\n    localStorage.removeItem('lastRelay');\n  };\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n\n  // Helper function to update message status after sending\n  const updateMessageStatus = (messageId, response, originalMessage) => {\n    console.log('Updating message status:', messageId, response);\n    setMessages(msgs => msgs.map(msg => {\n      // Find the pending message and update its status\n      if (msg.pending && msg.message === originalMessage) {\n        return {\n          ...msg,\n          pending: false,\n          delivered: !!(response && (response.success || response.delivered)),\n          failed: !(response && (response.success || response.delivered)),\n          failureReason: (response === null || response === void 0 ? void 0 : response.reason) || ''\n        };\n      }\n      return msg;\n    }));\n\n    // Show alert if message failed\n    if (!(response && (response.success || response.delivered))) {\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: `Failed to send message: ${(response === null || response === void 0 ? void 0 : response.reason) || 'Unknown error'}`\n      });\n    } else {\n      console.log('Message sent successfully');\n    }\n\n    // Remove from pending messages if delivered\n    if (offlineMessageEnabled && response && (response.success || response.delivered)) {\n      const updatedPending = pendingMessages.filter(msg => msg.messageId !== messageId);\n      setPendingMessages(updatedPending);\n      localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n    }\n  };\n\n  // Helper function to handle message responses consistently\n  const handleMessageResponse = (response, messageData, originalMessage, messageId) => {\n    // This function is kept for backward compatibility\n    updateMessageStatus(messageId, response, originalMessage);\n  };\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  const formatMessageTime = timestamp => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#0a0e14',\n      minHeight: '100vh',\n      color: '#a2aabc',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontFamily: '\"Fira Code\", monospace'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#171c28',\n        padding: 32,\n        borderRadius: 8,\n        minWidth: 400,\n        maxWidth: 600,\n        boxShadow: '0 4px 30px rgba(0, 255, 170, 0.15)',\n        border: '1px solid rgba(0, 255, 170, 0.3)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: 24\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              margin: 0,\n              color: '#5ccfe6',\n              fontFamily: '\"Fira Code\", monospace',\n              letterSpacing: '1px'\n            },\n            children: \"WhisperNet_\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1377,\n            columnNumber: 13\n          }, this), connected && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              color: '#bae67e',\n              marginTop: '4px'\n            },\n            children: [\"Logged in as: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 'bold'\n              },\n              children: username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1389,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1384,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px'\n          },\n          children: [encryptionEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: '#1c4b3c',\n              color: '#5ccfe6'\n            },\n            title: \"End-to-end encryption enabled\",\n            children: \"\\uD83D\\uDD12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1399,\n            columnNumber: 15\n          }, this), offlineMessageEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: '#3c1c4b',\n              color: '#c792ea'\n            },\n            title: \"Offline message delivery enabled\",\n            children: \"\\uD83D\\uDCE8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1410,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n              color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n              cursor: 'pointer'\n            },\n            onClick: () => setShowConnectionInfo(!showConnectionInfo),\n            children: relayStatus === 'online' ? '🟢' : '🔴'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1420,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1370,\n        columnNumber: 9\n      }, this), showConnectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#0d1117',\n          padding: 12,\n          borderRadius: 4,\n          fontSize: 12,\n          fontFamily: 'monospace',\n          marginBottom: 16,\n          border: '1px solid #1e2d3d'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1443,\n          columnNumber: 13\n        }, this), connected && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Socket ID: \", connectionDetails.socketId || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1446,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Transport: \", connectionDetails.transport || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1447,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Base Node: \", connectionDetails.baseNodeUrl || BASE_NODE_URL]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1448,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Base Node Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            },\n            children: relayStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1451,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 13\n        }, this), activeRelay && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Relay Node: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: '#bae67e'\n            },\n            children: [activeRelay.ip, \":\", activeRelay.port]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1455,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1455,\n          columnNumber: 15\n        }, this), deviceId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Device ID: \", deviceId.substring(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1459,\n          columnNumber: 26\n        }, this), connected && onlineUsers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 8\n          },\n          children: [\"Online Users: \", onlineUsers.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1461,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 11\n      }, this), securityAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#4b1c1c',\n          color: '#ff8f40',\n          padding: 12,\n          borderRadius: 4,\n          marginBottom: 16,\n          position: 'relative',\n          fontSize: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 20\n          },\n          children: securityAlert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1476,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            position: 'absolute',\n            top: 8,\n            right: 8,\n            background: 'none',\n            border: 'none',\n            color: '#ff8f40',\n            cursor: 'pointer',\n            fontSize: 16\n          },\n          onClick: dismissAlert,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1477,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1467,\n        columnNumber: 11\n      }, this), !connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 16,\n            fontSize: 14,\n            color: '#5ccfe6'\n          },\n          children: [getTimestamp(), \" Initializing secure connection...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleUsernameSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              width: '100%',\n              padding: 10,\n              marginBottom: 12,\n              borderRadius: 4,\n              border: '1px solid #1e2d3d',\n              background: '#0d1117',\n              color: '#a2aabc',\n              fontSize: 16,\n              fontFamily: '\"Fira Code\", monospace',\n              boxSizing: 'border-box'\n            },\n            placeholder: \"Enter username\",\n            value: username,\n            onChange: e => setUsername(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1501,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '100%',\n              padding: 10,\n              borderRadius: 4,\n              background: relayStatus === 'online' ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n              color: '#171c28',\n              fontWeight: 'bold',\n              fontSize: 16,\n              border: 'none',\n              cursor: relayStatus === 'online' ? 'pointer' : 'not-allowed',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            type: \"submit\",\n            disabled: relayStatus !== 'online',\n            children: relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1519,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1500,\n          columnNumber: 13\n        }, this), relayStatus !== 'online' && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            width: '100%',\n            padding: 8,\n            marginTop: 8,\n            borderRadius: 4,\n            background: '#4b1c1c',\n            color: '#ff8f40',\n            fontSize: 14,\n            border: 'none',\n            cursor: 'pointer',\n            fontFamily: '\"Fira Code\", monospace'\n          },\n          onClick: retryConnection,\n          children: \"RETRY CONNECTION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1541,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 12,\n            color: '#ff3333',\n            textAlign: 'center',\n            fontSize: 14\n          },\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1559,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSend,\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            marginBottom: 16\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginBottom: 8\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Recipient username\",\n              value: recipient,\n              onChange: handleRecipientChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1567,\n              columnNumber: 17\n            }, this), recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                marginLeft: 8,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 8,\n                  height: 8,\n                  borderRadius: '50%',\n                  background: recipientStatus.online ? '#bae67e' : '#ff8f40',\n                  marginRight: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1591,\n                columnNumber: 21\n              }, this), recipientStatus.exists ? recipientStatus.online ? 'ONLINE' : 'OFFLINE' : 'NOT FOUND']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1585,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1566,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Type a message\",\n              value: message,\n              onChange: handleMessageChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1605,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '0 18px',\n                borderRadius: 4,\n                background: recipientStatus.exists ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n                color: '#171c28',\n                fontWeight: 'bold',\n                fontSize: 14,\n                border: 'none',\n                cursor: recipientStatus.exists ? 'pointer' : 'not-allowed',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              type: \"submit\",\n              disabled: !recipientStatus.exists,\n              children: \"SEND\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1622,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1604,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1565,\n          columnNumber: 13\n        }, this), typing && recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 12,\n            color: '#5ccfe6',\n            marginBottom: 8\n          },\n          children: [recipient, \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1645,\n          columnNumber: 15\n        }, this), showRelayDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: 'rgba(0, 0, 0, 0.8)',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 1000\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              background: '#0d1117',\n              borderRadius: 8,\n              padding: 24,\n              maxWidth: 500,\n              width: '90%',\n              border: '1px solid #1e2d3d',\n              boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                color: '#bae67e',\n                marginTop: 0\n              },\n              children: \"Relay Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1673,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: '#a2aabc',\n                lineHeight: 1.5\n              },\n              children: [\"The recipient \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: '#5ccfe6'\n                },\n                children: recipient\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1675,\n                columnNumber: 35\n              }, this), \" was not found on the network.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1674,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: '#a2aabc',\n                lineHeight: 1.5\n              },\n              children: [\"You can send this message as a \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"relay message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1678,\n                columnNumber: 52\n              }, this), \". It will be stored on the network and delivered when the recipient comes online.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1677,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                background: '#171c28',\n                padding: 12,\n                borderRadius: 4,\n                marginBottom: 16\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  color: '#ff8f40',\n                  marginTop: 0\n                },\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"How it works:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1681,\n                  columnNumber: 67\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1681,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                style: {\n                  color: '#a2aabc',\n                  paddingLeft: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Your message will be stored encrypted on relay servers\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1683,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"It will be delivered when the recipient connects\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1684,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Messages expire after 24 hours if not delivered\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1685,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"No guarantee of delivery if the user never connects\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1686,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1682,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1680,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'flex-end',\n                gap: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleRelayCancel,\n                style: {\n                  padding: '8px 16px',\n                  background: '#4b1c1c',\n                  color: '#ff8f40',\n                  border: 'none',\n                  borderRadius: 4,\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                },\n                children: \"CANCEL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1690,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleRelayConfirm,\n                style: {\n                  padding: '8px 16px',\n                  background: 'linear-gradient(90deg, #5ccfe6, #bae67e)',\n                  color: '#171c28',\n                  fontWeight: 'bold',\n                  border: 'none',\n                  borderRadius: 4,\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                },\n                children: \"SEND RELAY MESSAGE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1704,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1689,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1664,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1652,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#0d1117',\n            borderRadius: 4,\n            padding: 12,\n            minHeight: 200,\n            maxHeight: 350,\n            overflowY: 'auto',\n            marginBottom: 12,\n            border: '1px solid #1e2d3d',\n            fontFamily: 'monospace'\n          },\n          children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: '#5ccfe6',\n              fontSize: 14\n            },\n            children: [getTimestamp(), \" Connection established. Awaiting transmission...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1736,\n            columnNumber: 17\n          }, this) : messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 12,\n              padding: 8,\n              borderRadius: 4,\n              background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\n              borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: 4,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: msg.from === username ? '#5ccfe6' : '#bae67e',\n                  fontWeight: 'bold'\n                },\n                children: msg.from === username ? 'YOU' : msg.from\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1754,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: '4px'\n                },\n                children: [msg.encrypted && /*#__PURE__*/_jsxDEV(\"span\", {\n                  title: \"End-to-end encrypted\",\n                  style: {\n                    fontSize: 10\n                  },\n                  children: \"\\uD83D\\uDD12\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1762,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: '#636b78'\n                  },\n                  children: formatMessageTime(msg.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1764,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1760,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1748,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                wordBreak: 'break-word',\n                fontSize: 14\n              },\n              children: [msg.message, msg.isRelay && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 10,\n                  color: '#ff8f40',\n                  marginLeft: 6,\n                  padding: '2px 4px',\n                  background: 'rgba(255, 143, 64, 0.1)',\n                  borderRadius: 2\n                },\n                children: \"RELAY\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1770,\n                columnNumber: 25\n              }, this), msg.pending && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 10,\n                  color: '#ffcc66',\n                  marginLeft: 6,\n                  padding: '2px 4px',\n                  background: 'rgba(255, 204, 102, 0.1)',\n                  borderRadius: 2\n                },\n                children: \"SENDING...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1780,\n                columnNumber: 25\n              }, this), msg.failed && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 10,\n                  color: '#ff3333',\n                  marginLeft: 6,\n                  padding: '2px 4px',\n                  background: 'rgba(255, 51, 51, 0.1)',\n                  borderRadius: 2,\n                  cursor: 'pointer',\n                  title: msg.failureReason || 'Failed to send'\n                },\n                children: \"FAILED\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1790,\n                columnNumber: 25\n              }, this), msg.delivered && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 10,\n                  color: '#bae67e',\n                  marginLeft: 6,\n                  padding: '2px 4px',\n                  background: 'rgba(186, 230, 126, 0.1)',\n                  borderRadius: 2\n                },\n                children: \"DELIVERED\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1802,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1767,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1741,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1815,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1724,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              padding: '8px 16px',\n              borderRadius: 4,\n              background: '#4b1c1c',\n              color: '#ff8f40',\n              fontSize: 14,\n              border: 'none',\n              cursor: 'pointer',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            onClick: handleDisconnect,\n            children: \"DISCONNECT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1819,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              color: '#636b78',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: 8,\n                height: 8,\n                borderRadius: '50%',\n                background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                marginRight: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1841,\n              columnNumber: 17\n            }, this), status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1835,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1818,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1361,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1352,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OmyuETeI6enBHZS3d7OJqEYaqy4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","axios","FingerprintJS","EncryptionUtils","MessageUtils","createRelayMessage","sendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","BASE_NODE_URL","process","env","REACT_APP_BASE_NODE_URL","fpPromise","load","generateRandomUsername","adjectives","animals","randomAdjective","Math","floor","random","length","randomAnimal","randomNumber","App","_s","username","setUsername","recipient","setRecipient","message","setMessage","messages","setMessages","status","setStatus","connected","setConnected","typing","setTyping","deviceId","setDeviceId","connectionDetails","setConnectionDetails","relayStatus","setRelayStatus","availableRelays","setAvailableRelays","activeRelay","setActiveRelay","relayConnection","setRelayConnection","recipientStatus","setRecipientStatus","exists","online","isCheckingUsername","setIsCheckingUsername","usernameAvailable","setUsernameAvailable","onlineUsers","setOnlineUsers","showConnectionInfo","setShowConnectionInfo","relayServerUrl","setRelayServerUrl","securityAlert","setSecurityAlert","pendingMessages","setPendingMessages","showNewDeviceWarning","setShowNewDeviceWarning","newDeviceUsername","setNewDeviceUsername","encryptionEnabled","setEncryptionEnabled","offlineMessageEnabled","setOfflineMessageEnabled","keyPair","setKeyPair","publicKeyBase64","setPublicKeyBase64","contactKeys","setContactKeys","showRelayDialog","setShowRelayDialog","pendingRelayMessage","setPendingRelayMessage","socketRef","messagesEndRef","typingTimeoutRef","pingIntervalRef","encryptionKeyRef","pendingKeyExchangeRef","initializeApp","fp","result","get","visitorId","localStorage","setItem","storedKeyPair","getItem","parsedKeyPair","JSON","parse","importedPublicKey","importPublicKey","publicKey","exportedPublicKeyBase64","exportPublicKeyBase64","newKeyPair","generateKeyPair","publicKeyJwk","exportKeyToJwk","privateKeyJwk","privateKey","keyPairToStore","stringify","storedContactKeys","storedPendingMessages","error","console","checkRelayStatus","response","timeout","log","tempSocket","transports","reconnectionAttempts","reconnectionDelay","forceNew","connectionTimeout","setTimeout","disconnect","on","clearTimeout","err","connectToBaseNode","type","current","clearInterval","query","id","socketId","transport","engine","name","baseNodeUrl","emit","success","getOnlineUsers","getAvailableRelays","startPingInterval","offlineMessages","handleOfflineMessages","knownDevices","isNewDevice","includes","errorMsg","reason","data","from","fromDeviceId","timestamp","encrypted","encryptedContent","iv","messageId","checkDeviceIdChange","updatedKeys","pendingRequests","filter","p","forEach","pending","callback","finalMessage","isEncrypted","key","requestPublicKey","Error","decryptMessage","msgs","Date","now","delivered","relays","onlineRelays","relay","connectToRelay","pendingExchanges","pendingForUser","relayId","prev","updated","map","r","user","u","typingUser","users","Array","isArray","relayUrl","ip","port","socket","otherRelays","previousMessages","msg","displayMessage","isRelay","setInterval","checkRecipientStatus","checkMethod","timeoutId","_messagesEndRef$curre","scrollIntoView","behavior","handleUsernameSubmit","e","preventDefault","trim","availableResponse","available","newUsername","handleRecipientChange","target","value","msgData","decryptedMessage","Promise","resolve","stillPending","find","warn","sender","importPrivateKey","senderPublicKey","sharedSecret","deriveSharedSecret","encryptMessage","recipientPublicKey","newDeviceId","handleSend","generateMessageId","toISOString","originalMessage","messageData","to","ttl","calculateTTL","newMessageId","useRelay","updateMessageStatus","then","pendingMsg","sentAt","updatedPending","relayMessage","sendSuccess","url","storePendingMessage","handleRelayConfirm","handleRelayCancel","handleMessageChange","handleDisconnect","removeItem","dismissAlert","failed","failureReason","handleMessageResponse","retryConnection","getTimestamp","getHours","toString","padStart","getMinutes","getSeconds","formatMessageTime","date","style","background","minHeight","color","display","alignItems","justifyContent","fontFamily","children","padding","borderRadius","minWidth","maxWidth","boxShadow","border","marginBottom","flexDirection","margin","letterSpacing","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","marginTop","fontWeight","gap","title","cursor","onClick","substring","join","position","marginRight","top","right","onSubmit","width","boxSizing","placeholder","onChange","required","disabled","textAlign","flex","marginLeft","height","left","bottom","zIndex","lineHeight","paddingLeft","maxHeight","overflowY","i","borderLeft","wordBreak","ref","_c","$RefreshReg$"],"sources":["C:/Users/siddharth/Documents/GitHub/WhisperNet/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport * as EncryptionUtils from './encryptionUtils';\nimport * as MessageUtils from './messageUtils';\nimport { createRelayMessage, sendMessage } from './messageUtils';\n\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\n\n// Random username generator\nconst generateRandomUsername = () => {\n  const adjectives = ['Swift', 'Brave', 'Clever', 'Mighty', 'Noble', 'Wise', 'Calm', 'Bold', 'Bright', 'Agile'];\n  const animals = ['Fox', 'Eagle', 'Wolf', 'Deer', 'Hawk', 'Owl', 'Bear', 'Lion', 'Tiger', 'Dolphin'];\n  const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n  const randomNumber = Math.floor(Math.random() * 1000);\n  return `${randomAdjective}${randomAnimal}${randomNumber}`;\n};\n\nfunction App() {\n  // State for user information\n  const [username, setUsername] = useState(generateRandomUsername());\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [status, setStatus] = useState('Disconnected');\n  const [connected, setConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [relayStatus, setRelayStatus] = useState('unknown');\n  const [availableRelays, setAvailableRelays] = useState([]);\n  const [activeRelay, setActiveRelay] = useState(null);\n  const [relayConnection, setRelayConnection] = useState(null);\n  const [recipientStatus, setRecipientStatus] = useState({ exists: false, online: false });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('');\n  \n  // Security and messaging state\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [pendingMessages, setPendingMessages] = useState([]);\n  const [showNewDeviceWarning, setShowNewDeviceWarning] = useState(false);\n  const [newDeviceUsername, setNewDeviceUsername] = useState('');\n  \n  // Encryption state\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [offlineMessageEnabled, setOfflineMessageEnabled] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeyBase64, setPublicKeyBase64] = useState(null);\n  const [contactKeys, setContactKeys] = useState({});\n  \n  // State for relay message dialog\n  const [showRelayDialog, setShowRelayDialog] = useState(false);\n  const [pendingRelayMessage, setPendingRelayMessage] = useState(null);\n  \n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const encryptionKeyRef = useRef({});\n  const pendingKeyExchangeRef = useRef([]);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        // Generate device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n        localStorage.setItem('deviceId', visitorId);\n        \n        // Initialize encryption keys\n        const storedKeyPair = localStorage.getItem('keyPair');\n        if (storedKeyPair) {\n          // Use existing keys if available\n          const parsedKeyPair = JSON.parse(storedKeyPair);\n          setKeyPair(parsedKeyPair);\n          const importedPublicKey = await EncryptionUtils.importPublicKey(parsedKeyPair.publicKey);\n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(importedPublicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        } else {\n          // Generate new keys if none exist\n          const newKeyPair = await EncryptionUtils.generateKeyPair();\n          const publicKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.publicKey);\n          const privateKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.privateKey);\n          \n          const keyPairToStore = {\n            publicKey: publicKeyJwk,\n            privateKey: privateKeyJwk\n          };\n          \n          localStorage.setItem('keyPair', JSON.stringify(keyPairToStore));\n          setKeyPair(keyPairToStore);\n          \n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(newKeyPair.publicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        }\n        \n        // Load stored contact keys\n        const storedContactKeys = localStorage.getItem('contactKeys');\n        if (storedContactKeys) {\n          setContactKeys(JSON.parse(storedContactKeys));\n        }\n        \n        // Load pending messages\n        const storedPendingMessages = localStorage.getItem('pendingMessages');\n        if (storedPendingMessages) {\n          setPendingMessages(JSON.parse(storedPendingMessages));\n        }\n      } catch (error) {\n        console.error('Error initializing app:', error);\n        setStatus('Error initializing encryption. Please refresh.');\n      }\n    };\n    \n    initializeApp();\n  }, []);\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    \n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, { \n        timeout: 5000 \n      });\n      \n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n    \n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    \n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    \n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    \n    tempSocket.on('connect_error', (err) => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n      \n      // Check if keys are present in localStorage\n      const storedContactKeys = localStorage.getItem('contactKeys');\n      if (!storedContactKeys) {\n        setSecurityAlert({\n          type: 'warning',\n          username: 'System',\n          message: 'No encryption keys found. We cannot verify who you\\'re talking to.'\n        });\n      }\n    }\n    \n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    \n    console.log('Connecting to base node:', BASE_NODE_URL);\n    setStatus('Connecting to base node...');\n    \n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: { \n        deviceId,\n        username \n      },\n      forceNew: true\n    });\n    \n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node');\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL\n      });\n      \n      // Register with base node including public key for encryption\n      socketRef.current.emit('registerUser', { \n        username, \n        deviceId,\n        publicKey: publicKeyBase64\n      }, (response) => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully');\n          \n          // Get initial data\n          getOnlineUsers();\n          \n          // Get available relay servers\n          getAvailableRelays();\n          \n          startPingInterval();\n          \n          // Handle any offline messages that were delivered on registration\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n          \n          // Handle any known devices warning\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n          \n        } else {\n          const errorMsg = response?.reason || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            type: 'error',\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`\n          });\n        }\n      });\n    });\n    \n    socketRef.current.on('connect_error', (err) => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n    });\n    \n    socketRef.current.on('disconnect', (reason) => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n      setRelayStatus('offline');\n      clearInterval(pingIntervalRef.current);\n      \n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect') {\n        setTimeout(() => {\n          if (connected) {\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n    \n    // Message handling\n    socketRef.current.on('message', async (data) => {\n      console.log('Received message:', data);\n      const { from, message, fromDeviceId, timestamp, encrypted, encryptedContent, iv, messageId, publicKey } = data;\n      \n      // Acknowledge receipt if message has an ID (for offline message tracking)\n      if (messageId) {\n        socketRef.current.emit('confirmMessageDelivery', { messageId });\n      }\n      \n      // Check for device ID changes and show security alert if needed\n      checkDeviceIdChange(from, fromDeviceId);\n      \n      // Store sender's public key if provided\n      if (publicKey && (!contactKeys[from] || contactKeys[from] !== publicKey)) {\n        console.log(`Received public key from ${from} in direct message`);\n        const updatedKeys = { ...contactKeys, [from]: publicKey };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n        \n        // Resolve any pending key exchange promises\n        const pendingRequests = pendingKeyExchangeRef.current\n          .filter(p => p.username === from);\n          \n        if (pendingRequests.length > 0) {\n          console.log(`Resolving ${pendingRequests.length} pending key requests for ${from}`);\n          pendingRequests.forEach(pending => {\n            if (pending.callback) pending.callback(publicKey);\n          });\n          \n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current\n            .filter(p => p.username !== from);\n        }\n      }\n      \n      // Handle encrypted messages\n      let finalMessage = message;\n      let isEncrypted = false;\n      \n      if (encrypted && encryptedContent && iv) {\n        isEncrypted = true;\n        try {\n          // Get sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            const key = await requestPublicKey(from);\n            if (!key) {\n              finalMessage = '[Encrypted message - no decryption key available]';\n              throw new Error('No decryption key available');\n            }\n          }\n          \n          // Decrypt the message if we have the key\n          finalMessage = await decryptMessage(encryptedContent, iv, from);\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          if (finalMessage === message) { // Only override if not already set to error message\n            finalMessage = '[Encrypted message - unable to decrypt]';\n          }\n        }\n      }\n      \n      // Add message to state\n      setMessages(msgs => [...msgs, { \n        from, \n        message: finalMessage, \n        fromDeviceId, \n        timestamp: new Date(timestamp || Date.now()),\n        encrypted: isEncrypted,\n        delivered: true\n      }]);\n    });\n    \n    // Handle relay server list updates\n    socketRef.current.on('relayList', (relays) => {\n      console.log('Received relay list:', relays);\n      setAvailableRelays(relays);\n      \n      // If we're not connected to a relay yet, connect to the best one\n      if (!activeRelay && relays.length > 0) {\n        const onlineRelays = relays.filter(relay => relay.status === 'online');\n        if (onlineRelays.length > 0) {\n          connectToRelay(onlineRelays[0]);\n        }\n      }\n    });\n    \n    // Handle public key exchange events\n    socketRef.current.on('publicKey', (data) => {\n      console.log('Received public key:', data);\n      const { username, publicKey } = data;\n      \n      if (username && publicKey) {\n        // Store the public key\n        const updatedKeys = { ...contactKeys, [username]: publicKey };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n        \n        // If we have pending key exchanges, process them\n        const pendingExchanges = pendingKeyExchangeRef.current;\n        const pendingForUser = pendingExchanges.filter(p => p.username === username);\n        \n        if (pendingForUser.length > 0) {\n          pendingForUser.forEach(pending => {\n            if (pending.callback) pending.callback(publicKey);\n          });\n          \n          // Remove processed exchanges\n          pendingKeyExchangeRef.current = pendingExchanges.filter(p => p.username !== username);\n        }\n      }\n    });\n    \n    // Handle relay status updates\n    socketRef.current.on('relayStatusUpdate', (data) => {\n      console.log('Relay status update:', data);\n      const { relayId, status } = data;\n      \n      setAvailableRelays(prev => {\n        const updated = prev.map(relay => {\n          if (relay.relayId === relayId) {\n            return { ...relay, status };\n          }\n          return relay;\n        });\n        \n        // If the relay we're connected to went offline, connect to another one\n        if (activeRelay && activeRelay.relayId === relayId && status === 'offline') {\n          const onlineRelays = updated.filter(r => r.status === 'online');\n          if (onlineRelays.length > 0) {\n            // Schedule a reconnect to avoid doing it during this state update\n            setTimeout(() => connectToRelay(onlineRelays[0]), 100);\n          }\n        }\n        \n        return updated;\n      });\n    });\n    \n    // User status updates\n    socketRef.current.on('userStatusUpdate', (data) => {\n      console.log('User status update:', data);\n      const { username: user, online } = data;\n      \n      if (user === recipient) {\n        setRecipientStatus(prev => ({ ...prev, online }));\n      }\n      \n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n    });\n    \n    // Typing indicators\n    socketRef.current.on('userTyping', (data) => {\n      const { username: typingUser } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n    \n    // Error handling\n    socketRef.current.on('error', (error) => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`\n      });\n    });\n  };\n\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, (users) => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n  \n  // Get available relay servers from base node\n  const getAvailableRelays = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getRelays', {}, (relays) => {\n        console.log('Available relays:', relays);\n        if (Array.isArray(relays)) {\n          setAvailableRelays(relays);\n          \n          // Connect to the first available relay if we're not connected to any\n          const onlineRelays = relays.filter(relay => relay.status === 'online');\n          if (onlineRelays.length > 0 && !activeRelay) {\n            connectToRelay(onlineRelays[0]);\n          }\n        }\n      });\n    }\n  };\n  \n  // Connect to a relay server\n  const connectToRelay = (relay, callback) => {\n    // Handle both relay object and direct URL string\n    let relayUrl;\n    if (typeof relay === 'string') {\n      relayUrl = relay;\n    } else if (relay && relay.ip && relay.port) {\n      relayUrl = `http://${relay.ip}:${relay.port}`;\n    } else {\n      console.error('Invalid relay information:', relay);\n      return;\n    }\n    \n    // Disconnect from current relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n    }\n    \n    console.log(`Connecting to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay...`);\n    setRelayServerUrl(relayUrl);\n    \n    const socket = io(relayUrl, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: { \n        deviceId,\n        username \n      },\n      forceNew: true\n    });\n    \n    socket.on('connect', () => {\n      console.log(`Connected to relay with socket ID: ${socket.id}`);\n      setStatus(`Connected to relay. Registering...`);\n      \n      // Register with the relay including public key\n      socket.emit('registerUser', { \n        username, \n        deviceId,\n        publicKey: publicKeyBase64\n      }, (response) => {\n        console.log('Relay registration response:', response);\n        if (response && response.success) {\n          setActiveRelay(relay);\n          setRelayConnection(socket);\n          setStatus(`Connected to relay`);\n          \n          // Store relay info for future use\n          localStorage.setItem('lastRelay', JSON.stringify(relay));\n          \n          // Handle any offline messages that were delivered on connect\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n          \n          // Handle any new device warnings\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n          \n          // Execute callback if provided\n          if (typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = response?.reason || 'Registration with relay failed';\n          setStatus(`Relay registration failed: ${errorMsg}`);\n          socket.disconnect();\n        }\n      });\n    });\n    \n    socket.on('connect_error', (err) => {\n      console.error(`Relay connection error: ${err.message}`);\n      setStatus(`Relay connection failed: ${err.message}`);\n      \n      // Try another relay if available\n      const otherRelays = availableRelays.filter(r => \n        r.relayId !== relay.relayId && r.status === 'online'\n      );\n      \n      if (otherRelays.length > 0) {\n        setTimeout(() => connectToRelay(otherRelays[0]), 1000);\n      } else {\n        setStatus('No available relays. Using base node directly.');\n      }\n    });\n    \n    socket.on('disconnect', (reason) => {\n      console.log(`Disconnected from relay: ${reason}`);\n      setStatus(`Disconnected from relay: ${reason}`);\n      setActiveRelay(null);\n      \n      // Try to reconnect to another relay if available\n      const onlineRelays = availableRelays.filter(r => r.status === 'online');\n      if (onlineRelays.length > 0) {\n        setTimeout(() => connectToRelay(onlineRelays[0]), 2000);\n      }\n    });\n    \n    // Message handling\n    socket.on('receiveMessage', async (data) => {\n      console.log('Received message from relay:', data);\n      const { from, message, fromDeviceId, timestamp, encrypted, encryptedContent, iv, publicKey } = data;\n      \n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && \n          previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          type: 'warning',\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`\n        });\n      }\n      \n      // Store sender's public key if provided\n      if (publicKey && !contactKeys[from]) {\n        console.log(`Received public key from ${from} in message`);\n        const updatedKeys = { ...contactKeys, [from]: publicKey };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n        \n        // Resolve any pending key exchange promises\n        const pendingRequests = pendingKeyExchangeRef.current\n          .filter(p => p.username === from);\n          \n        if (pendingRequests.length > 0) {\n          console.log(`Resolving ${pendingRequests.length} pending key requests for ${from}`);\n          pendingRequests.forEach(p => p.callback(publicKey));\n          \n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current\n            .filter(p => p.username !== from);\n        }\n      }\n      \n      // Handle encrypted messages\n      let displayMessage = message;\n      let isEncrypted = false;\n      \n      if (encrypted && encryptedContent && iv) {\n        isEncrypted = true;\n        try {\n          // Try to decrypt if we have the key\n          if (contactKeys[from]) {\n            displayMessage = await decryptMessage(encryptedContent, iv, from);\n          } else {\n            // Request the key if we don't have it\n            const key = await requestPublicKey(from);\n            if (key) {\n              displayMessage = await decryptMessage(encryptedContent, iv, from);\n            } else {\n              displayMessage = '[Encrypted message - no decryption key available]';\n            }\n          }\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          displayMessage = '[Encrypted message - unable to decrypt]';\n        }\n      }\n      \n      // Add to messages\n      setMessages(msgs => [...msgs, { \n        from, \n        message: displayMessage, \n        fromDeviceId, \n        timestamp: new Date(timestamp || new Date()),\n        encrypted: isEncrypted,\n        isRelay: true\n      }]);\n    });\n    \n    // Typing indicators\n    socket.on('userTyping', (data) => {\n      const { username: typingUser } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n    \n    return socket;\n  };\n\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        socketRef.current.emit('ping', {}, (response) => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n      }\n    }, 30000);\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient) {\n      setRecipientStatus({ exists: false, online: false });\n      return;\n    }\n    \n    // Check through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    \n    if (!socket) {\n      setRecipientStatus({ exists: false, online: false });\n      return;\n    }\n    \n    const checkMethod = relayConnection ? 'checkRecipient' : 'checkUser';\n    \n    socket.emit(checkMethod, { username: recipient }, (response) => {\n      console.log('Recipient check response:', response);\n      setRecipientStatus(response || { exists: false, online: false });\n    });\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n    \n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleUsernameSubmit = (e) => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      // Check if username exists before connecting\n      const tempSocket = io(BASE_NODE_URL, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 2,\n        reconnectionDelay: 1000,\n        timeout: 5000,\n        forceNew: true\n      });\n      \n      setStatus('Verifying username...');\n      setIsCheckingUsername(true);\n      \n      tempSocket.on('connect', () => {\n        // First check if username is available (not registered)\n        tempSocket.emit('checkUsernameAvailable', { username: username.trim() }, (availableResponse) => {\n          console.log('Username availability response:', availableResponse);\n          \n          if (availableResponse && availableResponse.available) {\n            // Username is available for registration (new user)\n            console.log('Username is available for registration');\n            setUsernameAvailable(true);\n            setConnected(true);\n            tempSocket.disconnect();\n          } else {\n            // Username exists, check if it's online\n            tempSocket.emit('checkUser', { username: username.trim() }, (response) => {\n              console.log('Username check response:', response);\n              setIsCheckingUsername(false);\n              \n              if (response && response.exists) {\n                // Username exists, proceed with connection\n                setConnected(true);\n                tempSocket.disconnect();\n              } else {\n                // Username doesn't exist but isn't available (being cleaned up)\n                setStatus('Username not available');\n                // Generate a new random username\n                const newUsername = generateRandomUsername();\n                setUsername(newUsername);\n                setSecurityAlert({\n                  type: 'info',\n                  username: 'System',\n                  message: `That username is not available. We've generated a new username for you: ${newUsername}`\n                });\n                tempSocket.disconnect();\n              }\n            });\n          }\n        });\n      });\n      \n      tempSocket.on('connect_error', (err) => {\n        console.error('Socket connection error:', err);\n        setStatus('Connection error. Please try again.');\n        setIsCheckingUsername(false);\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: 'Cannot connect: Base node is offline'\n      });\n    }\n  };\n\n  const handleRecipientChange = (e) => {\n    setRecipient(e.target.value.trim());\n  };\n\n  // Handle offline messages received on connect\n  const handleOfflineMessages = (offlineMessages) => {\n    if (!Array.isArray(offlineMessages) || offlineMessages.length === 0) return;\n    \n    console.log('Processing offline messages:', offlineMessages);\n    \n    // Process each offline message\n    offlineMessages.forEach(async (msgData) => {\n      try {\n        const { from, message, encrypted, encryptedContent, iv, fromDeviceId, timestamp, messageId } = msgData;\n        \n        // Acknowledge receipt to remove from storage\n        if (socketRef.current && messageId) {\n          socketRef.current.emit('confirmMessageDelivery', { messageId });\n        }\n        \n        // If message is encrypted, decrypt it\n        let decryptedMessage = message;\n        if (encrypted && encryptedContent && iv) {\n          // Get the sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            await requestPublicKey(from);\n          }\n          \n          // Try to decrypt if we have the key\n          if (contactKeys[from]) {\n            try {\n              decryptedMessage = await decryptMessage(encryptedContent, iv, from);\n            } catch (error) {\n              console.error('Failed to decrypt offline message:', error);\n              decryptedMessage = '[Encrypted message - unable to decrypt]';\n            }\n          } else {\n            decryptedMessage = '[Encrypted message - no decryption key available]';\n          }\n        }\n        \n        // Add to messages\n        setMessages(msgs => [...msgs, {\n          from,\n          message: decryptedMessage,\n          fromDeviceId,\n          timestamp: new Date(timestamp || Date.now()),\n          encrypted\n        }]);\n        \n        // Check for device ID changes\n        checkDeviceIdChange(from, fromDeviceId);\n      } catch (error) {\n        console.error('Error processing offline message:', error);\n      }\n    });\n  };\n  \n  // Request public key from a user\n  const requestPublicKey = async (username) => {\n    if (!socketRef.current) return null;\n    \n    return new Promise((resolve) => {\n      // Check if we already have the key\n      if (contactKeys[username]) {\n        console.log(`Using cached public key for ${username}`);\n        resolve(contactKeys[username]);\n        return;\n      }\n      \n      console.log(`Requesting public key for ${username}`);\n      \n      // Add to pending key exchanges\n      pendingKeyExchangeRef.current = [\n        ...pendingKeyExchangeRef.current,\n        { username, callback: resolve, timestamp: Date.now() }\n      ];\n      \n      socketRef.current.emit('requestPublicKey', { username }, (response) => {\n        console.log('Public key request response:', response);\n        \n        if (response && response.publicKey) {\n          // Store the public key\n          const updatedKeys = { ...contactKeys, [username]: response.publicKey };\n          setContactKeys(updatedKeys);\n          localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n          resolve(response.publicKey);\n          \n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current\n            .filter(p => p.username !== username);\n        } else {\n          console.error('Failed to get public key for:', username);\n          resolve(null);\n        }\n      });\n      \n      // Set timeout to prevent hanging\n      setTimeout(() => {\n        const stillPending = pendingKeyExchangeRef.current\n          .find(p => p.username === username && p.callback === resolve);\n          \n        if (stillPending) {\n          console.warn(`Public key request for ${username} timed out`);\n          resolve(null);\n          \n          // Remove from pending\n          pendingKeyExchangeRef.current = pendingKeyExchangeRef.current\n            .filter(p => !(p.username === username && p.callback === resolve));\n        }\n      }, 5000); // 5 second timeout\n    });\n  };\n  \n  // Decrypt a message using the sender's public key\n  const decryptMessage = async (encryptedContent, iv, sender) => {\n    try {\n      if (!keyPair || !contactKeys[sender]) {\n        throw new Error('Missing keys for decryption');\n      }\n      \n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const senderPublicKey = await EncryptionUtils.importPublicKey(contactKeys[sender]);\n      \n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, senderPublicKey);\n      \n      // Decrypt the message\n      return await EncryptionUtils.decryptMessage(encryptedContent, iv, sharedSecret);\n    } catch (error) {\n      console.error('Decryption error:', error);\n      throw error;\n    }\n  };\n  \n  // Encrypt a message using the recipient's public key\n  const encryptMessage = async (message, recipient) => {\n    try {\n      if (!keyPair || !contactKeys[recipient]) {\n        throw new Error('Missing keys for encryption');\n      }\n      \n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const recipientPublicKey = await EncryptionUtils.importPublicKey(contactKeys[recipient]);\n      \n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, recipientPublicKey);\n      \n      // Encrypt the message\n      return await EncryptionUtils.encryptMessage(message, sharedSecret);\n    } catch (error) {\n      console.error('Encryption error:', error);\n      throw error;\n    }\n  };\n  \n  // Check if a user is messaging from a new device\n  const checkDeviceIdChange = (username, newDeviceId) => {\n    // Get previous messages from this user\n    const previousMessages = messages.filter(msg => msg.from === username);\n    \n    if (previousMessages.length > 0 && \n        previousMessages[0].fromDeviceId && \n        previousMessages[0].fromDeviceId !== newDeviceId) {\n      // Show warning about new device\n      setNewDeviceUsername(username);\n      setShowNewDeviceWarning(true);\n      setSecurityAlert({\n        type: 'warning',\n        username,\n        message: `Warning: ${username} appears to be messaging from a new device!`\n      });\n    }\n  };\n\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (!recipient || !message.trim()) return;\n    \n    try {\n      const messageId = MessageUtils.generateMessageId();\n      const timestamp = new Date().toISOString();\n      const originalMessage = message.trim();\n      \n      // Prepare base message data\n      const messageData = {\n        to: recipient,\n        message: originalMessage,\n        deviceId,\n        timestamp,\n        messageId,\n        ttl: offlineMessageEnabled ? MessageUtils.calculateTTL() : 0 // 4 hours TTL if offline messaging enabled\n      };\n      \n      // Add message to local state immediately for better UX\n      const newMessageId = `msg-${Date.now()}`;\n      setMessages(msgs => [...msgs, { \n        id: newMessageId,\n        from: username, \n        message: originalMessage, \n        fromDeviceId: deviceId, \n        timestamp: new Date(timestamp),\n        pending: true\n      }]);\n      setMessage('');\n      \n      // Check if recipient exists - if not, automatically send via relay\n      if (!recipientStatus.exists) {\n        console.log('Recipient not found, sending via relay automatically');\n        // If relay is already connected, send through it\n        if (relayConnection) {\n          console.log('Using existing relay connection');\n          messageData.useRelay = true;\n          relayConnection.emit('sendMessage', messageData, (response) => {\n            console.log('Relay message response:', response);\n            updateMessageStatus(messageId, response, originalMessage);\n          });\n          return;\n        } else if (availableRelays.length > 0) {\n          // Connect to the first available relay\n          const relay = availableRelays[0];\n          console.log('Connecting to relay:', relay);\n          \n          // Connect to relay and send message\n          const relayUrl = `http://${relay.ip}:${relay.port}`;\n          const socket = io(relayUrl, {\n            transports: ['websocket', 'polling'],\n            reconnectionAttempts: 5,\n            reconnectionDelay: 2000,\n            query: { deviceId, username },\n            forceNew: true\n          });\n          \n          socket.on('connect', () => {\n            console.log('Connected to relay, sending message');\n            socket.emit('sendMessage', messageData, (response) => {\n              console.log('Relay message response:', response);\n              updateMessageStatus(messageId, response, originalMessage);\n              socket.disconnect();\n            });\n          });\n          \n          socket.on('connect_error', (err) => {\n            console.error('Relay connection error:', err);\n            updateMessageStatus(messageId, { success: false, reason: 'Relay connection failed' }, originalMessage);\n          });\n          \n          return;\n        } else {\n          // No relays available, show error\n          updateMessageStatus(messageId, { success: false, reason: 'No relay servers available' }, originalMessage);\n          return;\n        }\n      }\n      \n      // Include the public key with the message for key exchange\n      if (keyPair && keyPair.publicKey) {\n        messageData.publicKey = keyPair.publicKey;\n      }\n      \n      // Try to encrypt the message if we have the recipient's public key\n      if (encryptionEnabled && contactKeys[recipient]) {\n        try {\n          console.log('Attempting to encrypt message...');\n          const recipientPublicKey = await EncryptionUtils.importPublicKey(contactKeys[recipient]);\n          const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n          \n          // Derive shared secret\n          const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, recipientPublicKey);\n          \n          // Encrypt the message\n          const { encryptedContent, iv } = await EncryptionUtils.encryptMessage(originalMessage, sharedSecret);\n          \n          // Update message data\n          messageData.encrypted = true;\n          messageData.encryptedContent = encryptedContent;\n          messageData.iv = iv;\n          messageData.message = ''; // Clear plaintext message\n          \n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Encryption failed:', error);\n          // Fall back to unencrypted message\n          messageData.encrypted = false;\n          setSecurityAlert({\n            type: 'warning',\n            username: 'System',\n            message: `Message sent unencrypted: ${error.message}`\n          });\n        }\n      } else {\n        // No encryption key available\n        messageData.encrypted = false;\n        \n        // Request the public key for future messages\n        if (encryptionEnabled && !contactKeys[recipient]) {\n          console.log(`No encryption key for ${recipient}, requesting...`);\n          requestPublicKey(recipient).then(key => {\n            if (key) {\n              console.log(`Received public key for ${recipient} for future encryption`);\n            }\n          });\n        }\n      }\n      \n      console.log('Sending message:', messageData);\n      \n      // Send through base node\n      const socket = socketRef.current;\n      \n      if (!socket) {\n        setSecurityAlert({\n          type: 'error',\n          username: 'System',\n          message: 'No active connection to send message'\n        });\n        updateMessageStatus(messageId, { success: false, reason: 'No active connection' }, originalMessage);\n        return;\n      }\n      \n      // Log connection details before sending\n      console.log(`Sending through base node...`);\n      \n      // Store message locally if offline messaging is enabled\n      if (offlineMessageEnabled) {\n        const pendingMsg = { ...messageData, sentAt: Date.now() };\n        const updatedPending = [...pendingMessages, pendingMsg];\n        setPendingMessages(updatedPending);\n        localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n      }\n      \n      // Create message object\n      const relayMessage = createRelayMessage(\n        username,\n        recipient,\n        message,\n        deviceId,\n        messageData.encryptedContent,\n        messageData.iv\n      );\n      \n      // Try to send message\n      const sendSuccess = await sendMessage(relayMessage, activeRelay.url);\n      \n      if (sendSuccess) {\n        // Message sent successfully\n        setMessages(prev => [...prev, { ...relayMessage, from: username }]);\n      } else {\n        // Handle send failure\n        setStatus('Message failed to send. Storing offline...');\n        storePendingMessage(relayMessage);\n        setPendingMessages(prev => [...prev, relayMessage]);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: `Error sending message: ${error.message}`\n      });\n    }\n  };\n\n  const handleRelayConfirm = async () => {\n    if (pendingRelayMessage) {\n      // Set TTL to maximum for relay messages\n      const messageData = {\n        ...pendingRelayMessage.messageData,\n        ttl: MessageUtils.calculateTTL(24) // 24 hours TTL for relay messages\n      };\n      \n      // Send the message\n      const socket = relayConnection || socketRef.current;\n      \n      if (socket) {\n        socket.emit('sendMessage', messageData, (response) => {\n          console.log('Relay message response:', response);\n          \n          if (response && (response.success || response.delivered)) {\n            // Add message to local state\n            setMessages(msgs => [...msgs, { \n              from: username, \n              message: pendingRelayMessage.message, \n              fromDeviceId: deviceId, \n              timestamp: new Date(),\n              encrypted: messageData.encrypted,\n              isRelay: true\n            }]);\n            setMessage('');\n            \n            // Show confirmation\n            setSecurityAlert({\n              type: 'info',\n              username: 'System',\n              message: `Message queued for relay delivery to ${recipient}`\n            });\n          } else {\n            const errorMsg = response?.reason || 'Relay message delivery failed';\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: `Failed to send relay message: ${errorMsg}`\n            });\n          }\n        });\n      }\n    }\n    \n    // Reset relay dialog\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n\n  const handleRelayCancel = () => {\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    \n    // Send typing indicator through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    \n    if (socket && recipient && e.target.value.length > 0) {\n      socket.emit('typing', { to: recipient });\n    }\n  };\n\n  const handleDisconnect = () => {\n    setConnected(false);\n    \n    // Disconnect from relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n      setActiveRelay(null);\n    }\n    \n    // Disconnect from base node\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    \n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({ exists: false, online: false });\n    setStatus('Disconnected');\n    \n    // Clear stored relay info\n    localStorage.removeItem('lastRelay');\n  };\n\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n\n  // Helper function to update message status after sending\n  const updateMessageStatus = (messageId, response, originalMessage) => {\n    console.log('Updating message status:', messageId, response);\n    \n    setMessages(msgs => msgs.map(msg => {\n      // Find the pending message and update its status\n      if (msg.pending && msg.message === originalMessage) {\n        return {\n            ...msg,\n            pending: false,\n            delivered: !!(response && (response.success || response.delivered)),\n            failed: !(response && (response.success || response.delivered)),\n            failureReason: response?.reason || ''\n        };\n      }\n      return msg;\n    }));\n    \n    // Show alert if message failed\n    if (!(response && (response.success || response.delivered))) {\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: `Failed to send message: ${response?.reason || 'Unknown error'}`\n      });\n    } else {\n      console.log('Message sent successfully');\n    }\n    \n    // Remove from pending messages if delivered\n    if (offlineMessageEnabled && (response && (response.success || response.delivered))) {\n      const updatedPending = pendingMessages.filter(msg => msg.messageId !== messageId);\n      setPendingMessages(updatedPending);\n      localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n    }\n  };\n  \n  // Helper function to handle message responses consistently\n  const handleMessageResponse = (response, messageData, originalMessage, messageId) => {\n    // This function is kept for backward compatibility\n    updateMessageStatus(messageId, response, originalMessage);\n  };\n\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  const formatMessageTime = (timestamp) => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  return (\n    <div style={{ \n      background: '#0a0e14', \n      minHeight: '100vh', \n      color: '#a2aabc', \n      display: 'flex', \n      alignItems: 'center', \n      justifyContent: 'center',\n      fontFamily: '\"Fira Code\", monospace'\n    }}>\n      <div style={{ \n        background: '#171c28', \n        padding: 32, \n        borderRadius: 8, \n        minWidth: 400,\n        maxWidth: 600,\n        boxShadow: '0 4px 30px rgba(0, 255, 170, 0.15)',\n        border: '1px solid rgba(0, 255, 170, 0.3)'\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          marginBottom: 24 \n        }}>\n          <div style={{display: 'flex', flexDirection: 'column'}}>\n            <h2 style={{ \n              margin: 0, \n              color: '#5ccfe6', \n              fontFamily: '\"Fira Code\", monospace',\n              letterSpacing: '1px'\n            }}>WhisperNet_</h2>\n            {connected && (\n              <div style={{\n                fontSize: '12px',\n                color: '#bae67e',\n                marginTop: '4px'\n              }}>\n                Logged in as: <span style={{fontWeight: 'bold'}}>{username}</span>\n              </div>\n            )}\n          </div>\n          <div style={{ \n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px'\n          }}>\n            {encryptionEnabled && (\n              <div style={{ \n                fontSize: 12, \n                padding: '4px 8px', \n                borderRadius: 4, \n                background: '#1c4b3c',\n                color: '#5ccfe6',\n              }} title=\"End-to-end encryption enabled\">\n                🔒\n              </div>\n            )}\n            {offlineMessageEnabled && (\n              <div style={{ \n                fontSize: 12, \n                padding: '4px 8px', \n                borderRadius: 4, \n                background: '#3c1c4b',\n                color: '#c792ea',\n              }} title=\"Offline message delivery enabled\">\n                📨\n              </div>\n            )}\n            <div style={{ \n              fontSize: 12, \n              padding: '4px 8px', \n              borderRadius: 4, \n              background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n              color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n              cursor: 'pointer'\n            }} onClick={() => setShowConnectionInfo(!showConnectionInfo)}>\n              {relayStatus === 'online' ? '🟢' : '🔴'}\n            </div>\n          </div>\n        </div>\n        \n        {showConnectionInfo && (\n          <div style={{ \n            background: '#0d1117', \n            padding: 12, \n            borderRadius: 4, \n            fontSize: 12, \n            fontFamily: 'monospace',\n            marginBottom: 16,\n            border: '1px solid #1e2d3d'\n          }}>\n            <div>Status: {status}</div>\n            {connected && (\n              <>\n                <div>Socket ID: {connectionDetails.socketId || 'unknown'}</div>\n                <div>Transport: {connectionDetails.transport || 'unknown'}</div>\n                <div>Base Node: {connectionDetails.baseNodeUrl || BASE_NODE_URL}</div>\n              </>\n            )}\n            <div>Base Node Status: <span style={{\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            }}>{relayStatus}</span></div>\n            {activeRelay && (\n              <div>Relay Node: <span style={{\n                color: '#bae67e'\n              }}>{activeRelay.ip}:{activeRelay.port}</span></div>\n            )}\n            {deviceId && <div>Device ID: {deviceId.substring(0, 8)}...</div>}\n            {connected && onlineUsers.length > 0 && (\n              <div style={{ marginTop: 8 }}>Online Users: {onlineUsers.join(', ')}</div>\n            )}\n          </div>\n        )}\n        \n        {securityAlert && (\n          <div style={{ \n            background: '#4b1c1c', \n            color: '#ff8f40', \n            padding: 12, \n            borderRadius: 4, \n            marginBottom: 16,\n            position: 'relative',\n            fontSize: 14\n          }}>\n            <div style={{ marginRight: 20 }}>{securityAlert.message}</div>\n            <button \n              style={{ \n                position: 'absolute', \n                top: 8, \n                right: 8, \n                background: 'none', \n                border: 'none', \n                color: '#ff8f40', \n                cursor: 'pointer',\n                fontSize: 16\n              }}\n              onClick={dismissAlert}\n            >\n              ×\n            </button>\n          </div>\n        )}\n        \n        {!connected ? (\n          <div>\n            <div style={{ marginBottom: 16, fontSize: 14, color: '#5ccfe6' }}>\n              {getTimestamp()} Initializing secure connection...\n            </div>\n            <form onSubmit={handleUsernameSubmit}>\n              <input\n                style={{ \n                  width: '100%', \n                  padding: 10, \n                  marginBottom: 12, \n                  borderRadius: 4, \n                  border: '1px solid #1e2d3d', \n                  background: '#0d1117',\n                  color: '#a2aabc',\n                  fontSize: 16,\n                  fontFamily: '\"Fira Code\", monospace',\n                  boxSizing: 'border-box'\n                }}\n                placeholder=\"Enter username\"\n                value={username}\n                onChange={e => setUsername(e.target.value)}\n                required\n              />\n              <button \n                style={{ \n                  width: '100%', \n                  padding: 10, \n                  borderRadius: 4, \n                  background: relayStatus === 'online' ? \n                    'linear-gradient(90deg, #5ccfe6, #bae67e)' : \n                    '#636b78',\n                  color: '#171c28', \n                  fontWeight: 'bold', \n                  fontSize: 16, \n                  border: 'none',\n                  cursor: relayStatus === 'online' ? 'pointer' : 'not-allowed',\n                  fontFamily: '\"Fira Code\", monospace'\n                }} \n                type=\"submit\"\n                disabled={relayStatus !== 'online'}\n              >\n                {relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE'}\n              </button>\n            </form>\n            {relayStatus !== 'online' && (\n              <button \n                style={{ \n                  width: '100%', \n                  padding: 8, \n                  marginTop: 8,\n                  borderRadius: 4, \n                  background: '#4b1c1c', \n                  color: '#ff8f40', \n                  fontSize: 14, \n                  border: 'none',\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                }} \n                onClick={retryConnection}\n              >\n                RETRY CONNECTION\n              </button>\n            )}\n            <div style={{ marginTop: 12, color: '#ff3333', textAlign: 'center', fontSize: 14 }}>\n              {status}\n            </div>\n          </div>\n        ) : (\n          <>\n            <form onSubmit={handleSend} style={{ display: 'flex', flexDirection: 'column', marginBottom: 16 }}>\n              <div style={{ display: 'flex', marginBottom: 8 }}>\n                <input\n                  style={{ \n                    flex: 1, \n                    padding: 10, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 14,\n                    marginRight: 8,\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  placeholder=\"Recipient username\"\n                  value={recipient}\n                  onChange={handleRecipientChange}\n                  required\n                />\n                {recipient && (\n                  <div style={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    marginLeft: 8,\n                    fontSize: 12\n                  }}>\n                    <div style={{ \n                      width: 8, \n                      height: 8, \n                      borderRadius: '50%', \n                      background: recipientStatus.online ? '#bae67e' : '#ff8f40',\n                      marginRight: 6 \n                    }}></div>\n                    {recipientStatus.exists \n                      ? (recipientStatus.online ? 'ONLINE' : 'OFFLINE') \n                      : 'NOT FOUND'}\n                  </div>\n                )}\n              </div>\n              <div style={{ display: 'flex' }}>\n                <input\n                  style={{ \n                    flex: 1, \n                    padding: 10, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 14,\n                    marginRight: 8,\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  placeholder=\"Type a message\"\n                  value={message}\n                  onChange={handleMessageChange}\n                  required\n                />\n                <button \n                  style={{ \n                    padding: '0 18px', \n                    borderRadius: 4, \n                    background: recipientStatus.exists ? \n                      'linear-gradient(90deg, #5ccfe6, #bae67e)' : \n                      '#636b78', \n                    color: '#171c28', \n                    fontWeight: 'bold', \n                    fontSize: 14, \n                    border: 'none',\n                    cursor: recipientStatus.exists ? 'pointer' : 'not-allowed',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }} \n                  type=\"submit\"\n                  disabled={!recipientStatus.exists}\n                >\n                  SEND\n                </button>\n              </div>\n            </form>\n            \n            {typing && recipient && (\n              <div style={{ fontSize: 12, color: '#5ccfe6', marginBottom: 8 }}>\n                {recipient} is typing...\n              </div>\n            )}\n            \n            {/* Relay Message Dialog */}\n            {showRelayDialog && (\n              <div style={{\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                background: 'rgba(0, 0, 0, 0.8)',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                zIndex: 1000\n              }}>\n                <div style={{\n                  background: '#0d1117',\n                  borderRadius: 8,\n                  padding: 24,\n                  maxWidth: 500,\n                  width: '90%',\n                  border: '1px solid #1e2d3d',\n                  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n                }}>\n                  <h3 style={{ color: '#bae67e', marginTop: 0 }}>Relay Message</h3>\n                  <p style={{ color: '#a2aabc', lineHeight: 1.5 }}>\n                    The recipient <strong style={{ color: '#5ccfe6' }}>{recipient}</strong> was not found on the network.\n                  </p>\n                  <p style={{ color: '#a2aabc', lineHeight: 1.5 }}>\n                    You can send this message as a <strong>relay message</strong>. It will be stored on the network and delivered when the recipient comes online.\n                  </p>\n                  <div style={{ background: '#171c28', padding: 12, borderRadius: 4, marginBottom: 16 }}>\n                    <p style={{ color: '#ff8f40', marginTop: 0 }}><strong>How it works:</strong></p>\n                    <ul style={{ color: '#a2aabc', paddingLeft: 20 }}>\n                      <li>Your message will be stored encrypted on relay servers</li>\n                      <li>It will be delivered when the recipient connects</li>\n                      <li>Messages expire after 24 hours if not delivered</li>\n                      <li>No guarantee of delivery if the user never connects</li>\n                    </ul>\n                  </div>\n                  <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\n                    <button \n                      onClick={handleRelayCancel}\n                      style={{ \n                        padding: '8px 16px', \n                        background: '#4b1c1c', \n                        color: '#ff8f40', \n                        border: 'none', \n                        borderRadius: 4, \n                        cursor: 'pointer',\n                        fontFamily: '\"Fira Code\", monospace'\n                      }}\n                    >\n                      CANCEL\n                    </button>\n                    <button \n                      onClick={handleRelayConfirm}\n                      style={{ \n                        padding: '8px 16px', \n                        background: 'linear-gradient(90deg, #5ccfe6, #bae67e)', \n                        color: '#171c28', \n                        fontWeight: 'bold',\n                        border: 'none', \n                        borderRadius: 4, \n                        cursor: 'pointer',\n                        fontFamily: '\"Fira Code\", monospace'\n                      }}\n                    >\n                      SEND RELAY MESSAGE\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div style={{ \n              background: '#0d1117', \n              borderRadius: 4, \n              padding: 12, \n              minHeight: 200, \n              maxHeight: 350, \n              overflowY: 'auto', \n              marginBottom: 12,\n              border: '1px solid #1e2d3d',\n              fontFamily: 'monospace'\n            }}>\n              {messages.length === 0 ? (\n                <div style={{ color: '#5ccfe6', fontSize: 14 }}>\n                  {getTimestamp()} Connection established. Awaiting transmission...\n                </div>\n              ) : (\n                messages.map((msg, i) => (\n                  <div key={i} style={{ \n                    marginBottom: 12, \n                    padding: 8,\n                    borderRadius: 4,\n                    background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\n                    borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\n                  }}>\n                    <div style={{ \n                      display: 'flex', \n                      justifyContent: 'space-between', \n                      marginBottom: 4, \n                      fontSize: 12 \n                    }}>\n                      <span style={{ \n                        color: msg.from === username ? '#5ccfe6' : '#bae67e',\n                        fontWeight: 'bold'\n                      }}>\n                        {msg.from === username ? 'YOU' : msg.from}\n                      </span>\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n                        {msg.encrypted && (\n                          <span title=\"End-to-end encrypted\" style={{ fontSize: 10 }}>🔒</span>\n                        )}\n                        <span style={{ color: '#636b78' }}>{formatMessageTime(msg.timestamp)}</span>\n                      </div>\n                    </div>\n                    <div style={{ wordBreak: 'break-word', fontSize: 14 }}>\n                      {msg.message}\n                      {msg.isRelay && (\n                        <span style={{ \n                          fontSize: 10, \n                          color: '#ff8f40', \n                          marginLeft: 6, \n                          padding: '2px 4px', \n                          background: 'rgba(255, 143, 64, 0.1)', \n                          borderRadius: 2 \n                        }}>RELAY</span>\n                      )}\n                      {msg.pending && (\n                        <span style={{ \n                          fontSize: 10, \n                          color: '#ffcc66', \n                          marginLeft: 6, \n                          padding: '2px 4px', \n                          background: 'rgba(255, 204, 102, 0.1)', \n                          borderRadius: 2 \n                        }}>SENDING...</span>\n                      )}\n                      {msg.failed && (\n                        <span style={{ \n                          fontSize: 10, \n                          color: '#ff3333', \n                          marginLeft: 6, \n                          padding: '2px 4px', \n                          background: 'rgba(255, 51, 51, 0.1)', \n                          borderRadius: 2,\n                          cursor: 'pointer',\n                          title: msg.failureReason || 'Failed to send'\n                        }}>FAILED</span>\n                      )}\n                      {msg.delivered && (\n                        <span style={{ \n                          fontSize: 10, \n                          color: '#bae67e', \n                          marginLeft: 6, \n                          padding: '2px 4px', \n                          background: 'rgba(186, 230, 126, 0.1)', \n                          borderRadius: 2 \n                        }}>DELIVERED</span>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n            \n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <button \n                style={{ \n                  padding: '8px 16px', \n                  borderRadius: 4, \n                  background: '#4b1c1c', \n                  color: '#ff8f40', \n                  fontSize: 14, \n                  border: 'none',\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                }} \n                onClick={handleDisconnect}\n              >\n                DISCONNECT\n              </button>\n              \n              <div style={{ \n                fontSize: 12, \n                color: '#636b78', \n                display: 'flex', \n                alignItems: 'center' \n              }}>\n                <div style={{ \n                  width: 8, \n                  height: 8, \n                  borderRadius: '50%', \n                  background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                  marginRight: 6 \n                }}></div>\n                {status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST'}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}