{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddharth\\\\Documents\\\\GitHub\\\\WhisperNet\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Storage keys\nconst IDENTITY_STORAGE_KEY = 'whispernetKnownIdentities';\nconst CHAT_HISTORY_KEY = 'whispernetChatHistory';\nconst TRUST_STATUS_KEY = 'whispernetTrustStatus';\n\n// Encryption utilities\nconst generateKeyPair = async () => {\n  try {\n    const keyPair = await window.crypto.subtle.generateKey({\n      name: \"RSA-OAEP\",\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: \"SHA-256\"\n    }, true, [\"encrypt\", \"decrypt\"]);\n\n    // Export the keys to JWK format\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\n    return {\n      publicKey,\n      privateKey\n    };\n  } catch (error) {\n    console.error('Error generating key pair:', error);\n    throw error;\n  }\n};\nconst encryptMessage = async (message, publicKeyJwk) => {\n  try {\n    // Import the public key\n    const publicKey = await window.crypto.subtle.importKey(\"jwk\", publicKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"encrypt\"]);\n\n    // Convert the message to ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n\n    // Encrypt the data\n    const encryptedData = await window.crypto.subtle.encrypt({\n      name: \"RSA-OAEP\"\n    }, publicKey, data);\n\n    // Convert the encrypted data to base64\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n  } catch (error) {\n    console.error('Error encrypting message:', error);\n    throw error;\n  }\n};\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\n  try {\n    // Import the private key\n    const privateKey = await window.crypto.subtle.importKey(\"jwk\", privateKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"decrypt\"]);\n\n    // Convert the base64 encrypted message to ArrayBuffer\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\n\n    // Decrypt the data\n    const decryptedData = await window.crypto.subtle.decrypt({\n      name: \"RSA-OAEP\"\n    }, privateKey, encryptedData);\n\n    // Convert the decrypted data to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n  } catch (error) {\n    console.error('Error decrypting message:', error);\n    return '[Encrypted message - cannot decrypt]';\n  }\n};\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [status, setStatus] = useState('Checking relay status...');\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [typing, setTyping] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\n  const [relayStatus, setRelayStatus] = useState('checking');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [recipientStatus, setRecipientStatus] = useState({\n    exists: false,\n    online: false\n  });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\n  const [knownIdentities, setKnownIdentities] = useState({}); // username -> {deviceId, publicKey, firstSeen}\n  const [identityMismatch, setIdentityMismatch] = useState(null); // {username, originalDeviceId, newDeviceId, action}\n  const [showIdentityWarning, setShowIdentityWarning] = useState(false);\n\n  // New state variables for enhanced chat functionality\n  const [chatHistory, setChatHistory] = useState({}); // username -> array of messages\n  const [contacts, setContacts] = useState([]); // list of usernames the current user has chatted with\n  const [activeChat, setActiveChat] = useState(null); // currently selected chat\n  const [trustStatus, setTrustStatus] = useState({}); // username -> {trusted: boolean, keyExchanged: boolean, mutualMessaging: boolean}\n  const [showTrustWarning, setShowTrustWarning] = useState(false); // whether to show the trust warning for the current chat\n\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const recipientCheckTimeoutRef = useRef(null);\n\n  // Load known identities from localStorage\n  const loadKnownIdentities = () => {\n    try {\n      const storedIdentities = localStorage.getItem(IDENTITY_STORAGE_KEY);\n      if (storedIdentities) {\n        const parsedIdentities = JSON.parse(storedIdentities);\n        setKnownIdentities(parsedIdentities);\n        console.log('Loaded known identities:', Object.keys(parsedIdentities).length);\n      }\n    } catch (error) {\n      console.error('Error loading known identities:', error);\n    }\n  };\n\n  // Save known identities to localStorage\n  const saveKnownIdentities = identities => {\n    try {\n      localStorage.setItem(IDENTITY_STORAGE_KEY, JSON.stringify(identities));\n    } catch (error) {\n      console.error('Error saving known identities:', error);\n    }\n  };\n\n  // Load chat history from localStorage\n  const loadChatHistory = () => {\n    try {\n      const storedChatHistory = localStorage.getItem(CHAT_HISTORY_KEY);\n      if (storedChatHistory) {\n        const parsedChatHistory = JSON.parse(storedChatHistory);\n        setChatHistory(parsedChatHistory);\n\n        // Extract contacts from chat history\n        const contactsList = Object.keys(parsedChatHistory);\n        setContacts(contactsList);\n        console.log('Loaded chat history for contacts:', contactsList.length);\n\n        // If we have contacts but no active chat, set the first contact as active\n        if (contactsList.length > 0 && !activeChat) {\n          setActiveChat(contactsList[0]);\n          setRecipient(contactsList[0]);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading chat history:', error);\n    }\n  };\n\n  // Save chat history to localStorage\n  const saveChatHistory = history => {\n    try {\n      localStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(history));\n    } catch (error) {\n      console.error('Error saving chat history:', error);\n    }\n  };\n\n  // Load trust status from localStorage\n  const loadTrustStatus = () => {\n    try {\n      const storedTrustStatus = localStorage.getItem(TRUST_STATUS_KEY);\n      if (storedTrustStatus) {\n        const parsedTrustStatus = JSON.parse(storedTrustStatus);\n        setTrustStatus(parsedTrustStatus);\n        console.log('Loaded trust status for users:', Object.keys(parsedTrustStatus).length);\n      }\n    } catch (error) {\n      console.error('Error loading trust status:', error);\n    }\n  };\n\n  // Save trust status to localStorage\n  const saveTrustStatus = status => {\n    try {\n      localStorage.setItem(TRUST_STATUS_KEY, JSON.stringify(status));\n    } catch (error) {\n      console.error('Error saving trust status:', error);\n    }\n  };\n\n  // Update chat history with a new message\n  const updateChatHistory = (contact, message) => {\n    setChatHistory(prevHistory => {\n      const updatedHistory = {\n        ...prevHistory\n      };\n\n      // Initialize chat history for this contact if it doesn't exist\n      if (!updatedHistory[contact]) {\n        updatedHistory[contact] = [];\n      }\n\n      // Add the message to the chat history\n      updatedHistory[contact] = [...updatedHistory[contact], message];\n\n      // Save the updated chat history\n      saveChatHistory(updatedHistory);\n\n      // Update contacts list if this is a new contact\n      if (!contacts.includes(contact)) {\n        const updatedContacts = [...contacts, contact];\n        setContacts(updatedContacts);\n      }\n      return updatedHistory;\n    });\n  };\n\n  // Check and update trust status for a contact\n  const updateTrustStatus = (contact, updates) => {\n    setTrustStatus(prevStatus => {\n      const updatedStatus = {\n        ...prevStatus\n      };\n\n      // Initialize trust status for this contact if it doesn't exist\n      if (!updatedStatus[contact]) {\n        updatedStatus[contact] = {\n          trusted: false,\n          keyExchanged: false,\n          mutualMessaging: false,\n          sentMessage: false,\n          receivedMessage: false,\n          firstInteraction: new Date().toISOString()\n        };\n      }\n\n      // Apply updates\n      updatedStatus[contact] = {\n        ...updatedStatus[contact],\n        ...updates\n      };\n\n      // Check if mutual messaging has occurred\n      if (updatedStatus[contact].sentMessage && updatedStatus[contact].receivedMessage) {\n        updatedStatus[contact].mutualMessaging = true;\n\n        // If mutual messaging has occurred and we have their public key, mark as trusted and exchange keys\n        if (publicKeys[contact]) {\n          updatedStatus[contact].keyExchanged = true;\n          updatedStatus[contact].trusted = true;\n\n          // Update the UI to show trust status change\n          if (contact === recipient) {\n            setShowTrustWarning(false);\n          }\n        }\n      } else {\n        // If we don't have mutual messaging yet, make sure to show the warning\n        if (contact === recipient) {\n          setShowTrustWarning(true);\n        }\n      }\n\n      // Save the updated trust status\n      saveTrustStatus(updatedStatus);\n      return updatedStatus;\n    });\n  };\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeDevice = async () => {\n      try {\n        // Get device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n\n        // Initialize encryption\n        await initializeEncryption(visitorId);\n\n        // Load stored data\n        loadKnownIdentities();\n        loadChatHistory();\n        loadTrustStatus();\n      } catch (error) {\n        console.error('Failed to initialize device:', error);\n        // Generate a fallback device ID\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\n        setDeviceId(fallbackId);\n\n        // Initialize encryption with fallback ID\n        await initializeEncryption(fallbackId);\n\n        // Load stored data\n        loadKnownIdentities();\n        loadChatHistory();\n        loadTrustStatus();\n      }\n    };\n    initializeDevice();\n  }, []);\n\n  // Initialize encryption\n  const initializeEncryption = async deviceIdentifier => {\n    try {\n      setEncryptionStatus('initializing');\n\n      // Check if we have keys in localStorage\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\n      if (storedKeys) {\n        // We have stored keys, check if they're valid\n        try {\n          const parsedKeys = JSON.parse(storedKeys);\n\n          // Validate the keys by testing encryption/decryption\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\n            try {\n              // Test encryption with the stored keys\n              const testMessage = \"test-encryption-\" + Date.now();\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\n              if (decrypted === testMessage) {\n                // Keys are valid\n                setKeyPair(parsedKeys);\n                console.log('Loaded and validated existing encryption keys');\n                setEncryptionStatus('ready');\n              } else {\n                console.warn('Stored keys failed validation test');\n                await generateAndStoreNewKeys(deviceIdentifier);\n              }\n            } catch (testError) {\n              console.error('Error testing stored keys:', testError);\n              await generateAndStoreNewKeys(deviceIdentifier);\n            }\n          } else {\n            console.warn('Stored keys are incomplete');\n            await generateAndStoreNewKeys(deviceIdentifier);\n          }\n        } catch (parseError) {\n          console.error('Error parsing stored keys:', parseError);\n          await generateAndStoreNewKeys(deviceIdentifier);\n        }\n      } else {\n        // No stored keys, generate new ones\n        await generateAndStoreNewKeys(deviceIdentifier);\n      }\n    } catch (error) {\n      console.error('Error initializing encryption:', error);\n      setEncryptionStatus('error');\n      setSecurityAlert({\n        username: 'System',\n        message: 'Failed to initialize encryption. Messages will not be secure.',\n        type: 'error'\n      });\n      setEncryptionEnabled(false);\n    }\n  };\n\n  // Generate and store new keys\n  const generateAndStoreNewKeys = async deviceIdentifier => {\n    try {\n      console.log('Generating new encryption keys...');\n      const newKeyPair = await generateKeyPair();\n      setKeyPair(newKeyPair);\n\n      // Store keys in localStorage\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\n      console.log('Generated and stored new encryption keys');\n      setEncryptionStatus('ready');\n    } catch (error) {\n      console.error('Error generating new keys:', error);\n      throw error;\n    }\n  };\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, {\n        timeout: 5000\n      });\n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n\n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    tempSocket.on('connect_error', err => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n    }\n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        clearTimeout(recipientCheckTimeoutRef.current);\n        clearTimeout(typingTimeoutRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n  useEffect(() => {\n    if (connected && socketRef.current) {\n      const fetchRelayInfo = () => {\n        console.log('Fetching relay info...');\n\n        // First try to get relay info directly from the socket\n        socketRef.current.emit('getRelayInfo', {}, info => {\n          if (info && info.relayId) {\n            console.log('Received relay info from socket:', info);\n            // Update relay server information\n            setRelayServerUrl(info.relayId);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: info.relayId,\n              relayStatus: info.status || 'connected',\n              connectedUsers: info.connectedUsers,\n              ip: info.ip,\n              port: info.port\n            }));\n\n            // Show connection info automatically on first connect\n            if (!showConnectionInfo) {\n              setShowConnectionInfo(true);\n\n              // Auto-hide after 5 seconds\n              setTimeout(() => {\n                setShowConnectionInfo(false);\n              }, 5000);\n            }\n          } else {\n            console.warn('No relay info received from socket, checking with base node');\n\n            // If we're connected to the base node, try to get our relay assignment\n            socketRef.current.emit('getMyRelayInfo', {\n              username\n            }, relayInfo => {\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\n                console.log('Received relay assignment from base node:', relayInfo);\n                if (relayInfo.isDirect) {\n                  // We're directly connected to the base node\n                  setRelayServerUrl('Direct to Base Node');\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: 'direct',\n                    relayStatus: 'direct_to_base'\n                  }));\n                } else {\n                  // We're assigned to a relay\n                  setRelayServerUrl(relayInfo.relayId);\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: relayInfo.relayId,\n                    relayStatus: 'assigned_by_base'\n                  }));\n                }\n              } else {\n                console.warn('No relay assignment from base node, assuming direct connection');\n\n                // If we can't get relay info, we're probably directly connected to the base node\n                const socketId = socketRef.current.id;\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\n                setConnectionDetails(prev => ({\n                  ...prev,\n                  relayId: 'direct',\n                  relayStatus: 'direct_to_base'\n                }));\n              }\n            });\n          }\n        });\n      };\n\n      // Get relay info immediately and then every 10 seconds\n      fetchRelayInfo();\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\n      return () => clearInterval(relayInfoInterval);\n    }\n  }, [connected, showConnectionInfo, username]);\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    // Always connect to base node first for handshake and relay discovery\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\n    setStatus('Connecting to base node for handshake...');\n\n    // Connect to base node\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n\n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node for handshake');\n      setRelayStatus('online');\n\n      // When connecting to the base node, set the relay information accordingly\n      setRelayServerUrl(`Base Node (Handshake)`);\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL,\n        relayId: 'base_handshake',\n        relayStatus: 'handshake'\n      });\n\n      // Get available relays first\n      socketRef.current.emit('getAvailableRelays', {}, response => {\n        console.log('Available relays:', response);\n        if (response && response.relays && response.relays.length > 0) {\n          // Cache relay information\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\n            timestamp: Date.now(),\n            relays: response.relays\n          }));\n\n          // Register with base node temporarily\n          registerWithBaseNode(() => {\n            // After successful registration, connect to a relay\n            connectToRelay(response.relays);\n          });\n        } else {\n          // No relays available, register directly with base node\n          registerWithBaseNode(() => {\n            // Set UI to indicate we're using base node as fallback\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            setStatus('Using Base Node as fallback (no relays available)');\n\n            // Start polling for available relays\n            startRelayPolling();\n          });\n        }\n      });\n    });\n    const registerWithBaseNode = callback => {\n      // Register with base node\n      socketRef.current.emit('registerUser', {\n        username,\n        deviceId,\n        publicKey: keyPair === null || keyPair === void 0 ? void 0 : keyPair.publicKey // Send public key during registration\n      }, response => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully with base node');\n\n          // Check for identity mismatch warning\n          if (response.identityMismatch) {\n            console.warn('Identity mismatch detected during registration:', response.identityMismatch);\n\n            // Show identity mismatch warning\n            setIdentityMismatch({\n              username,\n              originalDeviceId: response.identityMismatch.originalDeviceId,\n              newDeviceId: deviceId,\n              originalPublicKey: response.identityMismatch.originalPublicKey,\n              action: 'pending' // User hasn't decided what to do yet\n            });\n            setShowIdentityWarning(true);\n          } else {\n            // No mismatch, this is either a new user or the same device\n            // Store this identity if it's new\n            if (!knownIdentities[username]) {\n              const updatedIdentities = {\n                ...knownIdentities,\n                [username]: {\n                  deviceId,\n                  publicKey: keyPair === null || keyPair === void 0 ? void 0 : keyPair.publicKey,\n                  firstSeen: new Date().toISOString()\n                }\n              };\n              setKnownIdentities(updatedIdentities);\n              saveKnownIdentities(updatedIdentities);\n              console.log(`Stored new identity for ${username}`);\n            }\n          }\n\n          // Set up socket event handlers\n          connectSocketEvents();\n\n          // Get initial data\n          getOnlineUsers();\n          startPingInterval();\n\n          // Execute callback if provided\n          if (callback && typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`,\n            type: 'error'\n          });\n        }\n      });\n    };\n    socketRef.current.on('connect_error', err => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n\n      // Try to use cached relays if available\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\n      let cachedRelays = [];\n      if (cachedRelayInfo) {\n        try {\n          const parsedCache = JSON.parse(cachedRelayInfo);\n          if (parsedCache.timestamp && Date.now() - parsedCache.timestamp < 3600000) {\n            // Cache valid for 1 hour\n            cachedRelays = parsedCache.relays || [];\n            console.log('Using cached relay information:', cachedRelays);\n            if (cachedRelays.length > 0) {\n              setTimeout(() => {\n                connectToRelay(cachedRelays);\n              }, 1000);\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing cached relay info:', error);\n        }\n      }\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n\n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect' && connected) {\n        setTimeout(() => {\n          if (connected) {\n            // Try to reconnect to base node first\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n  };\n\n  // Function to connect to a relay server\n  const connectToRelay = relays => {\n    if (!relays || !relays.length) {\n      console.log('No relays available to connect to');\n      return;\n    }\n\n    // Use the first available relay\n    const relay = relays[0];\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\n    console.log(`Switching to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay server: ${relay.id}...`);\n\n    // Disconnect from base node first\n    if (socketRef.current) {\n      // Keep a reference to the old socket for cleanup\n      const oldSocket = socketRef.current;\n\n      // Create new socket for relay\n      socketRef.current = io(relayUrl, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 2000,\n        forceNew: true\n      });\n\n      // Set a timeout to disconnect from base node after relay connection is established\n      const relayConnectionTimeout = setTimeout(() => {\n        if (!socketRef.current || !socketRef.current.connected) {\n          console.log('Relay connection timed out, staying with base node');\n          socketRef.current = oldSocket; // Restore old socket\n          setStatus('Using Base Node (relay connection failed)');\n          setRelayServerUrl('Base Node (Fallback)');\n          setConnectionDetails(prev => ({\n            ...prev,\n            relayId: 'direct',\n            relayStatus: 'direct_to_base'\n          }));\n\n          // Start polling for available relays\n          startRelayPolling();\n        }\n      }, 5000);\n      socketRef.current.on('connect', () => {\n        clearTimeout(relayConnectionTimeout);\n        console.log(`Connected to relay server: ${relayUrl}`);\n\n        // Register with the relay\n        socketRef.current.emit('register', {\n          username,\n          deviceId\n        }, response => {\n          if (response && response.success) {\n            console.log('Successfully registered with relay');\n\n            // Now we can safely disconnect from the base node\n            oldSocket.disconnect();\n            setStatus(`Connected to relay server: ${relay.id}`);\n            setRelayServerUrl(relay.id);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: relay.id,\n              socketId: socketRef.current.id,\n              transport: socketRef.current.io.engine.transport.name,\n              relayStatus: 'connected_to_relay'\n            }));\n\n            // Set up socket event handlers\n            connectSocketEvents();\n\n            // Start ping interval\n            startPingInterval();\n\n            // Show connection info automatically\n            setShowConnectionInfo(true);\n            setTimeout(() => {\n              setShowConnectionInfo(false);\n            }, 5000);\n          } else {\n            console.error('Failed to register with relay:', response);\n            setStatus('Failed to register with relay server');\n\n            // Disconnect from relay and stay with base node\n            socketRef.current.disconnect();\n            socketRef.current = oldSocket;\n            setStatus('Using Base Node (relay registration failed)');\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n\n            // Start polling for available relays\n            startRelayPolling();\n          }\n        });\n      });\n      socketRef.current.on('connect_error', err => {\n        clearTimeout(relayConnectionTimeout);\n        console.error(`Relay connection error: ${err.message}`);\n\n        // Stay with base node\n        socketRef.current = oldSocket;\n        setStatus('Using Base Node (relay connection error)');\n        setRelayServerUrl('Base Node (Fallback)');\n        setConnectionDetails(prev => ({\n          ...prev,\n          relayId: 'direct',\n          relayStatus: 'direct_to_base'\n        }));\n\n        // Start polling for available relays\n        startRelayPolling();\n      });\n      socketRef.current.on('disconnect', reason => {\n        console.log(`Disconnected from relay: ${reason}`);\n\n        // If we were previously connected to a relay and lost connection\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\n          setStatus(`Disconnected from relay: ${reason}`);\n\n          // Try to reconnect to base node\n          setTimeout(() => {\n            if (connected) {\n              connectToBaseNode();\n            }\n          }, 1000);\n        }\n      });\n    }\n  };\n\n  // Function to periodically poll for available relays when using base node as fallback\n  const startRelayPolling = () => {\n    // Clear any existing polling interval\n    if (window.relayPollingInterval) {\n      clearInterval(window.relayPollingInterval);\n    }\n\n    // Set up polling interval\n    window.relayPollingInterval = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected && connectionDetails.relayStatus === 'direct_to_base') {\n        console.log('Polling for available relays...');\n        socketRef.current.emit('getAvailableRelays', {}, response => {\n          if (response && response.relays && response.relays.length > 0) {\n            console.log('Found available relays:', response.relays);\n\n            // Cache relay information\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\n              timestamp: Date.now(),\n              relays: response.relays\n            }));\n\n            // Connect to a relay\n            connectToRelay(response.relays);\n\n            // Clear polling interval\n            clearInterval(window.relayPollingInterval);\n          } else {\n            console.log('No relays available, continuing to use base node');\n          }\n        });\n      }\n    }, 30000); // Poll every 30 seconds\n\n    // Clean up on component unmount\n    return () => {\n      if (window.relayPollingInterval) {\n        clearInterval(window.relayPollingInterval);\n      }\n    };\n  };\n  const connectSocketEvents = () => {\n    // Message handling\n    socketRef.current.on('receiveMessage', async data => {\n      console.log('Received message:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp,\n        encrypted,\n        publicKey,\n        bounced\n      } = data;\n\n      // Store sender's public key if provided\n      if (publicKey && from) {\n        console.log(`Storing public key for ${from}`);\n        setPublicKeys(prev => ({\n          ...prev,\n          [from]: publicKey\n        }));\n      }\n\n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`,\n          type: 'warning'\n        });\n      }\n      let decryptedMessage = message;\n      let decryptionStatus = 'plaintext';\n\n      // Decrypt the message if it's encrypted and we have our private key\n      if (encrypted && keyPair !== null && keyPair !== void 0 && keyPair.privateKey) {\n        try {\n          console.log('Decrypting message...');\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\n          decryptionStatus = 'decrypted';\n          console.log('Message decrypted successfully');\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\n          decryptionStatus = 'failed';\n          setSecurityAlert({\n            username: 'System',\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\n            type: 'warning'\n          });\n        }\n      }\n      setMessages(msgs => [...msgs, {\n        from,\n        message: decryptedMessage,\n        fromDeviceId,\n        timestamp: new Date(timestamp || new Date()),\n        encrypted,\n        decryptionStatus,\n        bounced\n      }]);\n    });\n\n    // Handle public key requests\n    socketRef.current.on('publicKeyRequest', ({\n      from\n    }, ack) => {\n      console.log(`Public key requested by ${from}`);\n      if (keyPair && keyPair.publicKey) {\n        console.log(`Sending public key to ${from}`);\n        if (ack) ack({\n          success: true,\n          publicKey: keyPair.publicKey\n        });\n      } else {\n        console.warn('No public key available to share');\n        if (ack) ack({\n          success: false,\n          reason: 'Public key not available'\n        });\n      }\n    });\n\n    // User status updates\n    socketRef.current.on('userStatusUpdate', data => {\n      console.log('User status update:', data);\n      const {\n        username: user,\n        online\n      } = data;\n\n      // If this is our current recipient, update their status\n      if (user === recipient) {\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\n        setRecipientStatus(prev => ({\n          ...prev,\n          exists: true,\n          // If we got a status update, the user definitely exists\n          online,\n          notRegisteredYet: false // Clear this flag since we know the user exists\n        }));\n      }\n\n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          console.log(`Adding ${user} to online users list`);\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          console.log(`Removing ${user} from online users list`);\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n\n      // If we're currently checking a recipient, refresh their status\n      if (recipient) {\n        checkRecipientStatus();\n      }\n    });\n\n    // Handle bulk online users updates\n    socketRef.current.on('onlineUsersUpdate', data => {\n      console.log('Online users update:', data);\n      if (data && Array.isArray(data.users)) {\n        setOnlineUsers(data.users);\n\n        // If we have a recipient, check if they're in the online users list\n        if (recipient && data.users.includes(recipient)) {\n          setRecipientStatus(prev => ({\n            ...prev,\n            exists: true,\n            online: true,\n            notRegisteredYet: false\n          }));\n        } else if (recipient) {\n          // If recipient is not in the online users list, refresh their status\n          checkRecipientStatus();\n        }\n      }\n    });\n\n    // Typing indicators\n    socketRef.current.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n\n    // Error handling\n    socketRef.current.on('error', error => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`,\n        type: 'error'\n      });\n    });\n  };\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, users => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        // Send ping to keep connection alive\n        socketRef.current.emit('ping', {}, response => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n\n        // Also refresh online users list\n        getOnlineUsers();\n\n        // If we have a recipient, check their status\n        if (recipient) {\n          checkRecipientStatus();\n        }\n      }\n    }, 30000); // Every 30 seconds\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient || !socketRef.current) {\n      setRecipientStatus({\n        exists: false,\n        online: false,\n        checking: false\n      });\n      return;\n    }\n    console.log(`Checking status for recipient: ${recipient}`);\n\n    // Set status to checking while we wait for the response\n    setRecipientStatus(prev => ({\n      ...prev,\n      checking: true\n    }));\n\n    // Set a timeout to clear the checking status if we don't get a response\n    const checkingTimeout = setTimeout(() => {\n      setRecipientStatus(prev => {\n        if (prev.checking) {\n          return {\n            ...prev,\n            checking: false\n          };\n        }\n        return prev;\n      });\n    }, 3000); // 3 seconds timeout\n\n    // First check if the recipient is in the online users list\n    if (onlineUsers.includes(recipient)) {\n      clearTimeout(checkingTimeout);\n      console.log(`${recipient} found in online users list`);\n      setRecipientStatus({\n        exists: true,\n        online: true,\n        checking: false\n      });\n      return;\n    }\n\n    // If we're connected to a relay, use the checkRecipient event\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\n      socketRef.current.emit('checkRecipient', {\n        username: recipient\n      }, relayResponse => {\n        clearTimeout(checkingTimeout);\n        console.log('Relay recipient check response:', relayResponse);\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\n          // Only update if we got a valid response\n          setRecipientStatus({\n            ...relayResponse,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    } else {\n      // If connected directly to base node, use checkUser\n      socketRef.current.emit('checkUser', {\n        username: recipient\n      }, response => {\n        clearTimeout(checkingTimeout);\n        console.log('Base node recipient check response:', response);\n\n        // If we got a valid response, use it\n        if (response && typeof response.exists === 'boolean') {\n          setRecipientStatus({\n            ...response,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    }\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleUsernameSubmit = async e => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      setIsCheckingUsername(true);\n      const tempSocket = io(BASE_NODE_URL, {\n        forceNew: true,\n        timeout: 5000\n      });\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', {\n          username: username.trim()\n        }, response => {\n          setIsCheckingUsername(false);\n          if (response && response.exists) {\n            setUsernameAvailable(false);\n            setSecurityAlert({\n              username: 'System',\n              message: `Username \"${username}\" is already taken.`,\n              type: 'error'\n            });\n            // Explicitly disconnect and do NOT set connected to true\n            tempSocket.disconnect();\n          } else {\n            setUsernameAvailable(true);\n            setConnected(true);\n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', error => {\n        console.error('Connection error during username check:', error);\n        setIsCheckingUsername(false);\n        setSecurityAlert({\n          username: 'System',\n          message: 'Could not verify username. Base node may be offline.',\n          type: 'error'\n        });\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        username: 'System',\n        message: 'Cannot connect: Base node is offline',\n        type: 'error'\n      });\n    }\n  };\n  const handleRecipientChange = e => {\n    const newRecipient = e.target.value.trim();\n    setRecipient(newRecipient);\n\n    // Reset recipient status when the recipient changes\n    setRecipientStatus({\n      exists: false,\n      online: false,\n      checking: false\n    });\n\n    // If the recipient is not empty, check their status\n    if (newRecipient && socketRef.current) {\n      // Use a small delay to avoid too many checks while typing\n      if (recipientCheckTimeoutRef.current) {\n        clearTimeout(recipientCheckTimeoutRef.current);\n      }\n      recipientCheckTimeoutRef.current = setTimeout(() => {\n        checkRecipientStatus();\n      }, 500); // 500ms delay\n    }\n  };\n  const handleSend = async (e, bounce = false) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    try {\n      // Show sending indicator\n      setStatus('Sending message...');\n\n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\n      if (!bounce) {\n        // For direct messages, we need to check if the recipient exists and is online\n        const recipientOnline = recipientStatus.online;\n\n        // If recipient is not online, suggest using relay\n        if (!recipientOnline) {\n          setSecurityAlert({\n            username: 'System',\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\n            type: 'warning'\n          });\n          setStatus('Registered successfully');\n          return;\n        }\n      }\n\n      // Get recipient's public key if we don't have it and encryption is enabled\n      if (encryptionEnabled && !publicKeys[recipient]) {\n        try {\n          await requestPublicKey(recipient);\n        } catch (error) {\n          console.error('Failed to get public key:', error);\n          // Continue without encryption if we can't get the key\n        }\n      }\n      let finalMessage = message.trim();\n      let isEncrypted = false;\n\n      // Encrypt the message if encryption is enabled and we have the recipient's public key\n      if (encryptionEnabled && publicKeys[recipient]) {\n        try {\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\n          isEncrypted = true;\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          setSecurityAlert({\n            username: 'System',\n            message: 'Failed to encrypt message. Sending as plaintext.',\n            type: 'warning'\n          });\n        }\n      }\n      const messageData = {\n        to: recipient,\n        message: finalMessage,\n        deviceId,\n        timestamp: new Date().toISOString(),\n        bounce: bounce,\n        // Always use the bounce parameter directly\n        encrypted: isEncrypted,\n        publicKey: keyPair === null || keyPair === void 0 ? void 0 : keyPair.publicKey // Send our public key with the message\n      };\n      console.log('Sending message:', {\n        ...messageData,\n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\n        bounce: bounce\n      });\n\n      // Add a timeout to handle cases where the server doesn't respond\n      const messageTimeout = setTimeout(() => {\n        setSecurityAlert({\n          username: 'System',\n          message: 'Message sending timed out. Server may be offline.',\n          type: 'error'\n        });\n        setStatus('Registered successfully');\n      }, 10000);\n      socketRef.current.emit('sendMessage', messageData, response => {\n        clearTimeout(messageTimeout);\n        console.log('Send message response:', response);\n        setStatus('Registered successfully');\n        if (response && (response.delivered || response.bounced)) {\n          // Add message to local state (store original message for display)\n          setMessages(msgs => [...msgs, {\n            from: username,\n            message: message.trim(),\n            // Store original message for display\n            fromDeviceId: deviceId,\n            timestamp: new Date(),\n            status: response.delivered ? 'delivered' : 'bounced',\n            expiresAt: response.expiresAt,\n            encrypted: isEncrypted\n          }]);\n          setMessage('');\n\n          // Show notification if message was bounced\n          if (response.bounced) {\n            setSecurityAlert({\n              username: 'System',\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\n              type: 'info'\n            });\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Message delivery failed';\n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\n            if (bounce) {\n              // For bounced messages to non-existent users, show a special message\n              setSecurityAlert({\n                username: 'System',\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\n                type: 'info'\n              });\n\n              // Add message to local state as bounced\n              setMessages(msgs => [...msgs, {\n                from: username,\n                message: message.trim(),\n                fromDeviceId: deviceId,\n                timestamp: new Date(),\n                status: 'bounced',\n                expiresAt: Date.now() + 14400000,\n                // 4 hours\n                encrypted: isEncrypted\n              }]);\n              setMessage('');\n            } else {\n              setSecurityAlert({\n                username: 'System',\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\n                type: 'warning'\n              });\n            }\n          } else if (errorMsg.includes('offline')) {\n            setSecurityAlert({\n              username: 'System',\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\n              type: 'warning'\n            });\n          } else {\n            setSecurityAlert({\n              username: 'System',\n              message: `Failed to send message: ${errorMsg}`,\n              type: 'error'\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error sending message: ${error.message}`,\n        type: 'error'\n      });\n      setStatus('Registered successfully');\n    }\n  };\n\n  // Request public key from a user\n  const requestPublicKey = async username => {\n    return new Promise((resolve, reject) => {\n      if (!socketRef.current) {\n        reject(new Error('Not connected'));\n        return;\n      }\n      console.log(`Requesting public key for ${username}...`);\n\n      // Set a timeout in case the server doesn't respond\n      const requestTimeout = setTimeout(() => {\n        console.error(`Public key request for ${username} timed out`);\n        reject(new Error('Request timed out'));\n      }, 10000);\n      socketRef.current.emit('requestPublicKey', {\n        username\n      }, response => {\n        clearTimeout(requestTimeout);\n        if (response && response.success && response.publicKey) {\n          console.log(`Received public key for ${username}`);\n          setPublicKeys(prev => ({\n            ...prev,\n            [username]: response.publicKey\n          }));\n          resolve(response.publicKey);\n        } else {\n          const reason = (response === null || response === void 0 ? void 0 : response.reason) || 'Public key not available';\n          console.log(`No public key available for ${username}: ${reason}`);\n          reject(new Error(reason));\n        }\n      });\n    });\n  };\n\n  // Handle relay bounce for any user\n  const handleRelayBounce = e => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n\n    // Show confirmation before bouncing\n    const confirmBounce = window.confirm(`RELAY MESSAGE\\n\\n` + `Your message to \"${recipient}\" will be stored on ${connectionDetails.relayStatus === 'connected_to_relay' ? 'relay' : 'base node'} servers for up to 4 hours.\\n\\n` + `It will be delivered when ${recipient} comes online or registers with the network.\\n\\n` + `Continue?`);\n    if (confirmBounce) {\n      handleSend(e, true);\n    }\n  };\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n\n    // Send typing indicator\n    if (socketRef.current && recipient && e.target.value.length > 0) {\n      socketRef.current.emit('typing', {\n        to: recipient\n      });\n    }\n  };\n  const handleDisconnect = () => {\n    if (socketRef.current) {\n      // Notify the server that we're intentionally disconnecting\n      socketRef.current.emit('userLogout', {\n        username,\n        deviceId\n      }, () => {\n        console.log('Sent logout notification to server');\n\n        // Now disconnect\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      });\n    }\n\n    // Clear local state\n    setConnected(false);\n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({\n      exists: false,\n      online: false\n    });\n    setStatus('Disconnected');\n    setRelayStatus('offline');\n    clearInterval(pingIntervalRef.current);\n  };\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  const formatMessageTime = timestamp => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#0a0e14',\n      minHeight: '100vh',\n      color: '#a2aabc',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontFamily: '\"Fira Code\", monospace'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#171c28',\n        padding: 32,\n        borderRadius: 8,\n        minWidth: 400,\n        maxWidth: 600,\n        boxShadow: '0 4px 30px rgba(0, 255, 170, 0.15)',\n        border: '1px solid rgba(0, 255, 170, 0.3)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: 24\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: 0,\n            color: '#5ccfe6',\n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          },\n          children: \"WhisperNet_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1556,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 12,\n            padding: '4px 8px',\n            borderRadius: 4,\n            background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n            color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n            cursor: 'pointer'\n          },\n          onClick: () => setShowConnectionInfo(!showConnectionInfo),\n          children: relayStatus === 'online' ? 'Base Node Online' : relayStatus === 'checking' ? 'Checking...' : 'Base Node Offline'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1562,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 9\n      }, this), showConnectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#0d1117',\n          padding: 12,\n          borderRadius: 4,\n          fontSize: 12,\n          fontFamily: 'monospace',\n          marginBottom: 16,\n          border: '1px solid #1e2d3d'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1585,\n          columnNumber: 13\n        }, this), connected && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Socket ID: \", connectionDetails.socketId || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1588,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Transport: \", connectionDetails.transport || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1589,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Base Node: \", connectionDetails.baseNodeUrl || BASE_NODE_URL]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1590,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#5ccfe6'\n              },\n              children: relayServerUrl || 'Unknown'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1591,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1591,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40'\n              },\n              children: connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1592,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1592,\n            columnNumber: 17\n          }, this), connectionDetails.connectedUsers !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Users on Relay: \", connectionDetails.connectedUsers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1601,\n            columnNumber: 19\n          }, this), connectionDetails.ip && connectionDetails.port && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Address: \", connectionDetails.ip, \":\", connectionDetails.port]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1604,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Base Node Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            },\n            children: relayStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1608,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1608,\n          columnNumber: 13\n        }, this), deviceId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Device ID: \", deviceId.substring(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1611,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1576,\n        columnNumber: 11\n      }, this), securityAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#4b1c1c',\n          color: '#ff8f40',\n          padding: 12,\n          borderRadius: 4,\n          marginBottom: 16,\n          position: 'relative',\n          fontSize: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 20\n          },\n          children: securityAlert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1625,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            position: 'absolute',\n            top: 8,\n            right: 8,\n            background: 'none',\n            border: 'none',\n            color: '#ff8f40',\n            cursor: 'pointer',\n            fontSize: 16\n          },\n          onClick: dismissAlert,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1626,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1616,\n        columnNumber: 11\n      }, this), !connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 16,\n            fontSize: 14,\n            color: '#5ccfe6'\n          },\n          children: [getTimestamp(), \" Initializing secure connection...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1646,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleUsernameSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              width: '100%',\n              padding: 10,\n              marginBottom: 12,\n              borderRadius: 4,\n              border: '1px solid #1e2d3d',\n              background: '#0d1117',\n              color: '#a2aabc',\n              fontSize: 16,\n              fontFamily: '\"Fira Code\", monospace',\n              boxSizing: 'border-box'\n            },\n            placeholder: \"Enter username\",\n            value: username,\n            onChange: e => {\n              setUsername(e.target.value);\n              setUsernameAvailable(true);\n            },\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1650,\n            columnNumber: 15\n          }, this), !usernameAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: '#ff8f40',\n              fontSize: 12,\n              marginTop: -8,\n              marginBottom: 8\n            },\n            children: \"Username not available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1671,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '100%',\n              padding: 10,\n              borderRadius: 4,\n              background: relayStatus === 'online' ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n              color: '#171c28',\n              fontWeight: 'bold',\n              fontSize: 16,\n              border: 'none',\n              cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            type: \"submit\",\n            disabled: relayStatus !== 'online' || isCheckingUsername,\n            children: isCheckingUsername ? 'CHECKING...' : relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1672,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1649,\n          columnNumber: 13\n        }, this), relayStatus !== 'online' && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            width: '100%',\n            padding: 8,\n            marginTop: 8,\n            borderRadius: 4,\n            background: '#4b1c1c',\n            color: '#ff8f40',\n            fontSize: 14,\n            border: 'none',\n            cursor: 'pointer',\n            fontFamily: '\"Fira Code\", monospace'\n          },\n          onClick: retryConnection,\n          children: \"RETRY CONNECTION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1694,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 12,\n            color: '#ff3333',\n            textAlign: 'center',\n            fontSize: 14\n          },\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1712,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1645,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSend,\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            marginBottom: 16\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginBottom: 8\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Recipient username\",\n              value: recipient,\n              onChange: handleRecipientChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1720,\n              columnNumber: 17\n            }, this), recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                marginLeft: 8,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 8,\n                  height: 8,\n                  borderRadius: '50%',\n                  background: recipientStatus.online ? '#bae67e' : recipientStatus.exists ? '#ff8f40' : '#ff3333',\n                  marginRight: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1744,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 12,\n                  color: recipientStatus.online ? '#bae67e' : recipientStatus.exists ? '#ff8f40' : '#ff3333'\n                },\n                children: recipientStatus.online ? 'ONLINE' : 'OFFLINE'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1752,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1738,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1719,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Type a message\",\n              value: message,\n              onChange: handleMessageChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1763,\n              columnNumber: 17\n            }, this), recipient ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  padding: '0 18px',\n                  borderRadius: '4px 0 0 4px',\n                  background: recipientStatus.online ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n                  color: '#171c28',\n                  fontWeight: 'bold',\n                  fontSize: 14,\n                  border: 'none',\n                  cursor: recipientStatus.online ? 'pointer' : 'not-allowed',\n                  fontFamily: '\"Fira Code\", monospace'\n                },\n                type: \"submit\",\n                disabled: !recipientStatus.online,\n                title: recipientStatus.online ? \"Send message directly\" : \"User is offline or not found\",\n                children: \"SEND\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1783,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  padding: '0 12px',\n                  borderRadius: '0 4px 4px 0',\n                  background: '#4b1c1c',\n                  color: '#ff8f40',\n                  fontWeight: 'bold',\n                  fontSize: 14,\n                  border: 'none',\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace',\n                  display: 'flex',\n                  alignItems: 'center'\n                },\n                onClick: handleRelayBounce,\n                title: \"Message will be stored on relay servers for up to 4 hours\",\n                children: [\"RELAY\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    fontSize: 10,\n                    marginLeft: 4,\n                    background: 'rgba(255, 143, 64, 0.2)',\n                    padding: '1px 3px',\n                    borderRadius: 2\n                  },\n                  children: \"4h\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1823,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1805,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1781,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '0 18px',\n                borderRadius: 4,\n                background: '#636b78',\n                color: '#171c28',\n                fontWeight: 'bold',\n                fontSize: 14,\n                border: 'none',\n                cursor: 'not-allowed',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              disabled: true,\n              children: \"SEND\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1835,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1762,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1718,\n          columnNumber: 13\n        }, this), typing && recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 12,\n            color: '#5ccfe6',\n            marginBottom: 8\n          },\n          children: [recipient, \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1856,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#0d1117',\n            borderRadius: 4,\n            padding: 12,\n            minHeight: 200,\n            maxHeight: 350,\n            overflowY: 'auto',\n            marginBottom: 12,\n            border: '1px solid #1e2d3d',\n            fontFamily: 'monospace'\n          },\n          children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: '#5ccfe6',\n              fontSize: 14\n            },\n            children: [getTimestamp(), \" Connection established. Awaiting transmission...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1873,\n            columnNumber: 17\n          }, this) : messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 12,\n              padding: 8,\n              borderRadius: 4,\n              background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\n              borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: 4,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: msg.from === username ? '#5ccfe6' : '#bae67e',\n                  fontWeight: 'bold'\n                },\n                children: [msg.from === username ? 'YOU' : msg.from, msg.bounced && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: '#ff8f40',\n                    marginLeft: 6\n                  },\n                  children: \"(bounced)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1896,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1891,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#636b78'\n                },\n                children: formatMessageTime(msg.timestamp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1898,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1885,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                wordBreak: 'break-word',\n                fontSize: 14\n              },\n              children: msg.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1900,\n              columnNumber: 21\n            }, this), msg.status === 'bounced' && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 10,\n                color: '#ff8f40',\n                marginTop: 4,\n                fontStyle: 'italic'\n              },\n              children: \"Message will be delivered when recipient comes online (expires in 4 hours)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1902,\n              columnNumber: 23\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1878,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1914,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1861,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              padding: '8px 16px',\n              borderRadius: 4,\n              background: '#4b1c1c',\n              color: '#ff8f40',\n              fontSize: 14,\n              border: 'none',\n              cursor: 'pointer',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            onClick: handleDisconnect,\n            children: \"DISCONNECT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1918,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              color: '#636b78',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: 8,\n                height: 8,\n                borderRadius: '50%',\n                background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                marginRight: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1940,\n              columnNumber: 17\n            }, this), status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1934,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1917,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1541,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1532,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kz/4yMGTzNg3iWcUlr817dL82LI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","axios","FingerprintJS","jsxDEV","_jsxDEV","Fragment","_Fragment","BASE_NODE_URL","process","env","REACT_APP_BASE_NODE_URL","IDENTITY_STORAGE_KEY","CHAT_HISTORY_KEY","TRUST_STATUS_KEY","generateKeyPair","keyPair","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","publicKey","exportKey","privateKey","error","console","encryptMessage","message","publicKeyJwk","importKey","encoder","TextEncoder","data","encode","encryptedData","encrypt","btoa","String","fromCharCode","decryptMessage","encryptedMessage","privateKeyJwk","from","atob","c","charCodeAt","decryptedData","decrypt","decoder","TextDecoder","decode","fpPromise","load","App","_s","username","setUsername","recipient","setRecipient","setMessage","messages","setMessages","connected","setConnected","status","setStatus","deviceId","setDeviceId","connectionDetails","setConnectionDetails","showConnectionInfo","setShowConnectionInfo","securityAlert","setSecurityAlert","typing","setTyping","relayServerUrl","setRelayServerUrl","relayStatus","setRelayStatus","onlineUsers","setOnlineUsers","recipientStatus","setRecipientStatus","exists","online","isCheckingUsername","setIsCheckingUsername","usernameAvailable","setUsernameAvailable","setKeyPair","publicKeys","setPublicKeys","encryptionEnabled","setEncryptionEnabled","encryptionStatus","setEncryptionStatus","knownIdentities","setKnownIdentities","identityMismatch","setIdentityMismatch","showIdentityWarning","setShowIdentityWarning","chatHistory","setChatHistory","contacts","setContacts","activeChat","setActiveChat","trustStatus","setTrustStatus","showTrustWarning","setShowTrustWarning","socketRef","messagesEndRef","typingTimeoutRef","pingIntervalRef","recipientCheckTimeoutRef","loadKnownIdentities","storedIdentities","localStorage","getItem","parsedIdentities","JSON","parse","log","Object","keys","length","saveKnownIdentities","identities","setItem","stringify","loadChatHistory","storedChatHistory","parsedChatHistory","contactsList","saveChatHistory","history","loadTrustStatus","storedTrustStatus","parsedTrustStatus","saveTrustStatus","updateChatHistory","contact","prevHistory","updatedHistory","includes","updatedContacts","updateTrustStatus","updates","prevStatus","updatedStatus","trusted","keyExchanged","mutualMessaging","sentMessage","receivedMessage","firstInteraction","Date","toISOString","initializeDevice","fp","result","get","visitorId","initializeEncryption","fallbackId","Math","random","toString","substr","deviceIdentifier","storedKeys","parsedKeys","testMessage","now","encrypted","decrypted","warn","generateAndStoreNewKeys","testError","parseError","type","newKeyPair","checkRelayStatus","response","timeout","tempSocket","transports","reconnectionAttempts","reconnectionDelay","forceNew","connectionTimeout","setTimeout","disconnect","on","clearTimeout","err","connectToBaseNode","current","clearInterval","fetchRelayInfo","emit","info","relayId","prev","connectedUsers","ip","port","relayInfo","success","isDirect","socketId","id","substring","relayInfoInterval","setInterval","query","transport","engine","baseNodeUrl","relays","timestamp","registerWithBaseNode","connectToRelay","startRelayPolling","callback","originalDeviceId","newDeviceId","originalPublicKey","action","updatedIdentities","firstSeen","connectSocketEvents","getOnlineUsers","startPingInterval","errorMsg","reason","cachedRelayInfo","cachedRelays","parsedCache","relay","relayUrl","startsWith","oldSocket","relayConnectionTimeout","relayPollingInterval","fromDeviceId","bounced","previousMessages","filter","msg","decryptedMessage","decryptionStatus","msgs","ack","user","notRegisteredYet","u","checkRecipientStatus","Array","isArray","users","typingUser","checking","checkingTimeout","relayResponse","timeoutId","_messagesEndRef$curre","scrollIntoView","behavior","handleUsernameSubmit","e","preventDefault","trim","handleRecipientChange","newRecipient","target","value","handleSend","bounce","recipientOnline","requestPublicKey","finalMessage","isEncrypted","messageData","to","messageTimeout","delivered","expiresAt","Promise","resolve","reject","Error","requestTimeout","handleRelayBounce","confirmBounce","confirm","handleMessageChange","handleDisconnect","dismissAlert","retryConnection","getTimestamp","getHours","padStart","getMinutes","getSeconds","formatMessageTime","date","style","background","minHeight","color","display","alignItems","justifyContent","fontFamily","children","padding","borderRadius","minWidth","maxWidth","boxShadow","border","marginBottom","margin","letterSpacing","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","cursor","onClick","undefined","position","marginRight","top","right","onSubmit","width","boxSizing","placeholder","onChange","required","marginTop","fontWeight","disabled","textAlign","flexDirection","flex","marginLeft","height","title","maxHeight","overflowY","map","i","borderLeft","wordBreak","fontStyle","ref","_c","$RefreshReg$"],"sources":["C:/Users/siddharth/Documents/GitHub/WhisperNet/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\r\n\r\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\r\n\r\n// Storage keys\r\nconst IDENTITY_STORAGE_KEY = 'whispernetKnownIdentities';\r\nconst CHAT_HISTORY_KEY = 'whispernetChatHistory';\r\nconst TRUST_STATUS_KEY = 'whispernetTrustStatus';\r\n\r\n// Encryption utilities\r\nconst generateKeyPair = async () => {\r\n  try {\r\n    const keyPair = await window.crypto.subtle.generateKey(\r\n      {\r\n        name: \"RSA-OAEP\",\r\n        modulusLength: 2048,\r\n        publicExponent: new Uint8Array([1, 0, 1]),\r\n        hash: \"SHA-256\",\r\n      },\r\n      true,\r\n      [\"encrypt\", \"decrypt\"]\r\n    );\r\n    \r\n    // Export the keys to JWK format\r\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\r\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\r\n    \r\n    return { publicKey, privateKey };\r\n  } catch (error) {\r\n    console.error('Error generating key pair:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst encryptMessage = async (message, publicKeyJwk) => {\r\n  try {\r\n    // Import the public key\r\n    const publicKey = await window.crypto.subtle.importKey(\r\n      \"jwk\",\r\n      publicKeyJwk,\r\n      {\r\n        name: \"RSA-OAEP\",\r\n        hash: \"SHA-256\",\r\n      },\r\n      false,\r\n      [\"encrypt\"]\r\n    );\r\n    \r\n    // Convert the message to ArrayBuffer\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(message);\r\n    \r\n    // Encrypt the data\r\n    const encryptedData = await window.crypto.subtle.encrypt(\r\n      {\r\n        name: \"RSA-OAEP\"\r\n      },\r\n      publicKey,\r\n      data\r\n    );\r\n    \r\n    // Convert the encrypted data to base64\r\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\r\n  } catch (error) {\r\n    console.error('Error encrypting message:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\r\n  try {\r\n    // Import the private key\r\n    const privateKey = await window.crypto.subtle.importKey(\r\n      \"jwk\",\r\n      privateKeyJwk,\r\n      {\r\n        name: \"RSA-OAEP\",\r\n        hash: \"SHA-256\",\r\n      },\r\n      false,\r\n      [\"decrypt\"]\r\n    );\r\n    \r\n    // Convert the base64 encrypted message to ArrayBuffer\r\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\r\n    \r\n    // Decrypt the data\r\n    const decryptedData = await window.crypto.subtle.decrypt(\r\n      {\r\n        name: \"RSA-OAEP\"\r\n      },\r\n      privateKey,\r\n      encryptedData\r\n    );\r\n    \r\n    // Convert the decrypted data to string\r\n    const decoder = new TextDecoder();\r\n    return decoder.decode(decryptedData);\r\n  } catch (error) {\r\n    console.error('Error decrypting message:', error);\r\n    return '[Encrypted message - cannot decrypt]';\r\n  }\r\n};\r\n\r\n// Initialize the fingerprint agent\r\nconst fpPromise = FingerprintJS.load();\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [recipient, setRecipient] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [connected, setConnected] = useState(false);\r\n  const [status, setStatus] = useState('Checking relay status...');\r\n  const [deviceId, setDeviceId] = useState('');\r\n  const [connectionDetails, setConnectionDetails] = useState({});\r\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\r\n  const [securityAlert, setSecurityAlert] = useState(null);\r\n  const [typing, setTyping] = useState(false);\r\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\r\n  const [relayStatus, setRelayStatus] = useState('checking');\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [recipientStatus, setRecipientStatus] = useState({ exists: false, online: false });\r\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\r\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\r\n  const [keyPair, setKeyPair] = useState(null);\r\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\r\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\r\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\r\n  const [knownIdentities, setKnownIdentities] = useState({}); // username -> {deviceId, publicKey, firstSeen}\r\n  const [identityMismatch, setIdentityMismatch] = useState(null); // {username, originalDeviceId, newDeviceId, action}\r\n  const [showIdentityWarning, setShowIdentityWarning] = useState(false);\r\n  \r\n  // New state variables for enhanced chat functionality\r\n  const [chatHistory, setChatHistory] = useState({}); // username -> array of messages\r\n  const [contacts, setContacts] = useState([]); // list of usernames the current user has chatted with\r\n  const [activeChat, setActiveChat] = useState(null); // currently selected chat\r\n  const [trustStatus, setTrustStatus] = useState({}); // username -> {trusted: boolean, keyExchanged: boolean, mutualMessaging: boolean}\r\n  const [showTrustWarning, setShowTrustWarning] = useState(false); // whether to show the trust warning for the current chat\r\n  \r\n  const socketRef = useRef(null);\r\n  const messagesEndRef = useRef(null);\r\n  const typingTimeoutRef = useRef(null);\r\n  const pingIntervalRef = useRef(null);\r\n  const recipientCheckTimeoutRef = useRef(null);\r\n\r\n  // Load known identities from localStorage\r\n  const loadKnownIdentities = () => {\r\n    try {\r\n      const storedIdentities = localStorage.getItem(IDENTITY_STORAGE_KEY);\r\n      if (storedIdentities) {\r\n        const parsedIdentities = JSON.parse(storedIdentities);\r\n        setKnownIdentities(parsedIdentities);\r\n        console.log('Loaded known identities:', Object.keys(parsedIdentities).length);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading known identities:', error);\r\n    }\r\n  };\r\n\r\n  // Save known identities to localStorage\r\n  const saveKnownIdentities = (identities) => {\r\n    try {\r\n      localStorage.setItem(IDENTITY_STORAGE_KEY, JSON.stringify(identities));\r\n    } catch (error) {\r\n      console.error('Error saving known identities:', error);\r\n    }\r\n  };\r\n  \r\n  // Load chat history from localStorage\r\n  const loadChatHistory = () => {\r\n    try {\r\n      const storedChatHistory = localStorage.getItem(CHAT_HISTORY_KEY);\r\n      if (storedChatHistory) {\r\n        const parsedChatHistory = JSON.parse(storedChatHistory);\r\n        setChatHistory(parsedChatHistory);\r\n        \r\n        // Extract contacts from chat history\r\n        const contactsList = Object.keys(parsedChatHistory);\r\n        setContacts(contactsList);\r\n        console.log('Loaded chat history for contacts:', contactsList.length);\r\n        \r\n        // If we have contacts but no active chat, set the first contact as active\r\n        if (contactsList.length > 0 && !activeChat) {\r\n          setActiveChat(contactsList[0]);\r\n          setRecipient(contactsList[0]);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n    }\r\n  };\r\n  \r\n  // Save chat history to localStorage\r\n  const saveChatHistory = (history) => {\r\n    try {\r\n      localStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(history));\r\n    } catch (error) {\r\n      console.error('Error saving chat history:', error);\r\n    }\r\n  };\r\n  \r\n  // Load trust status from localStorage\r\n  const loadTrustStatus = () => {\r\n    try {\r\n      const storedTrustStatus = localStorage.getItem(TRUST_STATUS_KEY);\r\n      if (storedTrustStatus) {\r\n        const parsedTrustStatus = JSON.parse(storedTrustStatus);\r\n        setTrustStatus(parsedTrustStatus);\r\n        console.log('Loaded trust status for users:', Object.keys(parsedTrustStatus).length);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading trust status:', error);\r\n    }\r\n  };\r\n  \r\n  // Save trust status to localStorage\r\n  const saveTrustStatus = (status) => {\r\n    try {\r\n      localStorage.setItem(TRUST_STATUS_KEY, JSON.stringify(status));\r\n    } catch (error) {\r\n      console.error('Error saving trust status:', error);\r\n    }\r\n  };\r\n  \r\n  // Update chat history with a new message\r\n  const updateChatHistory = (contact, message) => {\r\n    setChatHistory(prevHistory => {\r\n      const updatedHistory = { ...prevHistory };\r\n      \r\n      // Initialize chat history for this contact if it doesn't exist\r\n      if (!updatedHistory[contact]) {\r\n        updatedHistory[contact] = [];\r\n      }\r\n      \r\n      // Add the message to the chat history\r\n      updatedHistory[contact] = [...updatedHistory[contact], message];\r\n      \r\n      // Save the updated chat history\r\n      saveChatHistory(updatedHistory);\r\n      \r\n      // Update contacts list if this is a new contact\r\n      if (!contacts.includes(contact)) {\r\n        const updatedContacts = [...contacts, contact];\r\n        setContacts(updatedContacts);\r\n      }\r\n      \r\n      return updatedHistory;\r\n    });\r\n  };\r\n  \r\n  // Check and update trust status for a contact\r\n  const updateTrustStatus = (contact, updates) => {\r\n    setTrustStatus(prevStatus => {\r\n      const updatedStatus = { ...prevStatus };\r\n      \r\n      // Initialize trust status for this contact if it doesn't exist\r\n      if (!updatedStatus[contact]) {\r\n        updatedStatus[contact] = {\r\n          trusted: false,\r\n          keyExchanged: false,\r\n          mutualMessaging: false,\r\n          sentMessage: false,\r\n          receivedMessage: false,\r\n          firstInteraction: new Date().toISOString()\r\n        };\r\n      }\r\n      \r\n      // Apply updates\r\n      updatedStatus[contact] = {\r\n        ...updatedStatus[contact],\r\n        ...updates\r\n      };\r\n      \r\n      // Check if mutual messaging has occurred\r\n      if (updatedStatus[contact].sentMessage && updatedStatus[contact].receivedMessage) {\r\n        updatedStatus[contact].mutualMessaging = true;\r\n        \r\n        // If mutual messaging has occurred and we have their public key, mark as trusted and exchange keys\r\n        if (publicKeys[contact]) {\r\n          updatedStatus[contact].keyExchanged = true;\r\n          updatedStatus[contact].trusted = true;\r\n          \r\n          // Update the UI to show trust status change\r\n          if (contact === recipient) {\r\n            setShowTrustWarning(false);\r\n          }\r\n        }\r\n      } else {\r\n        // If we don't have mutual messaging yet, make sure to show the warning\r\n        if (contact === recipient) {\r\n          setShowTrustWarning(true);\r\n        }\r\n      }\r\n      \r\n      // Save the updated trust status\r\n      saveTrustStatus(updatedStatus);\r\n      \r\n      return updatedStatus;\r\n    });\r\n  };\r\n\r\n  // Get device fingerprint and initialize encryption on component mount\r\n  useEffect(() => {\r\n    const initializeDevice = async () => {\r\n      try {\r\n        // Get device fingerprint\r\n        const fp = await fpPromise;\r\n        const result = await fp.get();\r\n        const visitorId = result.visitorId;\r\n        setDeviceId(visitorId);\r\n        \r\n        // Initialize encryption\r\n        await initializeEncryption(visitorId);\r\n        \r\n        // Load stored data\r\n        loadKnownIdentities();\r\n        loadChatHistory();\r\n        loadTrustStatus();\r\n      } catch (error) {\r\n        console.error('Failed to initialize device:', error);\r\n        // Generate a fallback device ID\r\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\r\n        setDeviceId(fallbackId);\r\n        \r\n        // Initialize encryption with fallback ID\r\n        await initializeEncryption(fallbackId);\r\n        \r\n        // Load stored data\r\n        loadKnownIdentities();\r\n        loadChatHistory();\r\n        loadTrustStatus();\r\n      }\r\n    };\r\n    \r\n    initializeDevice();\r\n  }, []);\r\n  \r\n  // Initialize encryption\r\n  const initializeEncryption = async (deviceIdentifier) => {\r\n    try {\r\n      setEncryptionStatus('initializing');\r\n      \r\n      // Check if we have keys in localStorage\r\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\r\n      \r\n      if (storedKeys) {\r\n        // We have stored keys, check if they're valid\r\n        try {\r\n          const parsedKeys = JSON.parse(storedKeys);\r\n          \r\n          // Validate the keys by testing encryption/decryption\r\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\r\n            try {\r\n              // Test encryption with the stored keys\r\n              const testMessage = \"test-encryption-\" + Date.now();\r\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\r\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\r\n              \r\n              if (decrypted === testMessage) {\r\n                // Keys are valid\r\n                setKeyPair(parsedKeys);\r\n                console.log('Loaded and validated existing encryption keys');\r\n                setEncryptionStatus('ready');\r\n              } else {\r\n                console.warn('Stored keys failed validation test');\r\n                await generateAndStoreNewKeys(deviceIdentifier);\r\n              }\r\n            } catch (testError) {\r\n              console.error('Error testing stored keys:', testError);\r\n              await generateAndStoreNewKeys(deviceIdentifier);\r\n            }\r\n          } else {\r\n            console.warn('Stored keys are incomplete');\r\n            await generateAndStoreNewKeys(deviceIdentifier);\r\n          }\r\n        } catch (parseError) {\r\n          console.error('Error parsing stored keys:', parseError);\r\n          await generateAndStoreNewKeys(deviceIdentifier);\r\n        }\r\n      } else {\r\n        // No stored keys, generate new ones\r\n        await generateAndStoreNewKeys(deviceIdentifier);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing encryption:', error);\r\n      setEncryptionStatus('error');\r\n      setSecurityAlert({\r\n        username: 'System',\r\n        message: 'Failed to initialize encryption. Messages will not be secure.',\r\n        type: 'error'\r\n      });\r\n      setEncryptionEnabled(false);\r\n    }\r\n  };\r\n  \r\n  // Generate and store new keys\r\n  const generateAndStoreNewKeys = async (deviceIdentifier) => {\r\n    try {\r\n      console.log('Generating new encryption keys...');\r\n      const newKeyPair = await generateKeyPair();\r\n      setKeyPair(newKeyPair);\r\n      \r\n      // Store keys in localStorage\r\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\r\n      \r\n      console.log('Generated and stored new encryption keys');\r\n      setEncryptionStatus('ready');\r\n    } catch (error) {\r\n      console.error('Error generating new keys:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Check relay status on initial load\r\n  useEffect(() => {\r\n    if (deviceId) {\r\n      checkRelayStatus();\r\n    }\r\n  }, [deviceId]);\r\n\r\n  // Function to check relay status\r\n  const checkRelayStatus = async () => {\r\n    setStatus('Checking base node status...');\r\n    setRelayStatus('checking');\r\n    \r\n    try {\r\n      // First try HTTP health check\r\n      const response = await axios.get(`${BASE_NODE_URL}/health`, { \r\n        timeout: 5000 \r\n      });\r\n      \r\n      if (response.status === 200) {\r\n        setRelayStatus('online');\r\n        setStatus('Base node online. Please login.');\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.log('HTTP health check failed, trying socket connection:', error.message);\r\n    }\r\n    \r\n    // Fallback to socket connection test\r\n    const tempSocket = io(BASE_NODE_URL, {\r\n      transports: ['websocket', 'polling'],\r\n      reconnectionAttempts: 2,\r\n      reconnectionDelay: 1000,\r\n      timeout: 5000,\r\n      forceNew: true\r\n    });\r\n    \r\n    const connectionTimeout = setTimeout(() => {\r\n      setRelayStatus('timeout');\r\n      setStatus('Connection timeout. Base node may be offline.');\r\n      tempSocket.disconnect();\r\n    }, 8000);\r\n    \r\n    tempSocket.on('connect', () => {\r\n      clearTimeout(connectionTimeout);\r\n      setRelayStatus('online');\r\n      setStatus('Base node online. Please login.');\r\n      tempSocket.disconnect();\r\n    });\r\n    \r\n    tempSocket.on('connect_error', (err) => {\r\n      clearTimeout(connectionTimeout);\r\n      console.error('Socket connection error:', err);\r\n      setRelayStatus('offline');\r\n      setStatus('Base node offline. Please try again later.');\r\n      tempSocket.disconnect();\r\n    });\r\n  };\r\n\r\n  // Main socket connection effect\r\n  useEffect(() => {\r\n    if (connected && username && deviceId) {\r\n      connectToBaseNode();\r\n    }\r\n    \r\n    return () => {\r\n      if (socketRef.current) {\r\n        clearInterval(pingIntervalRef.current);\r\n        clearTimeout(recipientCheckTimeoutRef.current);\r\n        clearTimeout(typingTimeoutRef.current);\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n    };\r\n  }, [connected, username, deviceId]);\r\n\r\n  useEffect(() => {\r\n    if (connected && socketRef.current) {\r\n      const fetchRelayInfo = () => {\r\n        console.log('Fetching relay info...');\r\n        \r\n        // First try to get relay info directly from the socket\r\n        socketRef.current.emit('getRelayInfo', {}, (info) => {\r\n          if (info && info.relayId) {\r\n            console.log('Received relay info from socket:', info);\r\n            // Update relay server information\r\n            setRelayServerUrl(info.relayId);\r\n            setConnectionDetails(prev => ({ \r\n              ...prev, \r\n              relayId: info.relayId,\r\n              relayStatus: info.status || 'connected',\r\n              connectedUsers: info.connectedUsers,\r\n              ip: info.ip,\r\n              port: info.port\r\n            }));\r\n            \r\n            // Show connection info automatically on first connect\r\n            if (!showConnectionInfo) {\r\n              setShowConnectionInfo(true);\r\n              \r\n              // Auto-hide after 5 seconds\r\n              setTimeout(() => {\r\n                setShowConnectionInfo(false);\r\n              }, 5000);\r\n            }\r\n          } else {\r\n            console.warn('No relay info received from socket, checking with base node');\r\n            \r\n            // If we're connected to the base node, try to get our relay assignment\r\n            socketRef.current.emit('getMyRelayInfo', { username }, (relayInfo) => {\r\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\r\n                console.log('Received relay assignment from base node:', relayInfo);\r\n                \r\n                if (relayInfo.isDirect) {\r\n                  // We're directly connected to the base node\r\n                  setRelayServerUrl('Direct to Base Node');\r\n                  setConnectionDetails(prev => ({ \r\n                    ...prev, \r\n                    relayId: 'direct',\r\n                    relayStatus: 'direct_to_base',\r\n                  }));\r\n                } else {\r\n                  // We're assigned to a relay\r\n                  setRelayServerUrl(relayInfo.relayId);\r\n                  setConnectionDetails(prev => ({ \r\n                    ...prev, \r\n                    relayId: relayInfo.relayId,\r\n                    relayStatus: 'assigned_by_base',\r\n                  }));\r\n                }\r\n              } else {\r\n                console.warn('No relay assignment from base node, assuming direct connection');\r\n                \r\n                // If we can't get relay info, we're probably directly connected to the base node\r\n                const socketId = socketRef.current.id;\r\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\r\n                setConnectionDetails(prev => ({ \r\n                  ...prev, \r\n                  relayId: 'direct',\r\n                  relayStatus: 'direct_to_base',\r\n                }));\r\n              }\r\n            });\r\n          }\r\n        });\r\n      };\r\n      \r\n      // Get relay info immediately and then every 10 seconds\r\n      fetchRelayInfo();\r\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\r\n      \r\n      return () => clearInterval(relayInfoInterval);\r\n    }\r\n  }, [connected, showConnectionInfo, username]);\r\n\r\n  const connectToBaseNode = () => {\r\n    // Clear any previous connection\r\n    if (socketRef.current) {\r\n      socketRef.current.disconnect();\r\n    }\r\n    \r\n    // Always connect to base node first for handshake and relay discovery\r\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\r\n    setStatus('Connecting to base node for handshake...');\r\n    \r\n    // Connect to base node\r\n    socketRef.current = io(BASE_NODE_URL, {\r\n      transports: ['websocket', 'polling'],\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 2000,\r\n      query: { \r\n        deviceId,\r\n        username \r\n      },\r\n      forceNew: true\r\n    });\r\n    \r\n    // Connection event handlers\r\n    socketRef.current.on('connect', () => {\r\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\r\n      setStatus('Connected to base node for handshake');\r\n      setRelayStatus('online');\r\n      \r\n      // When connecting to the base node, set the relay information accordingly\r\n      setRelayServerUrl(`Base Node (Handshake)`);\r\n      setConnectionDetails({\r\n        socketId: socketRef.current.id,\r\n        transport: socketRef.current.io.engine.transport.name,\r\n        baseNodeUrl: BASE_NODE_URL,\r\n        relayId: 'base_handshake',\r\n        relayStatus: 'handshake'\r\n      });\r\n      \r\n      // Get available relays first\r\n      socketRef.current.emit('getAvailableRelays', {}, (response) => {\r\n        console.log('Available relays:', response);\r\n        \r\n        if (response && response.relays && response.relays.length > 0) {\r\n          // Cache relay information\r\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\r\n            timestamp: Date.now(),\r\n            relays: response.relays\r\n          }));\r\n          \r\n          // Register with base node temporarily\r\n          registerWithBaseNode(() => {\r\n            // After successful registration, connect to a relay\r\n            connectToRelay(response.relays);\r\n          });\r\n        } else {\r\n          // No relays available, register directly with base node\r\n          registerWithBaseNode(() => {\r\n            // Set UI to indicate we're using base node as fallback\r\n            setRelayServerUrl('Base Node (Fallback)');\r\n            setConnectionDetails(prev => ({\r\n              ...prev,\r\n              relayId: 'direct',\r\n              relayStatus: 'direct_to_base'\r\n            }));\r\n            setStatus('Using Base Node as fallback (no relays available)');\r\n            \r\n            // Start polling for available relays\r\n            startRelayPolling();\r\n          });\r\n        }\r\n      });\r\n    });\r\n    \r\n    const registerWithBaseNode = (callback) => {\r\n      // Register with base node\r\n      socketRef.current.emit('registerUser', { \r\n        username, \r\n        deviceId,\r\n        publicKey: keyPair?.publicKey // Send public key during registration\r\n      }, (response) => {\r\n        console.log('Registration response:', response);\r\n        if (response && response.success) {\r\n          setStatus('Registered successfully with base node');\r\n          \r\n          // Check for identity mismatch warning\r\n          if (response.identityMismatch) {\r\n            console.warn('Identity mismatch detected during registration:', response.identityMismatch);\r\n            \r\n            // Show identity mismatch warning\r\n            setIdentityMismatch({\r\n              username,\r\n              originalDeviceId: response.identityMismatch.originalDeviceId,\r\n              newDeviceId: deviceId,\r\n              originalPublicKey: response.identityMismatch.originalPublicKey,\r\n              action: 'pending' // User hasn't decided what to do yet\r\n            });\r\n            \r\n            setShowIdentityWarning(true);\r\n          } else {\r\n            // No mismatch, this is either a new user or the same device\r\n            // Store this identity if it's new\r\n            if (!knownIdentities[username]) {\r\n              const updatedIdentities = {\r\n                ...knownIdentities,\r\n                [username]: {\r\n                  deviceId,\r\n                  publicKey: keyPair?.publicKey,\r\n                  firstSeen: new Date().toISOString()\r\n                }\r\n              };\r\n              setKnownIdentities(updatedIdentities);\r\n              saveKnownIdentities(updatedIdentities);\r\n              console.log(`Stored new identity for ${username}`);\r\n            }\r\n          }\r\n          \r\n          // Set up socket event handlers\r\n          connectSocketEvents();\r\n          \r\n          // Get initial data\r\n          getOnlineUsers();\r\n          startPingInterval();\r\n          \r\n          // Execute callback if provided\r\n          if (callback && typeof callback === 'function') {\r\n            callback();\r\n          }\r\n        } else {\r\n          const errorMsg = response?.reason || 'Registration failed';\r\n          setStatus(`Registration failed: ${errorMsg}`);\r\n          setSecurityAlert({\r\n            username: 'System',\r\n            message: `Registration failed: ${errorMsg}`,\r\n            type: 'error'\r\n          });\r\n        }\r\n      });\r\n    };\r\n    \r\n    socketRef.current.on('connect_error', (err) => {\r\n      console.error('Base node connection error:', err);\r\n      setStatus(`Connection failed: ${err.message}`);\r\n      setRelayStatus('offline');\r\n      \r\n      // Try to use cached relays if available\r\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\r\n      let cachedRelays = [];\r\n      \r\n      if (cachedRelayInfo) {\r\n        try {\r\n          const parsedCache = JSON.parse(cachedRelayInfo);\r\n          if (parsedCache.timestamp && (Date.now() - parsedCache.timestamp < 3600000)) { // Cache valid for 1 hour\r\n            cachedRelays = parsedCache.relays || [];\r\n            console.log('Using cached relay information:', cachedRelays);\r\n            \r\n            if (cachedRelays.length > 0) {\r\n              setTimeout(() => {\r\n                connectToRelay(cachedRelays);\r\n              }, 1000);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error parsing cached relay info:', error);\r\n        }\r\n      }\r\n    });\r\n    \r\n    socketRef.current.on('disconnect', (reason) => {\r\n      console.log('Disconnected from base node:', reason);\r\n      setStatus(`Disconnected: ${reason}`);\r\n      \r\n      // Don't auto-reconnect if user manually disconnected\r\n      if (reason !== 'io client disconnect' && connected) {\r\n        setTimeout(() => {\r\n          if (connected) {\r\n            // Try to reconnect to base node first\r\n            connectToBaseNode();\r\n          }\r\n        }, 3000);\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Function to connect to a relay server\r\n  const connectToRelay = (relays) => {\r\n    if (!relays || !relays.length) {\r\n      console.log('No relays available to connect to');\r\n      return;\r\n    }\r\n    \r\n    // Use the first available relay\r\n    const relay = relays[0];\r\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\r\n    \r\n    console.log(`Switching to relay server: ${relayUrl}`);\r\n    setStatus(`Connecting to relay server: ${relay.id}...`);\r\n    \r\n    // Disconnect from base node first\r\n    if (socketRef.current) {\r\n      // Keep a reference to the old socket for cleanup\r\n      const oldSocket = socketRef.current;\r\n      \r\n      // Create new socket for relay\r\n      socketRef.current = io(relayUrl, {\r\n        transports: ['websocket', 'polling'],\r\n        reconnectionAttempts: 3,\r\n        reconnectionDelay: 2000,\r\n        forceNew: true\r\n      });\r\n      \r\n      // Set a timeout to disconnect from base node after relay connection is established\r\n      const relayConnectionTimeout = setTimeout(() => {\r\n        if (!socketRef.current || !socketRef.current.connected) {\r\n          console.log('Relay connection timed out, staying with base node');\r\n          socketRef.current = oldSocket; // Restore old socket\r\n          setStatus('Using Base Node (relay connection failed)');\r\n          setRelayServerUrl('Base Node (Fallback)');\r\n          setConnectionDetails(prev => ({\r\n            ...prev,\r\n            relayId: 'direct',\r\n            relayStatus: 'direct_to_base'\r\n          }));\r\n          \r\n          // Start polling for available relays\r\n          startRelayPolling();\r\n        }\r\n      }, 5000);\r\n      \r\n      socketRef.current.on('connect', () => {\r\n        clearTimeout(relayConnectionTimeout);\r\n        console.log(`Connected to relay server: ${relayUrl}`);\r\n        \r\n        // Register with the relay\r\n        socketRef.current.emit('register', { \r\n          username, \r\n          deviceId \r\n        }, (response) => {\r\n          if (response && response.success) {\r\n            console.log('Successfully registered with relay');\r\n            \r\n            // Now we can safely disconnect from the base node\r\n            oldSocket.disconnect();\r\n            \r\n            setStatus(`Connected to relay server: ${relay.id}`);\r\n            setRelayServerUrl(relay.id);\r\n            setConnectionDetails(prev => ({\r\n              ...prev,\r\n              relayId: relay.id,\r\n              socketId: socketRef.current.id,\r\n              transport: socketRef.current.io.engine.transport.name,\r\n              relayStatus: 'connected_to_relay'\r\n            }));\r\n            \r\n            // Set up socket event handlers\r\n            connectSocketEvents();\r\n            \r\n            // Start ping interval\r\n            startPingInterval();\r\n            \r\n            // Show connection info automatically\r\n            setShowConnectionInfo(true);\r\n            setTimeout(() => {\r\n              setShowConnectionInfo(false);\r\n            }, 5000);\r\n          } else {\r\n            console.error('Failed to register with relay:', response);\r\n            setStatus('Failed to register with relay server');\r\n            \r\n            // Disconnect from relay and stay with base node\r\n            socketRef.current.disconnect();\r\n            socketRef.current = oldSocket;\r\n            \r\n            setStatus('Using Base Node (relay registration failed)');\r\n            setRelayServerUrl('Base Node (Fallback)');\r\n            setConnectionDetails(prev => ({\r\n              ...prev,\r\n              relayId: 'direct',\r\n              relayStatus: 'direct_to_base'\r\n            }));\r\n            \r\n            // Start polling for available relays\r\n            startRelayPolling();\r\n          }\r\n        });\r\n      });\r\n      \r\n      socketRef.current.on('connect_error', (err) => {\r\n        clearTimeout(relayConnectionTimeout);\r\n        console.error(`Relay connection error: ${err.message}`);\r\n        \r\n        // Stay with base node\r\n        socketRef.current = oldSocket;\r\n        \r\n        setStatus('Using Base Node (relay connection error)');\r\n        setRelayServerUrl('Base Node (Fallback)');\r\n        setConnectionDetails(prev => ({\r\n          ...prev,\r\n          relayId: 'direct',\r\n          relayStatus: 'direct_to_base'\r\n        }));\r\n        \r\n        // Start polling for available relays\r\n        startRelayPolling();\r\n      });\r\n      \r\n      socketRef.current.on('disconnect', (reason) => {\r\n        console.log(`Disconnected from relay: ${reason}`);\r\n        \r\n        // If we were previously connected to a relay and lost connection\r\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\r\n          setStatus(`Disconnected from relay: ${reason}`);\r\n          \r\n          // Try to reconnect to base node\r\n          setTimeout(() => {\r\n            if (connected) {\r\n              connectToBaseNode();\r\n            }\r\n          }, 1000);\r\n        }\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to periodically poll for available relays when using base node as fallback\r\n  const startRelayPolling = () => {\r\n    // Clear any existing polling interval\r\n    if (window.relayPollingInterval) {\r\n      clearInterval(window.relayPollingInterval);\r\n    }\r\n    \r\n    // Set up polling interval\r\n    window.relayPollingInterval = setInterval(() => {\r\n      if (socketRef.current && socketRef.current.connected && \r\n          connectionDetails.relayStatus === 'direct_to_base') {\r\n        console.log('Polling for available relays...');\r\n        \r\n        socketRef.current.emit('getAvailableRelays', {}, (response) => {\r\n          if (response && response.relays && response.relays.length > 0) {\r\n            console.log('Found available relays:', response.relays);\r\n            \r\n            // Cache relay information\r\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\r\n              timestamp: Date.now(),\r\n              relays: response.relays\r\n            }));\r\n            \r\n            // Connect to a relay\r\n            connectToRelay(response.relays);\r\n            \r\n            // Clear polling interval\r\n            clearInterval(window.relayPollingInterval);\r\n          } else {\r\n            console.log('No relays available, continuing to use base node');\r\n          }\r\n        });\r\n      }\r\n    }, 30000); // Poll every 30 seconds\r\n    \r\n    // Clean up on component unmount\r\n    return () => {\r\n      if (window.relayPollingInterval) {\r\n        clearInterval(window.relayPollingInterval);\r\n      }\r\n    };\r\n  };\r\n\r\n  const connectSocketEvents = () => {\r\n    // Message handling\r\n    socketRef.current.on('receiveMessage', async (data) => {\r\n      console.log('Received message:', data);\r\n      const { from, message, fromDeviceId, timestamp, encrypted, publicKey, bounced } = data;\r\n      \r\n      // Store sender's public key if provided\r\n      if (publicKey && from) {\r\n        console.log(`Storing public key for ${from}`);\r\n        setPublicKeys(prev => ({ ...prev, [from]: publicKey }));\r\n      }\r\n      \r\n      // Security check for device ID changes\r\n      const previousMessages = messages.filter(msg => msg.from === from);\r\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && \r\n          previousMessages[0].fromDeviceId !== fromDeviceId) {\r\n        setSecurityAlert({\r\n          username: from,\r\n          message: `Warning: ${from} appears to be messaging from a different device!`,\r\n          type: 'warning'\r\n        });\r\n      }\r\n      \r\n      let decryptedMessage = message;\r\n      let decryptionStatus = 'plaintext';\r\n      \r\n      // Decrypt the message if it's encrypted and we have our private key\r\n      if (encrypted && keyPair?.privateKey) {\r\n        try {\r\n          console.log('Decrypting message...');\r\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\r\n          decryptionStatus = 'decrypted';\r\n          console.log('Message decrypted successfully');\r\n        } catch (error) {\r\n          console.error('Failed to decrypt message:', error);\r\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\r\n          decryptionStatus = 'failed';\r\n          \r\n          setSecurityAlert({\r\n            username: 'System',\r\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\r\n            type: 'warning'\r\n          });\r\n        }\r\n      }\r\n      \r\n      setMessages(msgs => [...msgs, { \r\n        from, \r\n        message: decryptedMessage, \r\n        fromDeviceId, \r\n        timestamp: new Date(timestamp || new Date()),\r\n        encrypted,\r\n        decryptionStatus,\r\n        bounced\r\n      }]);\r\n    });\r\n    \r\n    // Handle public key requests\r\n    socketRef.current.on('publicKeyRequest', ({ from }, ack) => {\r\n      console.log(`Public key requested by ${from}`);\r\n      \r\n      if (keyPair && keyPair.publicKey) {\r\n        console.log(`Sending public key to ${from}`);\r\n        if (ack) ack({ success: true, publicKey: keyPair.publicKey });\r\n      } else {\r\n        console.warn('No public key available to share');\r\n        if (ack) ack({ success: false, reason: 'Public key not available' });\r\n      }\r\n    });\r\n    \r\n    // User status updates\r\n    socketRef.current.on('userStatusUpdate', (data) => {\r\n      console.log('User status update:', data);\r\n      const { username: user, online } = data;\r\n      \r\n      // If this is our current recipient, update their status\r\n      if (user === recipient) {\r\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\r\n        setRecipientStatus(prev => ({ \r\n          ...prev, \r\n          exists: true, // If we got a status update, the user definitely exists\r\n          online,\r\n          notRegisteredYet: false // Clear this flag since we know the user exists\r\n        }));\r\n      }\r\n      \r\n      // Update online users list\r\n      setOnlineUsers(prev => {\r\n        if (online && !prev.includes(user)) {\r\n          console.log(`Adding ${user} to online users list`);\r\n          return [...prev, user];\r\n        } else if (!online && prev.includes(user)) {\r\n          console.log(`Removing ${user} from online users list`);\r\n          return prev.filter(u => u !== user);\r\n        }\r\n        return prev;\r\n      });\r\n      \r\n      // If we're currently checking a recipient, refresh their status\r\n      if (recipient) {\r\n        checkRecipientStatus();\r\n      }\r\n    });\r\n    \r\n    // Handle bulk online users updates\r\n    socketRef.current.on('onlineUsersUpdate', (data) => {\r\n      console.log('Online users update:', data);\r\n      if (data && Array.isArray(data.users)) {\r\n        setOnlineUsers(data.users);\r\n        \r\n        // If we have a recipient, check if they're in the online users list\r\n        if (recipient && data.users.includes(recipient)) {\r\n          setRecipientStatus(prev => ({ \r\n            ...prev, \r\n            exists: true,\r\n            online: true,\r\n            notRegisteredYet: false\r\n          }));\r\n        } else if (recipient) {\r\n          // If recipient is not in the online users list, refresh their status\r\n          checkRecipientStatus();\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Typing indicators\r\n    socketRef.current.on('userTyping', (data) => {\r\n      const { username: typingUser } = data;\r\n      if (typingUser === recipient) {\r\n        setTyping(true);\r\n        clearTimeout(typingTimeoutRef.current);\r\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\r\n      }\r\n    });\r\n    \r\n    // Error handling\r\n    socketRef.current.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n      setSecurityAlert({\r\n        username: 'System',\r\n        message: `Connection error: ${error.message || 'Unknown error'}`,\r\n        type: 'error'\r\n      });\r\n    });\r\n  };\r\n\r\n  const getOnlineUsers = () => {\r\n    if (socketRef.current) {\r\n      socketRef.current.emit('getOnlineUsers', {}, (users) => {\r\n        console.log('Online users:', users);\r\n        if (Array.isArray(users)) {\r\n          setOnlineUsers(users);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const startPingInterval = () => {\r\n    pingIntervalRef.current = setInterval(() => {\r\n      if (socketRef.current && socketRef.current.connected) {\r\n        // Send ping to keep connection alive\r\n        socketRef.current.emit('ping', {}, (response) => {\r\n          if (response) {\r\n            console.log('Ping response:', response);\r\n          }\r\n        });\r\n        \r\n        // Also refresh online users list\r\n        getOnlineUsers();\r\n        \r\n        // If we have a recipient, check their status\r\n        if (recipient) {\r\n          checkRecipientStatus();\r\n        }\r\n      }\r\n    }, 30000); // Every 30 seconds\r\n  };\r\n\r\n  // Check recipient status\r\n  const checkRecipientStatus = () => {\r\n    if (!recipient || !socketRef.current) {\r\n      setRecipientStatus({ exists: false, online: false, checking: false });\r\n      return;\r\n    }\r\n    \r\n    console.log(`Checking status for recipient: ${recipient}`);\r\n    \r\n    // Set status to checking while we wait for the response\r\n    setRecipientStatus(prev => ({ ...prev, checking: true }));\r\n    \r\n    // Set a timeout to clear the checking status if we don't get a response\r\n    const checkingTimeout = setTimeout(() => {\r\n      setRecipientStatus(prev => {\r\n        if (prev.checking) {\r\n          return { ...prev, checking: false };\r\n        }\r\n        return prev;\r\n      });\r\n    }, 3000); // 3 seconds timeout\r\n    \r\n    // First check if the recipient is in the online users list\r\n    if (onlineUsers.includes(recipient)) {\r\n      clearTimeout(checkingTimeout);\r\n      console.log(`${recipient} found in online users list`);\r\n      setRecipientStatus({ exists: true, online: true, checking: false });\r\n      return;\r\n    }\r\n    \r\n    // If we're connected to a relay, use the checkRecipient event\r\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\r\n      socketRef.current.emit('checkRecipient', { username: recipient }, (relayResponse) => {\r\n        clearTimeout(checkingTimeout);\r\n        console.log('Relay recipient check response:', relayResponse);\r\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\r\n          // Only update if we got a valid response\r\n          setRecipientStatus({\r\n            ...relayResponse,\r\n            checking: false\r\n          });\r\n        } else {\r\n          // If no valid response, mark as not found\r\n          setRecipientStatus({ \r\n            exists: false, \r\n            online: false, \r\n            checking: false \r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      // If connected directly to base node, use checkUser\r\n      socketRef.current.emit('checkUser', { username: recipient }, (response) => {\r\n        clearTimeout(checkingTimeout);\r\n        console.log('Base node recipient check response:', response);\r\n        \r\n        // If we got a valid response, use it\r\n        if (response && typeof response.exists === 'boolean') {\r\n          setRecipientStatus({\r\n            ...response,\r\n            checking: false\r\n          });\r\n        } else {\r\n          // If no valid response, mark as not found\r\n          setRecipientStatus({ \r\n            exists: false, \r\n            online: false, \r\n            checking: false \r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Effect to check recipient status whenever recipient changes\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      if (connected && recipient) {\r\n        checkRecipientStatus();\r\n      }\r\n    }, 500); // Debounce\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, [connected, recipient]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleUsernameSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (username.trim() && relayStatus === 'online') {\r\n      setIsCheckingUsername(true);\r\n      const tempSocket = io(BASE_NODE_URL, { forceNew: true, timeout: 5000 });\r\n      tempSocket.on('connect', () => {\r\n        tempSocket.emit('checkUser', { username: username.trim() }, (response) => {\r\n          setIsCheckingUsername(false);\r\n          if (response && response.exists) {\r\n            setUsernameAvailable(false);\r\n            setSecurityAlert({\r\n              username: 'System',\r\n              message: `Username \"${username}\" is already taken.`,\r\n              type: 'error'\r\n            });\r\n            // Explicitly disconnect and do NOT set connected to true\r\n            tempSocket.disconnect();\r\n          } else {\r\n            setUsernameAvailable(true);\r\n            setConnected(true);\r\n            tempSocket.disconnect();\r\n          }\r\n        });\r\n      });\r\n      tempSocket.on('connect_error', (error) => {\r\n        console.error('Connection error during username check:', error);\r\n        setIsCheckingUsername(false);\r\n        setSecurityAlert({\r\n          username: 'System',\r\n          message: 'Could not verify username. Base node may be offline.',\r\n          type: 'error'\r\n        });\r\n        tempSocket.disconnect();\r\n      });\r\n    } else if (relayStatus !== 'online') {\r\n      setSecurityAlert({\r\n        username: 'System',\r\n        message: 'Cannot connect: Base node is offline',\r\n        type: 'error'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRecipientChange = (e) => {\r\n    const newRecipient = e.target.value.trim();\r\n    setRecipient(newRecipient);\r\n    \r\n    // Reset recipient status when the recipient changes\r\n    setRecipientStatus({ exists: false, online: false, checking: false });\r\n    \r\n    // If the recipient is not empty, check their status\r\n    if (newRecipient && socketRef.current) {\r\n      // Use a small delay to avoid too many checks while typing\r\n      if (recipientCheckTimeoutRef.current) {\r\n        clearTimeout(recipientCheckTimeoutRef.current);\r\n      }\r\n      \r\n      recipientCheckTimeoutRef.current = setTimeout(() => {\r\n        checkRecipientStatus();\r\n      }, 500); // 500ms delay\r\n    }\r\n  };\r\n\r\n  const handleSend = async (e, bounce = false) => {\r\n    e.preventDefault();\r\n    if (!recipient || !message.trim() || !socketRef.current) return;\r\n    \r\n    try {\r\n      // Show sending indicator\r\n      setStatus('Sending message...');\r\n      \r\n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\r\n      if (!bounce) {\r\n        // For direct messages, we need to check if the recipient exists and is online\r\n        const recipientOnline = recipientStatus.online;\r\n        \r\n        // If recipient is not online, suggest using relay\r\n        if (!recipientOnline) {\r\n          setSecurityAlert({\r\n            username: 'System',\r\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\r\n            type: 'warning'\r\n          });\r\n          setStatus('Registered successfully');\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Get recipient's public key if we don't have it and encryption is enabled\r\n      if (encryptionEnabled && !publicKeys[recipient]) {\r\n        try {\r\n          await requestPublicKey(recipient);\r\n        } catch (error) {\r\n          console.error('Failed to get public key:', error);\r\n          // Continue without encryption if we can't get the key\r\n        }\r\n      }\r\n      \r\n      let finalMessage = message.trim();\r\n      let isEncrypted = false;\r\n      \r\n      // Encrypt the message if encryption is enabled and we have the recipient's public key\r\n      if (encryptionEnabled && publicKeys[recipient]) {\r\n        try {\r\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\r\n          isEncrypted = true;\r\n          console.log('Message encrypted successfully');\r\n        } catch (error) {\r\n          console.error('Failed to encrypt message:', error);\r\n          setSecurityAlert({\r\n            username: 'System',\r\n            message: 'Failed to encrypt message. Sending as plaintext.',\r\n            type: 'warning'\r\n          });\r\n        }\r\n      }\r\n      \r\n      const messageData = {\r\n        to: recipient,\r\n        message: finalMessage,\r\n        deviceId,\r\n        timestamp: new Date().toISOString(),\r\n        bounce: bounce, // Always use the bounce parameter directly\r\n        encrypted: isEncrypted,\r\n        publicKey: keyPair?.publicKey // Send our public key with the message\r\n      };\r\n      \r\n      console.log('Sending message:', { \r\n        ...messageData, \r\n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\r\n        bounce: bounce\r\n      });\r\n      \r\n      // Add a timeout to handle cases where the server doesn't respond\r\n      const messageTimeout = setTimeout(() => {\r\n        setSecurityAlert({\r\n          username: 'System',\r\n          message: 'Message sending timed out. Server may be offline.',\r\n          type: 'error'\r\n        });\r\n        setStatus('Registered successfully');\r\n      }, 10000);\r\n      \r\n      socketRef.current.emit('sendMessage', messageData, (response) => {\r\n        clearTimeout(messageTimeout);\r\n        console.log('Send message response:', response);\r\n        setStatus('Registered successfully');\r\n        \r\n        if (response && (response.delivered || response.bounced)) {\r\n          // Add message to local state (store original message for display)\r\n          setMessages(msgs => [...msgs, { \r\n            from: username, \r\n            message: message.trim(), // Store original message for display\r\n            fromDeviceId: deviceId, \r\n            timestamp: new Date(),\r\n            status: response.delivered ? 'delivered' : 'bounced',\r\n            expiresAt: response.expiresAt,\r\n            encrypted: isEncrypted\r\n          }]);\r\n          setMessage('');\r\n          \r\n          // Show notification if message was bounced\r\n          if (response.bounced) {\r\n            setSecurityAlert({\r\n              username: 'System',\r\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\r\n              type: 'info'\r\n            });\r\n          }\r\n        } else {\r\n          const errorMsg = response?.reason || 'Message delivery failed';\r\n          \r\n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\r\n            if (bounce) {\r\n              // For bounced messages to non-existent users, show a special message\r\n              setSecurityAlert({\r\n                username: 'System',\r\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\r\n                type: 'info'\r\n              });\r\n              \r\n              // Add message to local state as bounced\r\n              setMessages(msgs => [...msgs, { \r\n                from: username, \r\n                message: message.trim(),\r\n                fromDeviceId: deviceId, \r\n                timestamp: new Date(),\r\n                status: 'bounced',\r\n                expiresAt: Date.now() + 14400000, // 4 hours\r\n                encrypted: isEncrypted\r\n              }]);\r\n              setMessage('');\r\n            } else {\r\n              setSecurityAlert({\r\n                username: 'System',\r\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\r\n                type: 'warning'\r\n              });\r\n            }\r\n          } else if (errorMsg.includes('offline')) {\r\n            setSecurityAlert({\r\n              username: 'System',\r\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\r\n              type: 'warning'\r\n            });\r\n          } else {\r\n            setSecurityAlert({\r\n              username: 'System',\r\n              message: `Failed to send message: ${errorMsg}`,\r\n              type: 'error'\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setSecurityAlert({\r\n        username: 'System',\r\n        message: `Error sending message: ${error.message}`,\r\n        type: 'error'\r\n      });\r\n      setStatus('Registered successfully');\r\n    }\r\n  };\r\n  \r\n  // Request public key from a user\r\n  const requestPublicKey = async (username) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!socketRef.current) {\r\n        reject(new Error('Not connected'));\r\n        return;\r\n      }\r\n      \r\n      console.log(`Requesting public key for ${username}...`);\r\n      \r\n      // Set a timeout in case the server doesn't respond\r\n      const requestTimeout = setTimeout(() => {\r\n        console.error(`Public key request for ${username} timed out`);\r\n        reject(new Error('Request timed out'));\r\n      }, 10000);\r\n      \r\n      socketRef.current.emit('requestPublicKey', { username }, (response) => {\r\n        clearTimeout(requestTimeout);\r\n        \r\n        if (response && response.success && response.publicKey) {\r\n          console.log(`Received public key for ${username}`);\r\n          setPublicKeys(prev => ({ ...prev, [username]: response.publicKey }));\r\n          resolve(response.publicKey);\r\n        } else {\r\n          const reason = response?.reason || 'Public key not available';\r\n          console.log(`No public key available for ${username}: ${reason}`);\r\n          reject(new Error(reason));\r\n        }\r\n      });\r\n    });\r\n  };\r\n  \r\n  // Handle relay bounce for any user\r\n  const handleRelayBounce = (e) => {\r\n    e.preventDefault();\r\n    if (!recipient || !message.trim() || !socketRef.current) return;\r\n    \r\n    // Show confirmation before bouncing\r\n    const confirmBounce = window.confirm(\r\n      `RELAY MESSAGE\\n\\n` +\r\n      `Your message to \"${recipient}\" will be stored on ${connectionDetails.relayStatus === 'connected_to_relay' ? 'relay' : 'base node'} servers for up to 4 hours.\\n\\n` +\r\n      `It will be delivered when ${recipient} comes online or registers with the network.\\n\\n` +\r\n      `Continue?`\r\n    );\r\n    \r\n    if (confirmBounce) {\r\n      handleSend(e, true);\r\n    }\r\n  };\r\n\r\n  const handleMessageChange = (e) => {\r\n    setMessage(e.target.value);\r\n    \r\n    // Send typing indicator\r\n    if (socketRef.current && recipient && e.target.value.length > 0) {\r\n      socketRef.current.emit('typing', { to: recipient });\r\n    }\r\n  };\r\n\r\n  const handleDisconnect = () => {\r\n    if (socketRef.current) {\r\n      // Notify the server that we're intentionally disconnecting\r\n      socketRef.current.emit('userLogout', { username, deviceId }, () => {\r\n        console.log('Sent logout notification to server');\r\n        \r\n        // Now disconnect\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      });\r\n    }\r\n    \r\n    // Clear local state\r\n    setConnected(false);\r\n    setMessages([]);\r\n    setOnlineUsers([]);\r\n    setRecipientStatus({ exists: false, online: false });\r\n    setStatus('Disconnected');\r\n    setRelayStatus('offline');\r\n    clearInterval(pingIntervalRef.current);\r\n  };\r\n\r\n  const dismissAlert = () => {\r\n    setSecurityAlert(null);\r\n  };\r\n\r\n  const retryConnection = () => {\r\n    checkRelayStatus();\r\n  };\r\n\r\n  // Utility functions\r\n  const getTimestamp = () => {\r\n    const now = new Date();\r\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\r\n  };\r\n\r\n  const formatMessageTime = (timestamp) => {\r\n    if (!timestamp) return getTimestamp();\r\n    const date = new Date(timestamp);\r\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\r\n  };\r\n\r\n  return (\r\n    <div style={{ \r\n      background: '#0a0e14', \r\n      minHeight: '100vh', \r\n      color: '#a2aabc', \r\n      display: 'flex', \r\n      alignItems: 'center', \r\n      justifyContent: 'center',\r\n      fontFamily: '\"Fira Code\", monospace'\r\n    }}>\r\n      <div style={{ \r\n        background: '#171c28', \r\n        padding: 32, \r\n        borderRadius: 8, \r\n        minWidth: 400,\r\n        maxWidth: 600,\r\n        boxShadow: '0 4px 30px rgba(0, 255, 170, 0.15)',\r\n        border: '1px solid rgba(0, 255, 170, 0.3)'\r\n      }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center',\r\n          marginBottom: 24 \r\n        }}>\r\n          <h2 style={{ \r\n            margin: 0, \r\n            color: '#5ccfe6', \r\n            fontFamily: '\"Fira Code\", monospace',\r\n            letterSpacing: '1px'\r\n          }}>WhisperNet_</h2>\r\n          <div style={{ \r\n            fontSize: 12, \r\n            padding: '4px 8px', \r\n            borderRadius: 4, \r\n            background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\r\n            color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\r\n            cursor: 'pointer'\r\n          }} onClick={() => setShowConnectionInfo(!showConnectionInfo)}>\r\n            {relayStatus === 'online' ? 'Base Node Online' : \r\n             relayStatus === 'checking' ? 'Checking...' : 'Base Node Offline'}\r\n          </div>\r\n        </div>\r\n        \r\n        {showConnectionInfo && (\r\n          <div style={{ \r\n            background: '#0d1117', \r\n            padding: 12, \r\n            borderRadius: 4, \r\n            fontSize: 12, \r\n            fontFamily: 'monospace',\r\n            marginBottom: 16,\r\n            border: '1px solid #1e2d3d'\r\n          }}>\r\n            <div>Status: {status}</div>\r\n            {connected && (\r\n              <>\r\n                <div>Socket ID: {connectionDetails.socketId || 'unknown'}</div>\r\n                <div>Transport: {connectionDetails.transport || 'unknown'}</div>\r\n                <div>Base Node: {connectionDetails.baseNodeUrl || BASE_NODE_URL}</div>\r\n                <div>Relay ID: <span style={{ color: '#5ccfe6' }}>{relayServerUrl || 'Unknown'}</span></div>\r\n                <div>Relay Status: <span style={{ \r\n                  color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : \r\n                         connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40' \r\n                }}>\r\n                  {connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : \r\n                   connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : \r\n                   connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'}\r\n                </span></div>\r\n                {connectionDetails.connectedUsers !== undefined && (\r\n                  <div>Users on Relay: {connectionDetails.connectedUsers}</div>\r\n                )}\r\n                {connectionDetails.ip && connectionDetails.port && (\r\n                  <div>Relay Address: {connectionDetails.ip}:{connectionDetails.port}</div>\r\n                )}\r\n              </>\r\n            )}\r\n            <div>Base Node Status: <span style={{\r\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\r\n            }}>{relayStatus}</span></div>\r\n            {deviceId && <div>Device ID: {deviceId.substring(0, 8)}...</div>}\r\n          </div>\r\n        )}\r\n        \r\n        {securityAlert && (\r\n          <div style={{ \r\n            background: '#4b1c1c', \r\n            color: '#ff8f40', \r\n            padding: 12, \r\n            borderRadius: 4, \r\n            marginBottom: 16,\r\n            position: 'relative',\r\n            fontSize: 14\r\n          }}>\r\n            <div style={{ marginRight: 20 }}>{securityAlert.message}</div>\r\n            <button \r\n              style={{ \r\n                position: 'absolute', \r\n                top: 8, \r\n                right: 8, \r\n                background: 'none', \r\n                border: 'none', \r\n                color: '#ff8f40', \r\n                cursor: 'pointer',\r\n                fontSize: 16\r\n              }}\r\n              onClick={dismissAlert}\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n        )}\r\n        \r\n        {!connected ? (\r\n          <div>\r\n            <div style={{ marginBottom: 16, fontSize: 14, color: '#5ccfe6' }}>\r\n              {getTimestamp()} Initializing secure connection...\r\n            </div>\r\n            <form onSubmit={handleUsernameSubmit}>\r\n              <input\r\n                style={{ \r\n                  width: '100%', \r\n                  padding: 10, \r\n                  marginBottom: 12, \r\n                  borderRadius: 4, \r\n                  border: '1px solid #1e2d3d', \r\n                  background: '#0d1117',\r\n                  color: '#a2aabc',\r\n                  fontSize: 16,\r\n                  fontFamily: '\"Fira Code\", monospace',\r\n                  boxSizing: 'border-box'\r\n                }}\r\n                placeholder=\"Enter username\"\r\n                value={username}\r\n                onChange={e => {\r\n                  setUsername(e.target.value);\r\n                  setUsernameAvailable(true);\r\n                }}\r\n                required\r\n              />\r\n              {!usernameAvailable && <div style={{color: '#ff8f40', fontSize: 12, marginTop: -8, marginBottom: 8}}>Username not available.</div>}\r\n              <button\r\n                style={{\r\n                  width: '100%',\r\n                  padding: 10,\r\n                  borderRadius: 4,\r\n                  background: relayStatus === 'online' ?\r\n                    'linear-gradient(90deg, #5ccfe6, #bae67e)' :\r\n                    '#636b78',\r\n                  color: '#171c28',\r\n                  fontWeight: 'bold',\r\n                  fontSize: 16,\r\n                  border: 'none',\r\n                  cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\r\n                  fontFamily: '\"Fira Code\", monospace'\r\n                }}\r\n                type=\"submit\"\r\n                disabled={relayStatus !== 'online' || isCheckingUsername}\r\n              >\r\n                {isCheckingUsername ? 'CHECKING...' : (relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE')}\r\n              </button>\r\n            </form>\r\n            {relayStatus !== 'online' && (\r\n              <button \r\n                style={{ \r\n                  width: '100%', \r\n                  padding: 8, \r\n                  marginTop: 8,\r\n                  borderRadius: 4, \r\n                  background: '#4b1c1c', \r\n                  color: '#ff8f40', \r\n                  fontSize: 14, \r\n                  border: 'none',\r\n                  cursor: 'pointer',\r\n                  fontFamily: '\"Fira Code\", monospace'\r\n                }} \r\n                onClick={retryConnection}\r\n              >\r\n                RETRY CONNECTION\r\n              </button>\r\n            )}\r\n            <div style={{ marginTop: 12, color: '#ff3333', textAlign: 'center', fontSize: 14 }}>\r\n              {status}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <form onSubmit={handleSend} style={{ display: 'flex', flexDirection: 'column', marginBottom: 16 }}>\r\n              <div style={{ display: 'flex', marginBottom: 8 }}>\r\n                <input\r\n                  style={{ \r\n                    flex: 1, \r\n                    padding: 10, \r\n                    borderRadius: 4, \r\n                    border: '1px solid #1e2d3d', \r\n                    background: '#0d1117',\r\n                    color: '#a2aabc',\r\n                    fontSize: 14,\r\n                    marginRight: 8,\r\n                    fontFamily: '\"Fira Code\", monospace'\r\n                  }}\r\n                  placeholder=\"Recipient username\"\r\n                  value={recipient}\r\n                  onChange={handleRecipientChange}\r\n                  required\r\n                />\r\n                {recipient && (\r\n                  <div style={{ \r\n                    display: 'flex', \r\n                    alignItems: 'center', \r\n                    marginLeft: 8,\r\n                    fontSize: 12\r\n                  }}>\r\n                    <div style={{ \r\n                      width: 8, \r\n                      height: 8, \r\n                      borderRadius: '50%', \r\n                      background: recipientStatus.online ? '#bae67e' : \r\n                                 recipientStatus.exists ? '#ff8f40' : '#ff3333',\r\n                      marginRight: 6 \r\n                    }}></div>\r\n                    <span style={{\r\n                      fontSize: 12,\r\n                      color: recipientStatus.online ? '#bae67e' : \r\n                            recipientStatus.exists ? '#ff8f40' : '#ff3333'\r\n                    }}>\r\n                      {recipientStatus.online ? 'ONLINE' : 'OFFLINE'}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div style={{ display: 'flex' }}>\r\n                <input\r\n                  style={{ \r\n                    flex: 1, \r\n                    padding: 10, \r\n                    borderRadius: 4, \r\n                    border: '1px solid #1e2d3d', \r\n                    background: '#0d1117',\r\n                    color: '#a2aabc',\r\n                    fontSize: 14,\r\n                    marginRight: 8,\r\n                    fontFamily: '\"Fira Code\", monospace'\r\n                  }}\r\n                  placeholder=\"Type a message\"\r\n                  value={message}\r\n                  onChange={handleMessageChange}\r\n                  required\r\n                />\r\n                {recipient ? (\r\n                  <div style={{ display: 'flex' }}>\r\n                    {/* SEND button */}\r\n                    <button \r\n                      style={{ \r\n                        padding: '0 18px', \r\n                        borderRadius: '4px 0 0 4px', \r\n                        background: recipientStatus.online ? \r\n                          'linear-gradient(90deg, #5ccfe6, #bae67e)' : \r\n                          '#636b78', \r\n                        color: '#171c28', \r\n                        fontWeight: 'bold', \r\n                        fontSize: 14, \r\n                        border: 'none',\r\n                        cursor: recipientStatus.online ? 'pointer' : 'not-allowed',\r\n                        fontFamily: '\"Fira Code\", monospace'\r\n                      }} \r\n                      type=\"submit\"\r\n                      disabled={!recipientStatus.online}\r\n                      title={recipientStatus.online ? \"Send message directly\" : \"User is offline or not found\"}\r\n                    >\r\n                      SEND\r\n                    </button>\r\n                    \r\n                    {/* Always show the RELAY button */}\r\n                    <button \r\n                      style={{ \r\n                        padding: '0 12px', \r\n                        borderRadius: '0 4px 4px 0', \r\n                        background: '#4b1c1c', \r\n                        color: '#ff8f40', \r\n                        fontWeight: 'bold', \r\n                        fontSize: 14, \r\n                        border: 'none',\r\n                        cursor: 'pointer',\r\n                        fontFamily: '\"Fira Code\", monospace',\r\n                        display: 'flex',\r\n                        alignItems: 'center'\r\n                      }} \r\n                      onClick={handleRelayBounce}\r\n                      title=\"Message will be stored on relay servers for up to 4 hours\"\r\n                    >\r\n                      RELAY\r\n                      <span style={{\r\n                        fontSize: 10,\r\n                        marginLeft: 4,\r\n                        background: 'rgba(255, 143, 64, 0.2)',\r\n                        padding: '1px 3px',\r\n                        borderRadius: 2\r\n                      }}>\r\n                        4h\r\n                      </span>\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <button \r\n                    style={{ \r\n                      padding: '0 18px', \r\n                      borderRadius: 4, \r\n                      background: '#636b78', \r\n                      color: '#171c28', \r\n                      fontWeight: 'bold', \r\n                      fontSize: 14, \r\n                      border: 'none',\r\n                      cursor: 'not-allowed',\r\n                      fontFamily: '\"Fira Code\", monospace'\r\n                    }} \r\n                    disabled={true}\r\n                  >\r\n                    SEND\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </form>\r\n            \r\n            {typing && recipient && (\r\n              <div style={{ fontSize: 12, color: '#5ccfe6', marginBottom: 8 }}>\r\n                {recipient} is typing...\r\n              </div>\r\n            )}\r\n            \r\n            <div style={{ \r\n              background: '#0d1117', \r\n              borderRadius: 4, \r\n              padding: 12, \r\n              minHeight: 200, \r\n              maxHeight: 350, \r\n              overflowY: 'auto', \r\n              marginBottom: 12,\r\n              border: '1px solid #1e2d3d',\r\n              fontFamily: 'monospace'\r\n            }}>\r\n              {messages.length === 0 ? (\r\n                <div style={{ color: '#5ccfe6', fontSize: 14 }}>\r\n                  {getTimestamp()} Connection established. Awaiting transmission...\r\n                </div>\r\n              ) : (\r\n                messages.map((msg, i) => (\r\n                  <div key={i} style={{ \r\n                    marginBottom: 12, \r\n                    padding: 8,\r\n                    borderRadius: 4,\r\n                    background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\r\n                    borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\r\n                  }}>\r\n                    <div style={{ \r\n                      display: 'flex', \r\n                      justifyContent: 'space-between', \r\n                      marginBottom: 4, \r\n                      fontSize: 12 \r\n                    }}>\r\n                      <span style={{ \r\n                        color: msg.from === username ? '#5ccfe6' : '#bae67e',\r\n                        fontWeight: 'bold'\r\n                      }}>\r\n                        {msg.from === username ? 'YOU' : msg.from}\r\n                        {msg.bounced && <span style={{ color: '#ff8f40', marginLeft: 6 }}>(bounced)</span>}\r\n                      </span>\r\n                      <span style={{ color: '#636b78' }}>{formatMessageTime(msg.timestamp)}</span>\r\n                    </div>\r\n                    <div style={{ wordBreak: 'break-word', fontSize: 14 }}>{msg.message}</div>\r\n                    {msg.status === 'bounced' && (\r\n                      <div style={{ \r\n                        fontSize: 10, \r\n                        color: '#ff8f40', \r\n                        marginTop: 4,\r\n                        fontStyle: 'italic'\r\n                      }}>\r\n                        Message will be delivered when recipient comes online (expires in 4 hours)\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))\r\n              )}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n            \r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <button \r\n                style={{ \r\n                  padding: '8px 16px', \r\n                  borderRadius: 4, \r\n                  background: '#4b1c1c', \r\n                  color: '#ff8f40', \r\n                  fontSize: 14, \r\n                  border: 'none',\r\n                  cursor: 'pointer',\r\n                  fontFamily: '\"Fira Code\", monospace'\r\n                }} \r\n                onClick={handleDisconnect}\r\n              >\r\n                DISCONNECT\r\n              </button>\r\n              \r\n              <div style={{ \r\n                fontSize: 12, \r\n                color: '#636b78', \r\n                display: 'flex', \r\n                alignItems: 'center' \r\n              }}>\r\n                <div style={{ \r\n                  width: 8, \r\n                  height: 8, \r\n                  borderRadius: '50%', \r\n                  background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\r\n                  marginRight: 6 \r\n                }}></div>\r\n                {status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST'}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}