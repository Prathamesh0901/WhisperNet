{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddharth\\\\Documents\\\\GitHub\\\\WhisperNet\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport * as EncryptionUtils from './encryptionUtils';\nimport * as MessageUtils from './messageUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\n\n// Random username generator\nconst generateRandomUsername = () => {\n  const adjectives = ['Swift', 'Brave', 'Clever', 'Mighty', 'Noble', 'Wise', 'Calm', 'Bold', 'Bright', 'Agile'];\n  const animals = ['Fox', 'Eagle', 'Wolf', 'Deer', 'Hawk', 'Owl', 'Bear', 'Lion', 'Tiger', 'Dolphin'];\n  const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n  const randomNumber = Math.floor(Math.random() * 1000);\n  return `${randomAdjective}${randomAnimal}${randomNumber}`;\n};\nfunction App() {\n  _s();\n  // State for user information\n  const [username, setUsername] = useState(generateRandomUsername());\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [status, setStatus] = useState('Disconnected');\n  const [connected, setConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [relayStatus, setRelayStatus] = useState('unknown');\n  const [availableRelays, setAvailableRelays] = useState([]);\n  const [activeRelay, setActiveRelay] = useState(null);\n  const [relayConnection, setRelayConnection] = useState(null);\n  const [recipientStatus, setRecipientStatus] = useState({\n    exists: false,\n    online: false\n  });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  // Security and messaging state\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [pendingMessages, setPendingMessages] = useState([]);\n  const [showNewDeviceWarning, setShowNewDeviceWarning] = useState(false);\n  const [newDeviceUsername, setNewDeviceUsername] = useState('');\n\n  // Encryption state\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [offlineMessageEnabled, setOfflineMessageEnabled] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeyBase64, setPublicKeyBase64] = useState(null);\n  const [contactKeys, setContactKeys] = useState({});\n\n  // State for relay message dialog\n  const [showRelayDialog, setShowRelayDialog] = useState(false);\n  const [pendingRelayMessage, setPendingRelayMessage] = useState(null);\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const encryptionKeyRef = useRef({});\n  const pendingKeyExchangeRef = useRef([]);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        // Generate device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n        localStorage.setItem('deviceId', visitorId);\n\n        // Initialize encryption keys\n        const storedKeyPair = localStorage.getItem('keyPair');\n        if (storedKeyPair) {\n          // Use existing keys if available\n          const parsedKeyPair = JSON.parse(storedKeyPair);\n          setKeyPair(parsedKeyPair);\n          const importedPublicKey = await EncryptionUtils.importPublicKey(parsedKeyPair.publicKey);\n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(importedPublicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        } else {\n          // Generate new keys if none exist\n          const newKeyPair = await EncryptionUtils.generateKeyPair();\n          const publicKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.publicKey);\n          const privateKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.privateKey);\n          const keyPairToStore = {\n            publicKey: publicKeyJwk,\n            privateKey: privateKeyJwk\n          };\n          localStorage.setItem('keyPair', JSON.stringify(keyPairToStore));\n          setKeyPair(keyPairToStore);\n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(newKeyPair.publicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        }\n\n        // Load stored contact keys\n        const storedContactKeys = localStorage.getItem('contactKeys');\n        if (storedContactKeys) {\n          setContactKeys(JSON.parse(storedContactKeys));\n        }\n\n        // Load pending messages\n        const storedPendingMessages = localStorage.getItem('pendingMessages');\n        if (storedPendingMessages) {\n          setPendingMessages(JSON.parse(storedPendingMessages));\n        }\n      } catch (error) {\n        console.error('Error initializing app:', error);\n        setStatus('Error initializing encryption. Please refresh.');\n      }\n    };\n    initializeApp();\n  }, []);\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, {\n        timeout: 5000\n      });\n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n\n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    tempSocket.on('connect_error', err => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n\n      // Check if keys are present in localStorage\n      const storedContactKeys = localStorage.getItem('contactKeys');\n      if (!storedContactKeys) {\n        setSecurityAlert({\n          type: 'warning',\n          username: 'System',\n          message: 'No encryption keys found. We cannot verify who you\\'re talking to.'\n        });\n      }\n    }\n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    console.log('Connecting to base node:', BASE_NODE_URL);\n    setStatus('Connecting to base node...');\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n\n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node');\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL\n      });\n\n      // Register with base node including public key for encryption\n      socketRef.current.emit('registerUser', {\n        username,\n        deviceId,\n        publicKey: publicKeyBase64\n      }, response => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully');\n\n          // Get initial data\n          getOnlineUsers();\n\n          // Get available relay servers\n          getAvailableRelays();\n          startPingInterval();\n\n          // Handle any offline messages that were delivered on registration\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n\n          // Handle any known devices warning\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            type: 'error',\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`\n          });\n        }\n      });\n    });\n    socketRef.current.on('connect_error', err => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n      setRelayStatus('offline');\n      clearInterval(pingIntervalRef.current);\n\n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect') {\n        setTimeout(() => {\n          if (connected) {\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n\n    // Message handling\n    socketRef.current.on('message', async data => {\n      console.log('Received message:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp,\n        encrypted,\n        encryptedContent,\n        iv,\n        messageId\n      } = data;\n\n      // Acknowledge receipt if message has an ID (for offline message tracking)\n      if (messageId) {\n        socketRef.current.emit('confirmMessageDelivery', {\n          messageId\n        });\n      }\n\n      // Check for device ID changes and show security alert if needed\n      checkDeviceIdChange(from, fromDeviceId);\n\n      // Handle encrypted messages\n      let finalMessage = message;\n      if (encrypted && encryptedContent && iv) {\n        try {\n          // Get sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            await requestPublicKey(from);\n          }\n\n          // Decrypt the message if we have the key\n          if (contactKeys[from]) {\n            finalMessage = await decryptMessage(encryptedContent, iv, from);\n          } else {\n            finalMessage = '[Encrypted message - no decryption key available]';\n          }\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          finalMessage = '[Encrypted message - unable to decrypt]';\n        }\n      }\n\n      // Add message to state\n      setMessages(msgs => [...msgs, {\n        from,\n        message: finalMessage,\n        fromDeviceId,\n        timestamp: new Date(timestamp || Date.now()),\n        encrypted\n      }]);\n    });\n\n    // Handle relay server list updates\n    socketRef.current.on('relayList', relays => {\n      console.log('Received relay list:', relays);\n      setAvailableRelays(relays);\n\n      // If we're not connected to a relay yet, connect to the best one\n      if (!activeRelay && relays.length > 0) {\n        const onlineRelays = relays.filter(relay => relay.status === 'online');\n        if (onlineRelays.length > 0) {\n          connectToRelay(onlineRelays[0]);\n        }\n      }\n    });\n\n    // Handle public key exchange events\n    socketRef.current.on('publicKey', data => {\n      console.log('Received public key:', data);\n      const {\n        username,\n        publicKey\n      } = data;\n      if (username && publicKey) {\n        // Store the public key\n        const updatedKeys = {\n          ...contactKeys,\n          [username]: publicKey\n        };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n\n        // If we have pending key exchanges, process them\n        const pendingExchanges = pendingKeyExchangeRef.current;\n        const pendingForUser = pendingExchanges.filter(p => p.username === username);\n        if (pendingForUser.length > 0) {\n          pendingForUser.forEach(pending => {\n            if (pending.callback) pending.callback(publicKey);\n          });\n\n          // Remove processed exchanges\n          pendingKeyExchangeRef.current = pendingExchanges.filter(p => p.username !== username);\n        }\n      }\n    });\n\n    // Handle relay status updates\n    socketRef.current.on('relayStatusUpdate', data => {\n      console.log('Relay status update:', data);\n      const {\n        relayId,\n        status\n      } = data;\n      setAvailableRelays(prev => {\n        const updated = prev.map(relay => {\n          if (relay.relayId === relayId) {\n            return {\n              ...relay,\n              status\n            };\n          }\n          return relay;\n        });\n\n        // If the relay we're connected to went offline, connect to another one\n        if (activeRelay && activeRelay.relayId === relayId && status === 'offline') {\n          const onlineRelays = updated.filter(r => r.status === 'online');\n          if (onlineRelays.length > 0) {\n            // Schedule a reconnect to avoid doing it during this state update\n            setTimeout(() => connectToRelay(onlineRelays[0]), 100);\n          }\n        }\n        return updated;\n      });\n    });\n\n    // User status updates\n    socketRef.current.on('userStatusUpdate', data => {\n      console.log('User status update:', data);\n      const {\n        username: user,\n        online\n      } = data;\n      if (user === recipient) {\n        setRecipientStatus(prev => ({\n          ...prev,\n          online\n        }));\n      }\n\n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n    });\n\n    // Typing indicators\n    socketRef.current.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n\n    // Error handling\n    socketRef.current.on('error', error => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`\n      });\n    });\n  };\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, users => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n\n  // Get available relay servers from base node\n  const getAvailableRelays = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getRelays', {}, relays => {\n        console.log('Available relays:', relays);\n        if (Array.isArray(relays)) {\n          setAvailableRelays(relays);\n\n          // Connect to the first available relay if we're not connected to any\n          const onlineRelays = relays.filter(relay => relay.status === 'online');\n          if (onlineRelays.length > 0 && !activeRelay) {\n            connectToRelay(onlineRelays[0]);\n          }\n        }\n      });\n    }\n  };\n\n  // Connect to a relay server\n  const connectToRelay = relay => {\n    // Disconnect from current relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n    }\n    const relayUrl = `http://${relay.ip}:${relay.port}`;\n    console.log(`Connecting to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay: ${relay.relayId || 'unknown'}...`);\n    setRelayServerUrl(relayUrl);\n    const socket = io(relayUrl, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n    socket.on('connect', () => {\n      console.log(`Connected to relay with socket ID: ${socket.id}`);\n      setStatus(`Connected to relay. Registering...`);\n\n      // Register with the relay including public key\n      socket.emit('registerUser', {\n        username,\n        deviceId,\n        publicKey: publicKeyBase64\n      }, response => {\n        console.log('Relay registration response:', response);\n        if (response && response.success) {\n          setActiveRelay(relay);\n          setRelayConnection(socket);\n          setStatus(`Registered with relay: ${relay.relayId || 'unknown'}`);\n\n          // Store relay info for future use\n          localStorage.setItem('lastRelay', JSON.stringify(relay));\n\n          // Handle any offline messages that were delivered on connect\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n\n          // Handle any new device warnings\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration with relay failed';\n          setStatus(`Relay registration failed: ${errorMsg}`);\n          socket.disconnect();\n        }\n      });\n    });\n    socket.on('connect_error', err => {\n      console.error(`Relay connection error: ${err.message}`);\n      setStatus(`Relay connection failed: ${err.message}`);\n\n      // Try another relay if available\n      const otherRelays = availableRelays.filter(r => r.relayId !== relay.relayId && r.status === 'online');\n      if (otherRelays.length > 0) {\n        setTimeout(() => connectToRelay(otherRelays[0]), 1000);\n      } else {\n        setStatus('No available relays. Using base node directly.');\n      }\n    });\n    socket.on('disconnect', reason => {\n      console.log(`Disconnected from relay: ${reason}`);\n      setStatus(`Disconnected from relay: ${reason}`);\n      setActiveRelay(null);\n\n      // Try to reconnect to another relay if available\n      const onlineRelays = availableRelays.filter(r => r.status === 'online');\n      if (onlineRelays.length > 0) {\n        setTimeout(() => connectToRelay(onlineRelays[0]), 2000);\n      }\n    });\n\n    // Message handling\n    socket.on('receiveMessage', data => {\n      console.log('Received message from relay:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp\n      } = data;\n\n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`\n        });\n      }\n      setMessages(msgs => [...msgs, {\n        from,\n        message,\n        fromDeviceId,\n        timestamp: new Date(timestamp || new Date())\n      }]);\n    });\n\n    // Typing indicators\n    socket.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n    return socket;\n  };\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        socketRef.current.emit('ping', {}, response => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n      }\n    }, 30000);\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient) {\n      setRecipientStatus({\n        exists: false,\n        online: false\n      });\n      return;\n    }\n\n    // Check through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    if (!socket) {\n      setRecipientStatus({\n        exists: false,\n        online: false\n      });\n      return;\n    }\n    const checkMethod = relayConnection ? 'checkRecipient' : 'checkUser';\n    socket.emit(checkMethod, {\n      username: recipient\n    }, response => {\n      console.log('Recipient check response:', response);\n      setRecipientStatus(response || {\n        exists: false,\n        online: false\n      });\n    });\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleUsernameSubmit = e => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      // Check if username exists before connecting\n      const tempSocket = io(BASE_NODE_URL, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 2,\n        reconnectionDelay: 1000,\n        timeout: 5000,\n        forceNew: true\n      });\n      setStatus('Verifying username...');\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', {\n          username: username.trim()\n        }, response => {\n          console.log('Username check response:', response);\n          if (response && response.exists) {\n            // Username exists, proceed with connection\n            setConnected(true);\n            tempSocket.disconnect();\n          } else {\n            // Username doesn't exist, show error\n            setStatus('Username not registered on the network');\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: 'Username not registered on the network. Please try a different username.'\n            });\n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', err => {\n        console.error('Socket connection error:', err);\n        setStatus('Connection error. Please try again.');\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: 'Cannot connect: Base node is offline'\n      });\n    }\n  };\n  const handleRecipientChange = e => {\n    setRecipient(e.target.value.trim());\n  };\n\n  // Handle offline messages received on connect\n  const handleOfflineMessages = offlineMessages => {\n    if (!Array.isArray(offlineMessages) || offlineMessages.length === 0) return;\n    console.log('Processing offline messages:', offlineMessages);\n\n    // Process each offline message\n    offlineMessages.forEach(async msgData => {\n      try {\n        const {\n          from,\n          message,\n          encrypted,\n          encryptedContent,\n          iv,\n          fromDeviceId,\n          timestamp,\n          messageId\n        } = msgData;\n\n        // Acknowledge receipt to remove from storage\n        if (socketRef.current && messageId) {\n          socketRef.current.emit('confirmMessageDelivery', {\n            messageId\n          });\n        }\n\n        // If message is encrypted, decrypt it\n        let decryptedMessage = message;\n        if (encrypted && encryptedContent && iv) {\n          // Get the sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            await requestPublicKey(from);\n          }\n\n          // Try to decrypt if we have the key\n          if (contactKeys[from]) {\n            try {\n              decryptedMessage = await decryptMessage(encryptedContent, iv, from);\n            } catch (error) {\n              console.error('Failed to decrypt offline message:', error);\n              decryptedMessage = '[Encrypted message - unable to decrypt]';\n            }\n          } else {\n            decryptedMessage = '[Encrypted message - no decryption key available]';\n          }\n        }\n\n        // Add to messages\n        setMessages(msgs => [...msgs, {\n          from,\n          message: decryptedMessage,\n          fromDeviceId,\n          timestamp: new Date(timestamp || Date.now()),\n          encrypted\n        }]);\n\n        // Check for device ID changes\n        checkDeviceIdChange(from, fromDeviceId);\n      } catch (error) {\n        console.error('Error processing offline message:', error);\n      }\n    });\n  };\n\n  // Request public key from a user\n  const requestPublicKey = async username => {\n    if (!socketRef.current) return null;\n    return new Promise(resolve => {\n      socketRef.current.emit('requestPublicKey', {\n        username\n      }, response => {\n        if (response && response.success && response.publicKey) {\n          // Store the public key\n          const updatedKeys = {\n            ...contactKeys,\n            [username]: response.publicKey\n          };\n          setContactKeys(updatedKeys);\n          localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n          resolve(response.publicKey);\n        } else {\n          console.error('Failed to get public key for:', username);\n          resolve(null);\n        }\n      });\n    });\n  };\n\n  // Decrypt a message using the sender's public key\n  const decryptMessage = async (encryptedContent, iv, sender) => {\n    try {\n      if (!keyPair || !contactKeys[sender]) {\n        throw new Error('Missing keys for decryption');\n      }\n\n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const senderPublicKey = await EncryptionUtils.importPublicKey(contactKeys[sender]);\n\n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, senderPublicKey);\n\n      // Decrypt the message\n      return await EncryptionUtils.decryptMessage(encryptedContent, iv, sharedSecret);\n    } catch (error) {\n      console.error('Decryption error:', error);\n      throw error;\n    }\n  };\n\n  // Encrypt a message using the recipient's public key\n  const encryptMessage = async (message, recipient) => {\n    try {\n      if (!keyPair || !contactKeys[recipient]) {\n        throw new Error('Missing keys for encryption');\n      }\n\n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const recipientPublicKey = await EncryptionUtils.importPublicKey(contactKeys[recipient]);\n\n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, recipientPublicKey);\n\n      // Encrypt the message\n      return await EncryptionUtils.encryptMessage(message, sharedSecret);\n    } catch (error) {\n      console.error('Encryption error:', error);\n      throw error;\n    }\n  };\n\n  // Check if a user is messaging from a new device\n  const checkDeviceIdChange = (username, newDeviceId) => {\n    // Get previous messages from this user\n    const previousMessages = messages.filter(msg => msg.from === username);\n    if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== newDeviceId) {\n      // Show warning about new device\n      setNewDeviceUsername(username);\n      setShowNewDeviceWarning(true);\n      setSecurityAlert({\n        type: 'warning',\n        username,\n        message: `Warning: ${username} appears to be messaging from a new device!`\n      });\n    }\n  };\n  const handleSend = async e => {\n    e.preventDefault();\n    if (!recipient || !message.trim()) return;\n    try {\n      const messageId = MessageUtils.generateMessageId();\n      const timestamp = new Date().toISOString();\n\n      // Prepare base message data\n      const messageData = {\n        to: recipient,\n        message: message.trim(),\n        deviceId,\n        timestamp,\n        messageId,\n        ttl: offlineMessageEnabled ? MessageUtils.calculateTTL() : 0 // 4 hours TTL if offline messaging enabled\n      };\n\n      // Check if recipient exists\n      if (!recipientStatus.exists && !showRelayDialog) {\n        // Store the message for later sending via relay\n        setPendingRelayMessage({\n          message: message.trim(),\n          messageData\n        });\n        setShowRelayDialog(true);\n        return;\n      }\n\n      // Check if we need to encrypt the message\n      if (encryptionEnabled) {\n        // Request recipient's public key if we don't have it\n        if (!contactKeys[recipient]) {\n          const publicKey = await requestPublicKey(recipient);\n          if (!publicKey) {\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: `Cannot encrypt message: Unable to get ${recipient}'s public key`\n            });\n            return;\n          }\n        }\n        try {\n          // Encrypt the message\n          const {\n            encryptedContent,\n            iv\n          } = await encryptMessage(message.trim(), recipient);\n\n          // Add encryption data to message\n          messageData.encrypted = true;\n          messageData.encryptedContent = encryptedContent;\n          messageData.iv = iv;\n          messageData.message = '[Encrypted Message]'; // Placeholder for logs\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          if (window.confirm('Encryption failed. Send unencrypted instead?')) {\n            messageData.encrypted = false;\n          } else {\n            return; // Abort sending\n          }\n        }\n      } else {\n        messageData.encrypted = false;\n      }\n      console.log('Sending message:', messageData);\n\n      // Send through relay if connected, otherwise through base node\n      const socket = relayConnection || socketRef.current;\n      if (!socket) {\n        setSecurityAlert({\n          type: 'error',\n          username: 'System',\n          message: 'No active connection to send message'\n        });\n        return;\n      }\n\n      // Log connection details before sending\n      console.log(`Connection established. Sending through ${relayConnection ? 'relay' : 'base node'}...`);\n\n      // Store message locally if offline messaging is enabled\n      if (offlineMessageEnabled) {\n        const pendingMsg = {\n          ...messageData,\n          sentAt: Date.now()\n        };\n        const updatedPending = [...pendingMessages, pendingMsg];\n        setPendingMessages(updatedPending);\n        localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n      }\n      socket.emit('sendMessage', messageData, response => {\n        console.log('Send message response:', response);\n        if (response && (response.success || response.delivered)) {\n          // Add message to local state with the actual content (not the encrypted placeholder)\n          setMessages(msgs => [...msgs, {\n            from: username,\n            message: message.trim(),\n            fromDeviceId: deviceId,\n            timestamp: new Date(timestamp),\n            encrypted: messageData.encrypted\n          }]);\n          setMessage('');\n\n          // Remove from pending if delivered\n          if (offlineMessageEnabled) {\n            const updatedPending = pendingMessages.filter(msg => msg.messageId !== messageId);\n            setPendingMessages(updatedPending);\n            localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Message delivery failed';\n          setSecurityAlert({\n            type: 'error',\n            username: recipient,\n            message: `Failed to send message: ${errorMsg}`\n          });\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: `Error sending message: ${error.message}`\n      });\n    }\n  };\n\n  // Handle relay message confirmation\n  const handleRelayConfirm = () => {\n    if (pendingRelayMessage) {\n      // Set TTL to maximum for relay messages\n      const messageData = {\n        ...pendingRelayMessage.messageData,\n        ttl: MessageUtils.calculateTTL(24) // 24 hours TTL for relay messages\n      };\n\n      // Send the message\n      const socket = relayConnection || socketRef.current;\n      if (socket) {\n        socket.emit('sendMessage', messageData, response => {\n          console.log('Relay message response:', response);\n          if (response && (response.success || response.delivered)) {\n            // Add message to local state\n            setMessages(msgs => [...msgs, {\n              from: username,\n              message: pendingRelayMessage.message,\n              fromDeviceId: deviceId,\n              timestamp: new Date(),\n              encrypted: messageData.encrypted,\n              isRelay: true\n            }]);\n            setMessage('');\n\n            // Show confirmation\n            setSecurityAlert({\n              type: 'info',\n              username: 'System',\n              message: `Message queued for relay delivery to ${recipient}`\n            });\n          } else {\n            const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Relay message delivery failed';\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: `Failed to send relay message: ${errorMsg}`\n            });\n          }\n        });\n      }\n    }\n\n    // Reset relay dialog\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n\n  // Handle relay message cancellation\n  const handleRelayCancel = () => {\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n\n    // Send typing indicator through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    if (socket && recipient && e.target.value.length > 0) {\n      socket.emit('typing', {\n        to: recipient\n      });\n    }\n  };\n  const handleDisconnect = () => {\n    setConnected(false);\n\n    // Disconnect from relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n      setActiveRelay(null);\n    }\n\n    // Disconnect from base node\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({\n      exists: false,\n      online: false\n    });\n    setStatus('Disconnected');\n\n    // Clear stored relay info\n    localStorage.removeItem('lastRelay');\n  };\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  const formatMessageTime = timestamp => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#0a0e14',\n      minHeight: '100vh',\n      color: '#a2aabc',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontFamily: '\"Fira Code\", monospace'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#171c28',\n        padding: 32,\n        borderRadius: 8,\n        minWidth: 400,\n        maxWidth: 600,\n        boxShadow: '0 4px 30px rgba(0, 255, 170, 0.15)',\n        border: '1px solid rgba(0, 255, 170, 0.3)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: 24\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: 0,\n            color: '#5ccfe6',\n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          },\n          children: \"WhisperNet_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px'\n          },\n          children: [encryptionEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: '#1c4b3c',\n              color: '#5ccfe6'\n            },\n            title: \"End-to-end encryption enabled\",\n            children: \"\\uD83D\\uDD12 Encrypted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1135,\n            columnNumber: 15\n          }, this), offlineMessageEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: '#3c1c4b',\n              color: '#c792ea'\n            },\n            title: \"Offline message delivery enabled\",\n            children: \"\\uD83D\\uDCE8 Offline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              padding: '4px 8px',\n              borderRadius: 4,\n              background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n              color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n              cursor: 'pointer'\n            },\n            onClick: () => setShowConnectionInfo(!showConnectionInfo),\n            children: relayStatus === 'online' ? '🟢 Online' : '🔴 Offline'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 9\n      }, this), showConnectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#0d1117',\n          padding: 12,\n          borderRadius: 4,\n          fontSize: 12,\n          fontFamily: 'monospace',\n          marginBottom: 16,\n          border: '1px solid #1e2d3d'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1179,\n          columnNumber: 13\n        }, this), connected && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Socket ID: \", connectionDetails.socketId || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1182,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Transport: \", connectionDetails.transport || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1183,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Base Node: \", connectionDetails.baseNodeUrl || BASE_NODE_URL]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1184,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Base Node Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            },\n            children: relayStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1187,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1187,\n          columnNumber: 13\n        }, this), deviceId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Device ID: \", deviceId.substring(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1190,\n          columnNumber: 26\n        }, this), connected && onlineUsers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 8\n          },\n          children: [\"Online Users: \", onlineUsers.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1192,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1170,\n        columnNumber: 11\n      }, this), securityAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#4b1c1c',\n          color: '#ff8f40',\n          padding: 12,\n          borderRadius: 4,\n          marginBottom: 16,\n          position: 'relative',\n          fontSize: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 20\n          },\n          children: securityAlert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            position: 'absolute',\n            top: 8,\n            right: 8,\n            background: 'none',\n            border: 'none',\n            color: '#ff8f40',\n            cursor: 'pointer',\n            fontSize: 16\n          },\n          onClick: dismissAlert,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 11\n      }, this), !connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 16,\n            fontSize: 14,\n            color: '#5ccfe6'\n          },\n          children: [getTimestamp(), \" Initializing secure connection...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleUsernameSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              width: '100%',\n              padding: 10,\n              marginBottom: 12,\n              borderRadius: 4,\n              border: '1px solid #1e2d3d',\n              background: '#0d1117',\n              color: '#a2aabc',\n              fontSize: 16,\n              fontFamily: '\"Fira Code\", monospace',\n              boxSizing: 'border-box'\n            },\n            placeholder: \"Enter username\",\n            value: username,\n            onChange: e => setUsername(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '100%',\n              padding: 10,\n              borderRadius: 4,\n              background: relayStatus === 'online' ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n              color: '#171c28',\n              fontWeight: 'bold',\n              fontSize: 16,\n              border: 'none',\n              cursor: relayStatus === 'online' ? 'pointer' : 'not-allowed',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            type: \"submit\",\n            disabled: relayStatus !== 'online',\n            children: relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1250,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1231,\n          columnNumber: 13\n        }, this), relayStatus !== 'online' && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            width: '100%',\n            padding: 8,\n            marginTop: 8,\n            borderRadius: 4,\n            background: '#4b1c1c',\n            color: '#ff8f40',\n            fontSize: 14,\n            border: 'none',\n            cursor: 'pointer',\n            fontFamily: '\"Fira Code\", monospace'\n          },\n          onClick: retryConnection,\n          children: \"RETRY CONNECTION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1272,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 12,\n            color: '#ff3333',\n            textAlign: 'center',\n            fontSize: 14\n          },\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1227,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSend,\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            marginBottom: 16\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginBottom: 8\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Recipient username\",\n              value: recipient,\n              onChange: handleRecipientChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1298,\n              columnNumber: 17\n            }, this), recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                marginLeft: 8,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 8,\n                  height: 8,\n                  borderRadius: '50%',\n                  background: recipientStatus.online ? '#bae67e' : recipientStatus.exists ? '#ff8f40' : '#ff3333',\n                  marginRight: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1322,\n                columnNumber: 21\n              }, this), recipientStatus.exists ? recipientStatus.online ? 'ONLINE' : 'OFFLINE' : 'NOT FOUND']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1316,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                flex: 1,\n                padding: 10,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 14,\n                marginRight: 8,\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              placeholder: \"Type a message\",\n              value: message,\n              onChange: handleMessageChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1337,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '0 18px',\n                borderRadius: 4,\n                background: recipientStatus.exists ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n                color: '#171c28',\n                fontWeight: 'bold',\n                fontSize: 14,\n                border: 'none',\n                cursor: recipientStatus.exists ? 'pointer' : 'not-allowed',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              type: \"submit\",\n              disabled: !recipientStatus.exists,\n              children: \"SEND\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1354,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1336,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1296,\n          columnNumber: 13\n        }, this), typing && recipient && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 12,\n            color: '#5ccfe6',\n            marginBottom: 8\n          },\n          children: [recipient, \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1377,\n          columnNumber: 15\n        }, this), showRelayDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: 'rgba(0, 0, 0, 0.8)',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 1000\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              background: '#0d1117',\n              borderRadius: 8,\n              padding: 24,\n              maxWidth: 500,\n              width: '90%',\n              border: '1px solid #1e2d3d',\n              boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                color: '#bae67e',\n                marginTop: 0\n              },\n              children: \"Relay Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1405,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: '#a2aabc',\n                lineHeight: 1.5\n              },\n              children: [\"The recipient \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: '#5ccfe6'\n                },\n                children: recipient\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1407,\n                columnNumber: 35\n              }, this), \" was not found on the network.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1406,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: '#a2aabc',\n                lineHeight: 1.5\n              },\n              children: [\"You can send this message as a \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"relay message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1410,\n                columnNumber: 52\n              }, this), \". It will be stored on the network and delivered when the recipient comes online.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1409,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                background: '#171c28',\n                padding: 12,\n                borderRadius: 4,\n                marginBottom: 16\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  color: '#ff8f40',\n                  marginTop: 0\n                },\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"How it works:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1413,\n                  columnNumber: 67\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1413,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                style: {\n                  color: '#a2aabc',\n                  paddingLeft: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Your message will be stored encrypted on relay servers\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1415,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"It will be delivered when the recipient connects\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1416,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Messages expire after 24 hours if not delivered\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1417,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"No guarantee of delivery if the user never connects\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1418,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1414,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1412,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'flex-end',\n                gap: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleRelayCancel,\n                style: {\n                  padding: '8px 16px',\n                  background: '#4b1c1c',\n                  color: '#ff8f40',\n                  border: 'none',\n                  borderRadius: 4,\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                },\n                children: \"CANCEL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1422,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleRelayConfirm,\n                style: {\n                  padding: '8px 16px',\n                  background: 'linear-gradient(90deg, #5ccfe6, #bae67e)',\n                  color: '#171c28',\n                  fontWeight: 'bold',\n                  border: 'none',\n                  borderRadius: 4,\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                },\n                children: \"SEND RELAY MESSAGE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1436,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1421,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1396,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1384,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#0d1117',\n            borderRadius: 4,\n            padding: 12,\n            minHeight: 200,\n            maxHeight: 350,\n            overflowY: 'auto',\n            marginBottom: 12,\n            border: '1px solid #1e2d3d',\n            fontFamily: 'monospace'\n          },\n          children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: '#5ccfe6',\n              fontSize: 14\n            },\n            children: [getTimestamp(), \" Connection established. Awaiting transmission...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1468,\n            columnNumber: 17\n          }, this) : messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 12,\n              padding: 8,\n              borderRadius: 4,\n              background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\n              borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: 4,\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: msg.from === username ? '#5ccfe6' : '#bae67e',\n                  fontWeight: 'bold'\n                },\n                children: msg.from === username ? 'YOU' : msg.from\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1486,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: '4px'\n                },\n                children: [msg.encrypted && /*#__PURE__*/_jsxDEV(\"span\", {\n                  title: \"End-to-end encrypted\",\n                  style: {\n                    fontSize: 10\n                  },\n                  children: \"\\uD83D\\uDD12\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1494,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: '#636b78'\n                  },\n                  children: formatMessageTime(msg.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1496,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1492,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1480,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                wordBreak: 'break-word',\n                fontSize: 14\n              },\n              children: [msg.message, msg.isRelay && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 10,\n                  color: '#ff8f40',\n                  marginLeft: 6,\n                  padding: '2px 4px',\n                  background: 'rgba(255, 143, 64, 0.1)',\n                  borderRadius: 2\n                },\n                children: \"RELAY\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1502,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1499,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1473,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1515,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1456,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              padding: '8px 16px',\n              borderRadius: 4,\n              background: '#4b1c1c',\n              color: '#ff8f40',\n              fontSize: 14,\n              border: 'none',\n              cursor: 'pointer',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            onClick: handleDisconnect,\n            children: \"DISCONNECT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1519,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              color: '#636b78',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: 8,\n                height: 8,\n                borderRadius: '50%',\n                background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                marginRight: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1541,\n              columnNumber: 17\n            }, this), status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1535,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1518,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1099,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eR97aOCIk4ftqZKXDqH1VH2b41k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","axios","FingerprintJS","EncryptionUtils","MessageUtils","jsxDEV","_jsxDEV","Fragment","_Fragment","BASE_NODE_URL","process","env","REACT_APP_BASE_NODE_URL","fpPromise","load","generateRandomUsername","adjectives","animals","randomAdjective","Math","floor","random","length","randomAnimal","randomNumber","App","_s","username","setUsername","recipient","setRecipient","message","setMessage","messages","setMessages","status","setStatus","connected","setConnected","typing","setTyping","deviceId","setDeviceId","connectionDetails","setConnectionDetails","relayStatus","setRelayStatus","availableRelays","setAvailableRelays","activeRelay","setActiveRelay","relayConnection","setRelayConnection","recipientStatus","setRecipientStatus","exists","online","isCheckingUsername","setIsCheckingUsername","usernameAvailable","setUsernameAvailable","onlineUsers","setOnlineUsers","securityAlert","setSecurityAlert","pendingMessages","setPendingMessages","showNewDeviceWarning","setShowNewDeviceWarning","newDeviceUsername","setNewDeviceUsername","encryptionEnabled","setEncryptionEnabled","offlineMessageEnabled","setOfflineMessageEnabled","keyPair","setKeyPair","publicKeyBase64","setPublicKeyBase64","contactKeys","setContactKeys","showRelayDialog","setShowRelayDialog","pendingRelayMessage","setPendingRelayMessage","socketRef","messagesEndRef","typingTimeoutRef","pingIntervalRef","encryptionKeyRef","pendingKeyExchangeRef","initializeApp","fp","result","get","visitorId","localStorage","setItem","storedKeyPair","getItem","parsedKeyPair","JSON","parse","importedPublicKey","importPublicKey","publicKey","exportedPublicKeyBase64","exportPublicKeyBase64","newKeyPair","generateKeyPair","publicKeyJwk","exportKeyToJwk","privateKeyJwk","privateKey","keyPairToStore","stringify","storedContactKeys","storedPendingMessages","error","console","checkRelayStatus","response","timeout","log","tempSocket","transports","reconnectionAttempts","reconnectionDelay","forceNew","connectionTimeout","setTimeout","disconnect","on","clearTimeout","err","connectToBaseNode","type","current","clearInterval","query","id","socketId","transport","engine","name","baseNodeUrl","emit","success","getOnlineUsers","getAvailableRelays","startPingInterval","offlineMessages","handleOfflineMessages","knownDevices","isNewDevice","includes","errorMsg","reason","data","from","fromDeviceId","timestamp","encrypted","encryptedContent","iv","messageId","checkDeviceIdChange","finalMessage","requestPublicKey","decryptMessage","msgs","Date","now","relays","onlineRelays","filter","relay","connectToRelay","updatedKeys","pendingExchanges","pendingForUser","p","forEach","pending","callback","relayId","prev","updated","map","r","user","u","typingUser","users","Array","isArray","relayUrl","ip","port","setRelayServerUrl","socket","otherRelays","previousMessages","msg","setInterval","checkRecipientStatus","checkMethod","timeoutId","_messagesEndRef$curre","scrollIntoView","behavior","handleUsernameSubmit","e","preventDefault","trim","handleRecipientChange","target","value","msgData","decryptedMessage","Promise","resolve","sender","Error","importPrivateKey","senderPublicKey","sharedSecret","deriveSharedSecret","encryptMessage","recipientPublicKey","newDeviceId","handleSend","generateMessageId","toISOString","messageData","to","ttl","calculateTTL","window","confirm","pendingMsg","sentAt","updatedPending","delivered","handleRelayConfirm","isRelay","handleRelayCancel","handleMessageChange","handleDisconnect","removeItem","dismissAlert","retryConnection","getTimestamp","getHours","toString","padStart","getMinutes","getSeconds","formatMessageTime","date","style","background","minHeight","color","display","alignItems","justifyContent","fontFamily","children","padding","borderRadius","minWidth","maxWidth","boxShadow","border","marginBottom","margin","letterSpacing","fileName","_jsxFileName","lineNumber","columnNumber","gap","fontSize","title","cursor","onClick","setShowConnectionInfo","showConnectionInfo","substring","marginTop","join","position","marginRight","top","right","onSubmit","width","boxSizing","placeholder","onChange","required","fontWeight","disabled","textAlign","flexDirection","flex","marginLeft","height","left","bottom","zIndex","lineHeight","paddingLeft","maxHeight","overflowY","i","borderLeft","wordBreak","ref","_c","$RefreshReg$"],"sources":["C:/Users/siddharth/Documents/GitHub/WhisperNet/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport * as EncryptionUtils from './encryptionUtils';\nimport * as MessageUtils from './messageUtils';\n\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\n\n// Random username generator\nconst generateRandomUsername = () => {\n  const adjectives = ['Swift', 'Brave', 'Clever', 'Mighty', 'Noble', 'Wise', 'Calm', 'Bold', 'Bright', 'Agile'];\n  const animals = ['Fox', 'Eagle', 'Wolf', 'Deer', 'Hawk', 'Owl', 'Bear', 'Lion', 'Tiger', 'Dolphin'];\n  const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n  const randomNumber = Math.floor(Math.random() * 1000);\n  return `${randomAdjective}${randomAnimal}${randomNumber}`;\n};\n\nfunction App() {\n  // State for user information\n  const [username, setUsername] = useState(generateRandomUsername());\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [status, setStatus] = useState('Disconnected');\n  const [connected, setConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [relayStatus, setRelayStatus] = useState('unknown');\n  const [availableRelays, setAvailableRelays] = useState([]);\n  const [activeRelay, setActiveRelay] = useState(null);\n  const [relayConnection, setRelayConnection] = useState(null);\n  const [recipientStatus, setRecipientStatus] = useState({ exists: false, online: false });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  \n  // Security and messaging state\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [pendingMessages, setPendingMessages] = useState([]);\n  const [showNewDeviceWarning, setShowNewDeviceWarning] = useState(false);\n  const [newDeviceUsername, setNewDeviceUsername] = useState('');\n  \n  // Encryption state\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [offlineMessageEnabled, setOfflineMessageEnabled] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeyBase64, setPublicKeyBase64] = useState(null);\n  const [contactKeys, setContactKeys] = useState({});\n  \n  // State for relay message dialog\n  const [showRelayDialog, setShowRelayDialog] = useState(false);\n  const [pendingRelayMessage, setPendingRelayMessage] = useState(null);\n  \n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const encryptionKeyRef = useRef({});\n  const pendingKeyExchangeRef = useRef([]);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        // Generate device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n        localStorage.setItem('deviceId', visitorId);\n        \n        // Initialize encryption keys\n        const storedKeyPair = localStorage.getItem('keyPair');\n        if (storedKeyPair) {\n          // Use existing keys if available\n          const parsedKeyPair = JSON.parse(storedKeyPair);\n          setKeyPair(parsedKeyPair);\n          const importedPublicKey = await EncryptionUtils.importPublicKey(parsedKeyPair.publicKey);\n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(importedPublicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        } else {\n          // Generate new keys if none exist\n          const newKeyPair = await EncryptionUtils.generateKeyPair();\n          const publicKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.publicKey);\n          const privateKeyJwk = await EncryptionUtils.exportKeyToJwk(newKeyPair.privateKey);\n          \n          const keyPairToStore = {\n            publicKey: publicKeyJwk,\n            privateKey: privateKeyJwk\n          };\n          \n          localStorage.setItem('keyPair', JSON.stringify(keyPairToStore));\n          setKeyPair(keyPairToStore);\n          \n          const exportedPublicKeyBase64 = await EncryptionUtils.exportPublicKeyBase64(newKeyPair.publicKey);\n          setPublicKeyBase64(exportedPublicKeyBase64);\n        }\n        \n        // Load stored contact keys\n        const storedContactKeys = localStorage.getItem('contactKeys');\n        if (storedContactKeys) {\n          setContactKeys(JSON.parse(storedContactKeys));\n        }\n        \n        // Load pending messages\n        const storedPendingMessages = localStorage.getItem('pendingMessages');\n        if (storedPendingMessages) {\n          setPendingMessages(JSON.parse(storedPendingMessages));\n        }\n      } catch (error) {\n        console.error('Error initializing app:', error);\n        setStatus('Error initializing encryption. Please refresh.');\n      }\n    };\n    \n    initializeApp();\n  }, []);\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    \n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, { \n        timeout: 5000 \n      });\n      \n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n    \n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    \n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    \n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    \n    tempSocket.on('connect_error', (err) => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n      \n      // Check if keys are present in localStorage\n      const storedContactKeys = localStorage.getItem('contactKeys');\n      if (!storedContactKeys) {\n        setSecurityAlert({\n          type: 'warning',\n          username: 'System',\n          message: 'No encryption keys found. We cannot verify who you\\'re talking to.'\n        });\n      }\n    }\n    \n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    \n    console.log('Connecting to base node:', BASE_NODE_URL);\n    setStatus('Connecting to base node...');\n    \n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: { \n        deviceId,\n        username \n      },\n      forceNew: true\n    });\n    \n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node');\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL\n      });\n      \n      // Register with base node including public key for encryption\n      socketRef.current.emit('registerUser', { \n        username, \n        deviceId,\n        publicKey: publicKeyBase64\n      }, (response) => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully');\n          \n          // Get initial data\n          getOnlineUsers();\n          \n          // Get available relay servers\n          getAvailableRelays();\n          \n          startPingInterval();\n          \n          // Handle any offline messages that were delivered on registration\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n          \n          // Handle any known devices warning\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n          \n        } else {\n          const errorMsg = response?.reason || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            type: 'error',\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`\n          });\n        }\n      });\n    });\n    \n    socketRef.current.on('connect_error', (err) => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n    });\n    \n    socketRef.current.on('disconnect', (reason) => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n      setRelayStatus('offline');\n      clearInterval(pingIntervalRef.current);\n      \n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect') {\n        setTimeout(() => {\n          if (connected) {\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n    \n    // Message handling\n    socketRef.current.on('message', async (data) => {\n      console.log('Received message:', data);\n      const { from, message, fromDeviceId, timestamp, encrypted, encryptedContent, iv, messageId } = data;\n      \n      // Acknowledge receipt if message has an ID (for offline message tracking)\n      if (messageId) {\n        socketRef.current.emit('confirmMessageDelivery', { messageId });\n      }\n      \n      // Check for device ID changes and show security alert if needed\n      checkDeviceIdChange(from, fromDeviceId);\n      \n      // Handle encrypted messages\n      let finalMessage = message;\n      if (encrypted && encryptedContent && iv) {\n        try {\n          // Get sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            await requestPublicKey(from);\n          }\n          \n          // Decrypt the message if we have the key\n          if (contactKeys[from]) {\n            finalMessage = await decryptMessage(encryptedContent, iv, from);\n          } else {\n            finalMessage = '[Encrypted message - no decryption key available]';\n          }\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          finalMessage = '[Encrypted message - unable to decrypt]';\n        }\n      }\n      \n      // Add message to state\n      setMessages(msgs => [...msgs, { \n        from, \n        message: finalMessage, \n        fromDeviceId, \n        timestamp: new Date(timestamp || Date.now()),\n        encrypted\n      }]);\n    });\n    \n    // Handle relay server list updates\n    socketRef.current.on('relayList', (relays) => {\n      console.log('Received relay list:', relays);\n      setAvailableRelays(relays);\n      \n      // If we're not connected to a relay yet, connect to the best one\n      if (!activeRelay && relays.length > 0) {\n        const onlineRelays = relays.filter(relay => relay.status === 'online');\n        if (onlineRelays.length > 0) {\n          connectToRelay(onlineRelays[0]);\n        }\n      }\n    });\n    \n    // Handle public key exchange events\n    socketRef.current.on('publicKey', (data) => {\n      console.log('Received public key:', data);\n      const { username, publicKey } = data;\n      \n      if (username && publicKey) {\n        // Store the public key\n        const updatedKeys = { ...contactKeys, [username]: publicKey };\n        setContactKeys(updatedKeys);\n        localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n        \n        // If we have pending key exchanges, process them\n        const pendingExchanges = pendingKeyExchangeRef.current;\n        const pendingForUser = pendingExchanges.filter(p => p.username === username);\n        \n        if (pendingForUser.length > 0) {\n          pendingForUser.forEach(pending => {\n            if (pending.callback) pending.callback(publicKey);\n          });\n          \n          // Remove processed exchanges\n          pendingKeyExchangeRef.current = pendingExchanges.filter(p => p.username !== username);\n        }\n      }\n    });\n    \n    // Handle relay status updates\n    socketRef.current.on('relayStatusUpdate', (data) => {\n      console.log('Relay status update:', data);\n      const { relayId, status } = data;\n      \n      setAvailableRelays(prev => {\n        const updated = prev.map(relay => {\n          if (relay.relayId === relayId) {\n            return { ...relay, status };\n          }\n          return relay;\n        });\n        \n        // If the relay we're connected to went offline, connect to another one\n        if (activeRelay && activeRelay.relayId === relayId && status === 'offline') {\n          const onlineRelays = updated.filter(r => r.status === 'online');\n          if (onlineRelays.length > 0) {\n            // Schedule a reconnect to avoid doing it during this state update\n            setTimeout(() => connectToRelay(onlineRelays[0]), 100);\n          }\n        }\n        \n        return updated;\n      });\n    });\n    \n    // User status updates\n    socketRef.current.on('userStatusUpdate', (data) => {\n      console.log('User status update:', data);\n      const { username: user, online } = data;\n      \n      if (user === recipient) {\n        setRecipientStatus(prev => ({ ...prev, online }));\n      }\n      \n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n    });\n    \n    // Typing indicators\n    socketRef.current.on('userTyping', (data) => {\n      const { username: typingUser } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n    \n    // Error handling\n    socketRef.current.on('error', (error) => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`\n      });\n    });\n  };\n\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, (users) => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n  \n  // Get available relay servers from base node\n  const getAvailableRelays = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getRelays', {}, (relays) => {\n        console.log('Available relays:', relays);\n        if (Array.isArray(relays)) {\n          setAvailableRelays(relays);\n          \n          // Connect to the first available relay if we're not connected to any\n          const onlineRelays = relays.filter(relay => relay.status === 'online');\n          if (onlineRelays.length > 0 && !activeRelay) {\n            connectToRelay(onlineRelays[0]);\n          }\n        }\n      });\n    }\n  };\n  \n  // Connect to a relay server\n  const connectToRelay = (relay) => {\n    // Disconnect from current relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n    }\n    \n    const relayUrl = `http://${relay.ip}:${relay.port}`;\n    console.log(`Connecting to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay: ${relay.relayId || 'unknown'}...`);\n    setRelayServerUrl(relayUrl);\n    \n    const socket = io(relayUrl, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: { \n        deviceId,\n        username \n      },\n      forceNew: true\n    });\n    \n    socket.on('connect', () => {\n      console.log(`Connected to relay with socket ID: ${socket.id}`);\n      setStatus(`Connected to relay. Registering...`);\n      \n      // Register with the relay including public key\n      socket.emit('registerUser', { \n        username, \n        deviceId,\n        publicKey: publicKeyBase64\n      }, (response) => {\n        console.log('Relay registration response:', response);\n        if (response && response.success) {\n          setActiveRelay(relay);\n          setRelayConnection(socket);\n          setStatus(`Registered with relay: ${relay.relayId || 'unknown'}`);\n          \n          // Store relay info for future use\n          localStorage.setItem('lastRelay', JSON.stringify(relay));\n          \n          // Handle any offline messages that were delivered on connect\n          if (response.offlineMessages && response.offlineMessages.length > 0) {\n            handleOfflineMessages(response.offlineMessages);\n          }\n          \n          // Handle any new device warnings\n          if (response.knownDevices && response.knownDevices.length > 0) {\n            const isNewDevice = !response.knownDevices.includes(deviceId);\n            if (isNewDevice) {\n              setSecurityAlert({\n                type: 'warning',\n                username: 'System',\n                message: `This account is being accessed from a new device. If this wasn't you, your account may be compromised.`\n              });\n            }\n          }\n        } else {\n          const errorMsg = response?.reason || 'Registration with relay failed';\n          setStatus(`Relay registration failed: ${errorMsg}`);\n          socket.disconnect();\n        }\n      });\n    });\n    \n    socket.on('connect_error', (err) => {\n      console.error(`Relay connection error: ${err.message}`);\n      setStatus(`Relay connection failed: ${err.message}`);\n      \n      // Try another relay if available\n      const otherRelays = availableRelays.filter(r => \n        r.relayId !== relay.relayId && r.status === 'online'\n      );\n      \n      if (otherRelays.length > 0) {\n        setTimeout(() => connectToRelay(otherRelays[0]), 1000);\n      } else {\n        setStatus('No available relays. Using base node directly.');\n      }\n    });\n    \n    socket.on('disconnect', (reason) => {\n      console.log(`Disconnected from relay: ${reason}`);\n      setStatus(`Disconnected from relay: ${reason}`);\n      setActiveRelay(null);\n      \n      // Try to reconnect to another relay if available\n      const onlineRelays = availableRelays.filter(r => r.status === 'online');\n      if (onlineRelays.length > 0) {\n        setTimeout(() => connectToRelay(onlineRelays[0]), 2000);\n      }\n    });\n    \n    // Message handling\n    socket.on('receiveMessage', (data) => {\n      console.log('Received message from relay:', data);\n      const { from, message, fromDeviceId, timestamp } = data;\n      \n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && \n          previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`\n        });\n      }\n      \n      setMessages(msgs => [...msgs, { \n        from, \n        message, \n        fromDeviceId, \n        timestamp: new Date(timestamp || new Date()) \n      }]);\n    });\n    \n    // Typing indicators\n    socket.on('userTyping', (data) => {\n      const { username: typingUser } = data;\n      if (typingUser === recipient) {\n        setTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => setTyping(false), 3000);\n      }\n    });\n    \n    return socket;\n  };\n\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        socketRef.current.emit('ping', {}, (response) => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n      }\n    }, 30000);\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient) {\n      setRecipientStatus({ exists: false, online: false });\n      return;\n    }\n    \n    // Check through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    \n    if (!socket) {\n      setRecipientStatus({ exists: false, online: false });\n      return;\n    }\n    \n    const checkMethod = relayConnection ? 'checkRecipient' : 'checkUser';\n    \n    socket.emit(checkMethod, { username: recipient }, (response) => {\n      console.log('Recipient check response:', response);\n      setRecipientStatus(response || { exists: false, online: false });\n    });\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n    \n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleUsernameSubmit = (e) => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      // Check if username exists before connecting\n      const tempSocket = io(BASE_NODE_URL, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 2,\n        reconnectionDelay: 1000,\n        timeout: 5000,\n        forceNew: true\n      });\n      \n      setStatus('Verifying username...');\n      \n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', { username: username.trim() }, (response) => {\n          console.log('Username check response:', response);\n          \n          if (response && response.exists) {\n            // Username exists, proceed with connection\n            setConnected(true);\n            tempSocket.disconnect();\n          } else {\n            // Username doesn't exist, show error\n            setStatus('Username not registered on the network');\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: 'Username not registered on the network. Please try a different username.'\n            });\n            tempSocket.disconnect();\n          }\n        });\n      });\n      \n      tempSocket.on('connect_error', (err) => {\n        console.error('Socket connection error:', err);\n        setStatus('Connection error. Please try again.');\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: 'Cannot connect: Base node is offline'\n      });\n    }\n  };\n\n  const handleRecipientChange = (e) => {\n    setRecipient(e.target.value.trim());\n  };\n\n  // Handle offline messages received on connect\n  const handleOfflineMessages = (offlineMessages) => {\n    if (!Array.isArray(offlineMessages) || offlineMessages.length === 0) return;\n    \n    console.log('Processing offline messages:', offlineMessages);\n    \n    // Process each offline message\n    offlineMessages.forEach(async (msgData) => {\n      try {\n        const { from, message, encrypted, encryptedContent, iv, fromDeviceId, timestamp, messageId } = msgData;\n        \n        // Acknowledge receipt to remove from storage\n        if (socketRef.current && messageId) {\n          socketRef.current.emit('confirmMessageDelivery', { messageId });\n        }\n        \n        // If message is encrypted, decrypt it\n        let decryptedMessage = message;\n        if (encrypted && encryptedContent && iv) {\n          // Get the sender's public key if we don't have it\n          if (!contactKeys[from]) {\n            await requestPublicKey(from);\n          }\n          \n          // Try to decrypt if we have the key\n          if (contactKeys[from]) {\n            try {\n              decryptedMessage = await decryptMessage(encryptedContent, iv, from);\n            } catch (error) {\n              console.error('Failed to decrypt offline message:', error);\n              decryptedMessage = '[Encrypted message - unable to decrypt]';\n            }\n          } else {\n            decryptedMessage = '[Encrypted message - no decryption key available]';\n          }\n        }\n        \n        // Add to messages\n        setMessages(msgs => [...msgs, {\n          from,\n          message: decryptedMessage,\n          fromDeviceId,\n          timestamp: new Date(timestamp || Date.now()),\n          encrypted\n        }]);\n        \n        // Check for device ID changes\n        checkDeviceIdChange(from, fromDeviceId);\n      } catch (error) {\n        console.error('Error processing offline message:', error);\n      }\n    });\n  };\n  \n  // Request public key from a user\n  const requestPublicKey = async (username) => {\n    if (!socketRef.current) return null;\n    \n    return new Promise((resolve) => {\n      socketRef.current.emit('requestPublicKey', { username }, (response) => {\n        if (response && response.success && response.publicKey) {\n          // Store the public key\n          const updatedKeys = { ...contactKeys, [username]: response.publicKey };\n          setContactKeys(updatedKeys);\n          localStorage.setItem('contactKeys', JSON.stringify(updatedKeys));\n          resolve(response.publicKey);\n        } else {\n          console.error('Failed to get public key for:', username);\n          resolve(null);\n        }\n      });\n    });\n  };\n  \n  // Decrypt a message using the sender's public key\n  const decryptMessage = async (encryptedContent, iv, sender) => {\n    try {\n      if (!keyPair || !contactKeys[sender]) {\n        throw new Error('Missing keys for decryption');\n      }\n      \n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const senderPublicKey = await EncryptionUtils.importPublicKey(contactKeys[sender]);\n      \n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, senderPublicKey);\n      \n      // Decrypt the message\n      return await EncryptionUtils.decryptMessage(encryptedContent, iv, sharedSecret);\n    } catch (error) {\n      console.error('Decryption error:', error);\n      throw error;\n    }\n  };\n  \n  // Encrypt a message using the recipient's public key\n  const encryptMessage = async (message, recipient) => {\n    try {\n      if (!keyPair || !contactKeys[recipient]) {\n        throw new Error('Missing keys for encryption');\n      }\n      \n      // Import keys\n      const privateKey = await EncryptionUtils.importPrivateKey(keyPair.privateKey);\n      const recipientPublicKey = await EncryptionUtils.importPublicKey(contactKeys[recipient]);\n      \n      // Derive shared secret\n      const sharedSecret = await EncryptionUtils.deriveSharedSecret(privateKey, recipientPublicKey);\n      \n      // Encrypt the message\n      return await EncryptionUtils.encryptMessage(message, sharedSecret);\n    } catch (error) {\n      console.error('Encryption error:', error);\n      throw error;\n    }\n  };\n  \n  // Check if a user is messaging from a new device\n  const checkDeviceIdChange = (username, newDeviceId) => {\n    // Get previous messages from this user\n    const previousMessages = messages.filter(msg => msg.from === username);\n    \n    if (previousMessages.length > 0 && \n        previousMessages[0].fromDeviceId && \n        previousMessages[0].fromDeviceId !== newDeviceId) {\n      // Show warning about new device\n      setNewDeviceUsername(username);\n      setShowNewDeviceWarning(true);\n      setSecurityAlert({\n        type: 'warning',\n        username,\n        message: `Warning: ${username} appears to be messaging from a new device!`\n      });\n    }\n  };\n\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (!recipient || !message.trim()) return;\n    \n    try {\n      const messageId = MessageUtils.generateMessageId();\n      const timestamp = new Date().toISOString();\n      \n      // Prepare base message data\n      const messageData = {\n        to: recipient,\n        message: message.trim(),\n        deviceId,\n        timestamp,\n        messageId,\n        ttl: offlineMessageEnabled ? MessageUtils.calculateTTL() : 0 // 4 hours TTL if offline messaging enabled\n      };\n      \n      // Check if recipient exists\n      if (!recipientStatus.exists && !showRelayDialog) {\n        // Store the message for later sending via relay\n        setPendingRelayMessage({\n          message: message.trim(),\n          messageData\n        });\n        setShowRelayDialog(true);\n        return;\n      }\n      \n      // Check if we need to encrypt the message\n      if (encryptionEnabled) {\n        // Request recipient's public key if we don't have it\n        if (!contactKeys[recipient]) {\n          const publicKey = await requestPublicKey(recipient);\n          if (!publicKey) {\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: `Cannot encrypt message: Unable to get ${recipient}'s public key`\n            });\n            return;\n          }\n        }\n        \n        try {\n          // Encrypt the message\n          const { encryptedContent, iv } = await encryptMessage(message.trim(), recipient);\n          \n          // Add encryption data to message\n          messageData.encrypted = true;\n          messageData.encryptedContent = encryptedContent;\n          messageData.iv = iv;\n          messageData.message = '[Encrypted Message]'; // Placeholder for logs\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          if (window.confirm('Encryption failed. Send unencrypted instead?')) {\n            messageData.encrypted = false;\n          } else {\n            return; // Abort sending\n          }\n        }\n      } else {\n        messageData.encrypted = false;\n      }\n      \n      console.log('Sending message:', messageData);\n      \n      // Send through relay if connected, otherwise through base node\n      const socket = relayConnection || socketRef.current;\n      \n      if (!socket) {\n        setSecurityAlert({\n          type: 'error',\n          username: 'System',\n          message: 'No active connection to send message'\n        });\n        return;\n      }\n      \n      // Log connection details before sending\n      console.log(`Connection established. Sending through ${relayConnection ? 'relay' : 'base node'}...`);\n      \n      // Store message locally if offline messaging is enabled\n      if (offlineMessageEnabled) {\n        const pendingMsg = { ...messageData, sentAt: Date.now() };\n        const updatedPending = [...pendingMessages, pendingMsg];\n        setPendingMessages(updatedPending);\n        localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n      }\n      \n      socket.emit('sendMessage', messageData, (response) => {\n        console.log('Send message response:', response);\n        \n        if (response && (response.success || response.delivered)) {\n          // Add message to local state with the actual content (not the encrypted placeholder)\n          setMessages(msgs => [...msgs, { \n            from: username, \n            message: message.trim(), \n            fromDeviceId: deviceId, \n            timestamp: new Date(timestamp),\n            encrypted: messageData.encrypted\n          }]);\n          setMessage('');\n          \n          // Remove from pending if delivered\n          if (offlineMessageEnabled) {\n            const updatedPending = pendingMessages.filter(msg => msg.messageId !== messageId);\n            setPendingMessages(updatedPending);\n            localStorage.setItem('pendingMessages', JSON.stringify(updatedPending));\n          }\n        } else {\n          const errorMsg = response?.reason || 'Message delivery failed';\n          setSecurityAlert({\n            type: 'error',\n            username: recipient,\n            message: `Failed to send message: ${errorMsg}`\n          });\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        type: 'error',\n        username: 'System',\n        message: `Error sending message: ${error.message}`\n      });\n    }\n  };\n\n  // Handle relay message confirmation\n  const handleRelayConfirm = () => {\n    if (pendingRelayMessage) {\n      // Set TTL to maximum for relay messages\n      const messageData = {\n        ...pendingRelayMessage.messageData,\n        ttl: MessageUtils.calculateTTL(24) // 24 hours TTL for relay messages\n      };\n      \n      // Send the message\n      const socket = relayConnection || socketRef.current;\n      \n      if (socket) {\n        socket.emit('sendMessage', messageData, (response) => {\n          console.log('Relay message response:', response);\n          \n          if (response && (response.success || response.delivered)) {\n            // Add message to local state\n            setMessages(msgs => [...msgs, { \n              from: username, \n              message: pendingRelayMessage.message, \n              fromDeviceId: deviceId, \n              timestamp: new Date(),\n              encrypted: messageData.encrypted,\n              isRelay: true\n            }]);\n            setMessage('');\n            \n            // Show confirmation\n            setSecurityAlert({\n              type: 'info',\n              username: 'System',\n              message: `Message queued for relay delivery to ${recipient}`\n            });\n          } else {\n            const errorMsg = response?.reason || 'Relay message delivery failed';\n            setSecurityAlert({\n              type: 'error',\n              username: 'System',\n              message: `Failed to send relay message: ${errorMsg}`\n            });\n          }\n        });\n      }\n    }\n    \n    // Reset relay dialog\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n\n  // Handle relay message cancellation\n  const handleRelayCancel = () => {\n    setShowRelayDialog(false);\n    setPendingRelayMessage(null);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    \n    // Send typing indicator through relay if connected, otherwise through base node\n    const socket = relayConnection || socketRef.current;\n    \n    if (socket && recipient && e.target.value.length > 0) {\n      socket.emit('typing', { to: recipient });\n    }\n  };\n\n  const handleDisconnect = () => {\n    setConnected(false);\n    \n    // Disconnect from relay if connected\n    if (relayConnection) {\n      relayConnection.disconnect();\n      setRelayConnection(null);\n      setActiveRelay(null);\n    }\n    \n    // Disconnect from base node\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    \n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({ exists: false, online: false });\n    setStatus('Disconnected');\n    \n    // Clear stored relay info\n    localStorage.removeItem('lastRelay');\n  };\n\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  const formatMessageTime = (timestamp) => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  return (\n    <div style={{ \n      background: '#0a0e14', \n      minHeight: '100vh', \n      color: '#a2aabc', \n      display: 'flex', \n      alignItems: 'center', \n      justifyContent: 'center',\n      fontFamily: '\"Fira Code\", monospace'\n    }}>\n      <div style={{ \n        background: '#171c28', \n        padding: 32, \n        borderRadius: 8, \n        minWidth: 400,\n        maxWidth: 600,\n        boxShadow: '0 4px 30px rgba(0, 255, 170, 0.15)',\n        border: '1px solid rgba(0, 255, 170, 0.3)'\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          marginBottom: 24 \n        }}>\n          <h2 style={{ \n            margin: 0, \n            color: '#5ccfe6', \n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          }}>WhisperNet_</h2>\n          <div style={{ \n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px'\n          }}>\n            {encryptionEnabled && (\n              <div style={{ \n                fontSize: 12, \n                padding: '4px 8px', \n                borderRadius: 4, \n                background: '#1c4b3c',\n                color: '#5ccfe6',\n              }} title=\"End-to-end encryption enabled\">\n                🔒 Encrypted\n              </div>\n            )}\n            {offlineMessageEnabled && (\n              <div style={{ \n                fontSize: 12, \n                padding: '4px 8px', \n                borderRadius: 4, \n                background: '#3c1c4b',\n                color: '#c792ea',\n              }} title=\"Offline message delivery enabled\">\n                📨 Offline\n              </div>\n            )}\n            <div style={{ \n              fontSize: 12, \n              padding: '4px 8px', \n              borderRadius: 4, \n              background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n              color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n              cursor: 'pointer'\n            }} onClick={() => setShowConnectionInfo(!showConnectionInfo)}>\n              {relayStatus === 'online' ? '🟢 Online' : '🔴 Offline'}\n            </div>\n          </div>\n        </div>\n        \n        {showConnectionInfo && (\n          <div style={{ \n            background: '#0d1117', \n            padding: 12, \n            borderRadius: 4, \n            fontSize: 12, \n            fontFamily: 'monospace',\n            marginBottom: 16,\n            border: '1px solid #1e2d3d'\n          }}>\n            <div>Status: {status}</div>\n            {connected && (\n              <>\n                <div>Socket ID: {connectionDetails.socketId || 'unknown'}</div>\n                <div>Transport: {connectionDetails.transport || 'unknown'}</div>\n                <div>Base Node: {connectionDetails.baseNodeUrl || BASE_NODE_URL}</div>\n              </>\n            )}\n            <div>Base Node Status: <span style={{\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            }}>{relayStatus}</span></div>\n            {deviceId && <div>Device ID: {deviceId.substring(0, 8)}...</div>}\n            {connected && onlineUsers.length > 0 && (\n              <div style={{ marginTop: 8 }}>Online Users: {onlineUsers.join(', ')}</div>\n            )}\n          </div>\n        )}\n        \n        {securityAlert && (\n          <div style={{ \n            background: '#4b1c1c', \n            color: '#ff8f40', \n            padding: 12, \n            borderRadius: 4, \n            marginBottom: 16,\n            position: 'relative',\n            fontSize: 14\n          }}>\n            <div style={{ marginRight: 20 }}>{securityAlert.message}</div>\n            <button \n              style={{ \n                position: 'absolute', \n                top: 8, \n                right: 8, \n                background: 'none', \n                border: 'none', \n                color: '#ff8f40', \n                cursor: 'pointer',\n                fontSize: 16\n              }}\n              onClick={dismissAlert}\n            >\n              ×\n            </button>\n          </div>\n        )}\n        \n        {!connected ? (\n          <div>\n            <div style={{ marginBottom: 16, fontSize: 14, color: '#5ccfe6' }}>\n              {getTimestamp()} Initializing secure connection...\n            </div>\n            <form onSubmit={handleUsernameSubmit}>\n              <input\n                style={{ \n                  width: '100%', \n                  padding: 10, \n                  marginBottom: 12, \n                  borderRadius: 4, \n                  border: '1px solid #1e2d3d', \n                  background: '#0d1117',\n                  color: '#a2aabc',\n                  fontSize: 16,\n                  fontFamily: '\"Fira Code\", monospace',\n                  boxSizing: 'border-box'\n                }}\n                placeholder=\"Enter username\"\n                value={username}\n                onChange={e => setUsername(e.target.value)}\n                required\n              />\n              <button \n                style={{ \n                  width: '100%', \n                  padding: 10, \n                  borderRadius: 4, \n                  background: relayStatus === 'online' ? \n                    'linear-gradient(90deg, #5ccfe6, #bae67e)' : \n                    '#636b78',\n                  color: '#171c28', \n                  fontWeight: 'bold', \n                  fontSize: 16, \n                  border: 'none',\n                  cursor: relayStatus === 'online' ? 'pointer' : 'not-allowed',\n                  fontFamily: '\"Fira Code\", monospace'\n                }} \n                type=\"submit\"\n                disabled={relayStatus !== 'online'}\n              >\n                {relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE'}\n              </button>\n            </form>\n            {relayStatus !== 'online' && (\n              <button \n                style={{ \n                  width: '100%', \n                  padding: 8, \n                  marginTop: 8,\n                  borderRadius: 4, \n                  background: '#4b1c1c', \n                  color: '#ff8f40', \n                  fontSize: 14, \n                  border: 'none',\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                }} \n                onClick={retryConnection}\n              >\n                RETRY CONNECTION\n              </button>\n            )}\n            <div style={{ marginTop: 12, color: '#ff3333', textAlign: 'center', fontSize: 14 }}>\n              {status}\n            </div>\n          </div>\n        ) : (\n          <>\n            <form onSubmit={handleSend} style={{ display: 'flex', flexDirection: 'column', marginBottom: 16 }}>\n              <div style={{ display: 'flex', marginBottom: 8 }}>\n                <input\n                  style={{ \n                    flex: 1, \n                    padding: 10, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 14,\n                    marginRight: 8,\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  placeholder=\"Recipient username\"\n                  value={recipient}\n                  onChange={handleRecipientChange}\n                  required\n                />\n                {recipient && (\n                  <div style={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    marginLeft: 8,\n                    fontSize: 12\n                  }}>\n                    <div style={{ \n                      width: 8, \n                      height: 8, \n                      borderRadius: '50%', \n                      background: recipientStatus.online ? '#bae67e' : \n                                 recipientStatus.exists ? '#ff8f40' : '#ff3333',\n                      marginRight: 6 \n                    }}></div>\n                    {recipientStatus.exists \n                      ? (recipientStatus.online ? 'ONLINE' : 'OFFLINE') \n                      : 'NOT FOUND'}\n                  </div>\n                )}\n              </div>\n              <div style={{ display: 'flex' }}>\n                <input\n                  style={{ \n                    flex: 1, \n                    padding: 10, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 14,\n                    marginRight: 8,\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  placeholder=\"Type a message\"\n                  value={message}\n                  onChange={handleMessageChange}\n                  required\n                />\n                <button \n                  style={{ \n                    padding: '0 18px', \n                    borderRadius: 4, \n                    background: recipientStatus.exists ? \n                      'linear-gradient(90deg, #5ccfe6, #bae67e)' : \n                      '#636b78', \n                    color: '#171c28', \n                    fontWeight: 'bold', \n                    fontSize: 14, \n                    border: 'none',\n                    cursor: recipientStatus.exists ? 'pointer' : 'not-allowed',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }} \n                  type=\"submit\"\n                  disabled={!recipientStatus.exists}\n                >\n                  SEND\n                </button>\n              </div>\n            </form>\n            \n            {typing && recipient && (\n              <div style={{ fontSize: 12, color: '#5ccfe6', marginBottom: 8 }}>\n                {recipient} is typing...\n              </div>\n            )}\n            \n            {/* Relay Message Dialog */}\n            {showRelayDialog && (\n              <div style={{\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                background: 'rgba(0, 0, 0, 0.8)',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                zIndex: 1000\n              }}>\n                <div style={{\n                  background: '#0d1117',\n                  borderRadius: 8,\n                  padding: 24,\n                  maxWidth: 500,\n                  width: '90%',\n                  border: '1px solid #1e2d3d',\n                  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n                }}>\n                  <h3 style={{ color: '#bae67e', marginTop: 0 }}>Relay Message</h3>\n                  <p style={{ color: '#a2aabc', lineHeight: 1.5 }}>\n                    The recipient <strong style={{ color: '#5ccfe6' }}>{recipient}</strong> was not found on the network.\n                  </p>\n                  <p style={{ color: '#a2aabc', lineHeight: 1.5 }}>\n                    You can send this message as a <strong>relay message</strong>. It will be stored on the network and delivered when the recipient comes online.\n                  </p>\n                  <div style={{ background: '#171c28', padding: 12, borderRadius: 4, marginBottom: 16 }}>\n                    <p style={{ color: '#ff8f40', marginTop: 0 }}><strong>How it works:</strong></p>\n                    <ul style={{ color: '#a2aabc', paddingLeft: 20 }}>\n                      <li>Your message will be stored encrypted on relay servers</li>\n                      <li>It will be delivered when the recipient connects</li>\n                      <li>Messages expire after 24 hours if not delivered</li>\n                      <li>No guarantee of delivery if the user never connects</li>\n                    </ul>\n                  </div>\n                  <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\n                    <button \n                      onClick={handleRelayCancel}\n                      style={{ \n                        padding: '8px 16px', \n                        background: '#4b1c1c', \n                        color: '#ff8f40', \n                        border: 'none', \n                        borderRadius: 4, \n                        cursor: 'pointer',\n                        fontFamily: '\"Fira Code\", monospace'\n                      }}\n                    >\n                      CANCEL\n                    </button>\n                    <button \n                      onClick={handleRelayConfirm}\n                      style={{ \n                        padding: '8px 16px', \n                        background: 'linear-gradient(90deg, #5ccfe6, #bae67e)', \n                        color: '#171c28', \n                        fontWeight: 'bold',\n                        border: 'none', \n                        borderRadius: 4, \n                        cursor: 'pointer',\n                        fontFamily: '\"Fira Code\", monospace'\n                      }}\n                    >\n                      SEND RELAY MESSAGE\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div style={{ \n              background: '#0d1117', \n              borderRadius: 4, \n              padding: 12, \n              minHeight: 200, \n              maxHeight: 350, \n              overflowY: 'auto', \n              marginBottom: 12,\n              border: '1px solid #1e2d3d',\n              fontFamily: 'monospace'\n            }}>\n              {messages.length === 0 ? (\n                <div style={{ color: '#5ccfe6', fontSize: 14 }}>\n                  {getTimestamp()} Connection established. Awaiting transmission...\n                </div>\n              ) : (\n                messages.map((msg, i) => (\n                  <div key={i} style={{ \n                    marginBottom: 12, \n                    padding: 8,\n                    borderRadius: 4,\n                    background: msg.from === username ? 'rgba(92, 207, 230, 0.1)' : 'rgba(186, 230, 126, 0.1)',\n                    borderLeft: msg.from === username ? '2px solid #5ccfe6' : '2px solid #bae67e'\n                  }}>\n                    <div style={{ \n                      display: 'flex', \n                      justifyContent: 'space-between', \n                      marginBottom: 4, \n                      fontSize: 12 \n                    }}>\n                      <span style={{ \n                        color: msg.from === username ? '#5ccfe6' : '#bae67e',\n                        fontWeight: 'bold'\n                      }}>\n                        {msg.from === username ? 'YOU' : msg.from}\n                      </span>\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n                        {msg.encrypted && (\n                          <span title=\"End-to-end encrypted\" style={{ fontSize: 10 }}>🔒</span>\n                        )}\n                        <span style={{ color: '#636b78' }}>{formatMessageTime(msg.timestamp)}</span>\n                      </div>\n                    </div>\n                    <div style={{ wordBreak: 'break-word', fontSize: 14 }}>\n                    {msg.message}\n                    {msg.isRelay && (\n                      <span style={{ \n                        fontSize: 10, \n                        color: '#ff8f40', \n                        marginLeft: 6, \n                        padding: '2px 4px', \n                        background: 'rgba(255, 143, 64, 0.1)', \n                        borderRadius: 2 \n                      }}>RELAY</span>\n                    )}\n                  </div>\n                  </div>\n                ))\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n            \n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <button \n                style={{ \n                  padding: '8px 16px', \n                  borderRadius: 4, \n                  background: '#4b1c1c', \n                  color: '#ff8f40', \n                  fontSize: 14, \n                  border: 'none',\n                  cursor: 'pointer',\n                  fontFamily: '\"Fira Code\", monospace'\n                }} \n                onClick={handleDisconnect}\n              >\n                DISCONNECT\n              </button>\n              \n              <div style={{ \n                fontSize: 12, \n                color: '#636b78', \n                display: 'flex', \n                alignItems: 'center' \n              }}>\n                <div style={{ \n                  width: 8, \n                  height: 8, \n                  borderRadius: '50%', \n                  background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                  marginRight: 6 \n                }}></div>\n                {status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST'}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}