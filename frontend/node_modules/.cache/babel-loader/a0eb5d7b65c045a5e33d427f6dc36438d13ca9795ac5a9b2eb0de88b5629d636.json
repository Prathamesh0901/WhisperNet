{"ast":null,"code":"// Chat history storage utilities\n\n// Save chat history for a specific user\nexport const saveChatHistory = (currentUser, recipient, messages) => {\n  try {\n    // Create a unique key for this chat\n    const chatKey = `whispernetChat_${currentUser}_${recipient}`;\n\n    // Save only the last 100 messages to prevent localStorage from getting too large\n    const messagesToSave = messages.slice(-100);\n\n    // Store the messages\n    localStorage.setItem(chatKey, JSON.stringify(messagesToSave));\n\n    // Update the list of active chats for this user\n    updateActiveChats(currentUser, recipient);\n    return true;\n  } catch (error) {\n    console.error('Error saving chat history:', error);\n    return false;\n  }\n};\n\n// Load chat history for a specific user\nexport const loadChatHistory = (currentUser, recipient) => {\n  try {\n    // Create a unique key for this chat\n    const chatKey = `whispernetChat_${currentUser}_${recipient}`;\n\n    // Get the stored messages\n    const storedMessages = localStorage.getItem(chatKey);\n    if (storedMessages) {\n      return JSON.parse(storedMessages);\n    }\n    return [];\n  } catch (error) {\n    console.error('Error loading chat history:', error);\n    return [];\n  }\n};\n\n// Get all active chats for the current user\nexport const getActiveChats = currentUser => {\n  try {\n    const activeChatsKey = `whispernetActiveChats_${currentUser}`;\n    const storedChats = localStorage.getItem(activeChatsKey);\n    if (storedChats) {\n      return JSON.parse(storedChats);\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting active chats:', error);\n    return [];\n  }\n};\n\n// Update the list of active chats for the current user\nexport const updateActiveChats = (currentUser, recipient) => {\n  try {\n    const activeChatsKey = `whispernetActiveChats_${currentUser}`;\n    let activeChats = getActiveChats(currentUser);\n\n    // Add the recipient if not already in the list\n    if (!activeChats.includes(recipient)) {\n      activeChats.push(recipient);\n      localStorage.setItem(activeChatsKey, JSON.stringify(activeChats));\n    }\n    return true;\n  } catch (error) {\n    console.error('Error updating active chats:', error);\n    return false;\n  }\n};\n\n// Clear chat history for a specific user\nexport const clearChatHistory = (currentUser, recipient) => {\n  try {\n    // Create a unique key for this chat\n    const chatKey = `whispernetChat_${currentUser}_${recipient}`;\n\n    // Remove the stored messages\n    localStorage.removeItem(chatKey);\n    return true;\n  } catch (error) {\n    console.error('Error clearing chat history:', error);\n    return false;\n  }\n};\n\n// Clear all chat history for the current user\nexport const clearAllChatHistory = currentUser => {\n  try {\n    // Get all active chats\n    const activeChats = getActiveChats(currentUser);\n\n    // Clear each chat\n    activeChats.forEach(recipient => {\n      clearChatHistory(currentUser, recipient);\n    });\n\n    // Clear the active chats list\n    localStorage.removeItem(`whispernetActiveChats_${currentUser}`);\n\n    // Clear unread counts\n    localStorage.removeItem(`whispernetUnreadCounts_${currentUser}`);\n    return true;\n  } catch (error) {\n    console.error('Error clearing all chat history:', error);\n    return false;\n  }\n};\n\n// Save unread message counts\nexport const saveUnreadCounts = (currentUser, unreadCounts) => {\n  try {\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\n    localStorage.setItem(unreadCountsKey, JSON.stringify(unreadCounts));\n    return true;\n  } catch (error) {\n    console.error('Error saving unread counts:', error);\n    return false;\n  }\n};\n\n// Load unread message counts\nexport const loadUnreadCounts = currentUser => {\n  try {\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\n    const storedCounts = localStorage.getItem(unreadCountsKey);\n    if (storedCounts) {\n      return JSON.parse(storedCounts);\n    }\n    return {};\n  } catch (error) {\n    console.error('Error loading unread counts:', error);\n    return {};\n  }\n};\n\n// Reset unread count for a specific user\nexport const resetUnreadCount = (currentUser, recipient) => {\n  try {\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\n    const unreadCounts = loadUnreadCounts(currentUser);\n\n    // Reset the count for this recipient\n    unreadCounts[recipient] = 0;\n\n    // Save the updated counts\n    localStorage.setItem(unreadCountsKey, JSON.stringify(unreadCounts));\n    return true;\n  } catch (error) {\n    console.error('Error resetting unread count:', error);\n    return false;\n  }\n};\n\n// Increment unread count for a specific user\nexport const incrementUnreadCount = (currentUser, sender) => {\n  try {\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\n    const unreadCounts = loadUnreadCounts(currentUser);\n\n    // Increment the count for this sender\n    unreadCounts[sender] = (unreadCounts[sender] || 0) + 1;\n\n    // Save the updated counts\n    localStorage.setItem(unreadCountsKey, JSON.stringify(unreadCounts));\n    return true;\n  } catch (error) {\n    console.error('Error incrementing unread count:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["saveChatHistory","currentUser","recipient","messages","chatKey","messagesToSave","slice","localStorage","setItem","JSON","stringify","updateActiveChats","error","console","loadChatHistory","storedMessages","getItem","parse","getActiveChats","activeChatsKey","storedChats","activeChats","includes","push","clearChatHistory","removeItem","clearAllChatHistory","forEach","saveUnreadCounts","unreadCounts","unreadCountsKey","loadUnreadCounts","storedCounts","resetUnreadCount","incrementUnreadCount","sender"],"sources":["C:/Users/siddharth/Documents/GitHub/WhisperNet/frontend/src/utils/chatStorage.js"],"sourcesContent":["// Chat history storage utilities\r\n\r\n// Save chat history for a specific user\r\nexport const saveChatHistory = (currentUser, recipient, messages) => {\r\n  try {\r\n    // Create a unique key for this chat\r\n    const chatKey = `whispernetChat_${currentUser}_${recipient}`;\r\n    \r\n    // Save only the last 100 messages to prevent localStorage from getting too large\r\n    const messagesToSave = messages.slice(-100);\r\n    \r\n    // Store the messages\r\n    localStorage.setItem(chatKey, JSON.stringify(messagesToSave));\r\n    \r\n    // Update the list of active chats for this user\r\n    updateActiveChats(currentUser, recipient);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving chat history:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Load chat history for a specific user\r\nexport const loadChatHistory = (currentUser, recipient) => {\r\n  try {\r\n    // Create a unique key for this chat\r\n    const chatKey = `whispernetChat_${currentUser}_${recipient}`;\r\n    \r\n    // Get the stored messages\r\n    const storedMessages = localStorage.getItem(chatKey);\r\n    \r\n    if (storedMessages) {\r\n      return JSON.parse(storedMessages);\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error loading chat history:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get all active chats for the current user\r\nexport const getActiveChats = (currentUser) => {\r\n  try {\r\n    const activeChatsKey = `whispernetActiveChats_${currentUser}`;\r\n    const storedChats = localStorage.getItem(activeChatsKey);\r\n    \r\n    if (storedChats) {\r\n      return JSON.parse(storedChats);\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting active chats:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Update the list of active chats for the current user\r\nexport const updateActiveChats = (currentUser, recipient) => {\r\n  try {\r\n    const activeChatsKey = `whispernetActiveChats_${currentUser}`;\r\n    let activeChats = getActiveChats(currentUser);\r\n    \r\n    // Add the recipient if not already in the list\r\n    if (!activeChats.includes(recipient)) {\r\n      activeChats.push(recipient);\r\n      localStorage.setItem(activeChatsKey, JSON.stringify(activeChats));\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating active chats:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Clear chat history for a specific user\r\nexport const clearChatHistory = (currentUser, recipient) => {\r\n  try {\r\n    // Create a unique key for this chat\r\n    const chatKey = `whispernetChat_${currentUser}_${recipient}`;\r\n    \r\n    // Remove the stored messages\r\n    localStorage.removeItem(chatKey);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing chat history:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Clear all chat history for the current user\r\nexport const clearAllChatHistory = (currentUser) => {\r\n  try {\r\n    // Get all active chats\r\n    const activeChats = getActiveChats(currentUser);\r\n    \r\n    // Clear each chat\r\n    activeChats.forEach(recipient => {\r\n      clearChatHistory(currentUser, recipient);\r\n    });\r\n    \r\n    // Clear the active chats list\r\n    localStorage.removeItem(`whispernetActiveChats_${currentUser}`);\r\n    \r\n    // Clear unread counts\r\n    localStorage.removeItem(`whispernetUnreadCounts_${currentUser}`);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing all chat history:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Save unread message counts\r\nexport const saveUnreadCounts = (currentUser, unreadCounts) => {\r\n  try {\r\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\r\n    localStorage.setItem(unreadCountsKey, JSON.stringify(unreadCounts));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving unread counts:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Load unread message counts\r\nexport const loadUnreadCounts = (currentUser) => {\r\n  try {\r\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\r\n    const storedCounts = localStorage.getItem(unreadCountsKey);\r\n    \r\n    if (storedCounts) {\r\n      return JSON.parse(storedCounts);\r\n    }\r\n    \r\n    return {};\r\n  } catch (error) {\r\n    console.error('Error loading unread counts:', error);\r\n    return {};\r\n  }\r\n};\r\n\r\n// Reset unread count for a specific user\r\nexport const resetUnreadCount = (currentUser, recipient) => {\r\n  try {\r\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\r\n    const unreadCounts = loadUnreadCounts(currentUser);\r\n    \r\n    // Reset the count for this recipient\r\n    unreadCounts[recipient] = 0;\r\n    \r\n    // Save the updated counts\r\n    localStorage.setItem(unreadCountsKey, JSON.stringify(unreadCounts));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error resetting unread count:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Increment unread count for a specific user\r\nexport const incrementUnreadCount = (currentUser, sender) => {\r\n  try {\r\n    const unreadCountsKey = `whispernetUnreadCounts_${currentUser}`;\r\n    const unreadCounts = loadUnreadCounts(currentUser);\r\n    \r\n    // Increment the count for this sender\r\n    unreadCounts[sender] = (unreadCounts[sender] || 0) + 1;\r\n    \r\n    // Save the updated counts\r\n    localStorage.setItem(unreadCountsKey, JSON.stringify(unreadCounts));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error incrementing unread count:', error);\r\n    return false;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}