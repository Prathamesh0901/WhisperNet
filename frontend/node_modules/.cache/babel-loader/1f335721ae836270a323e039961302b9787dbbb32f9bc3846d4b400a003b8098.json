{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddharth\\\\Documents\\\\GitHub\\\\WhisperNet\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport ChatBox from './components/ChatBox';\nimport UserList from './components/UserList';\nimport { saveChatHistory, loadChatHistory, getActiveChats, clearAllChatHistory, saveUnreadCounts, loadUnreadCounts, resetUnreadCount, incrementUnreadCount } from './utils/chatStorage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Encryption utilities\nconst generateKeyPair = async () => {\n  try {\n    const keyPair = await window.crypto.subtle.generateKey({\n      name: \"RSA-OAEP\",\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: \"SHA-256\"\n    }, true, [\"encrypt\", \"decrypt\"]);\n\n    // Export the keys to JWK format\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\n    return {\n      publicKey,\n      privateKey\n    };\n  } catch (error) {\n    console.error('Error generating key pair:', error);\n    throw error;\n  }\n};\nconst encryptMessage = async (message, publicKeyJwk) => {\n  try {\n    // Import the public key\n    const publicKey = await window.crypto.subtle.importKey(\"jwk\", publicKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"encrypt\"]);\n\n    // Convert the message to ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n\n    // Encrypt the data\n    const encryptedData = await window.crypto.subtle.encrypt({\n      name: \"RSA-OAEP\"\n    }, publicKey, data);\n\n    // Convert the encrypted data to base64\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n  } catch (error) {\n    console.error('Error encrypting message:', error);\n    throw error;\n  }\n};\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\n  try {\n    // Import the private key\n    const privateKey = await window.crypto.subtle.importKey(\"jwk\", privateKeyJwk, {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\"\n    }, false, [\"decrypt\"]);\n\n    // Convert the base64 encrypted message to ArrayBuffer\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\n\n    // Decrypt the data\n    const decryptedData = await window.crypto.subtle.decrypt({\n      name: \"RSA-OAEP\"\n    }, privateKey, encryptedData);\n\n    // Convert the decrypted data to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n  } catch (error) {\n    console.error('Error decrypting message:', error);\n    return '[Encrypted message - cannot decrypt]';\n  }\n};\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [status, setStatus] = useState('Checking relay status...');\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [typing, setTyping] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\n  const [relayStatus, setRelayStatus] = useState('checking');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [recipientStatus, setRecipientStatus] = useState({\n    exists: false,\n    online: false\n  });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\n\n  // New state variables for chat management\n  const [activeChats, setActiveChats] = useState({}); // username -> boolean (is chat open)\n  const [chatMessages, setChatMessages] = useState({}); // username -> messages array\n  const [currentChat, setCurrentChat] = useState(null); // currently selected chat username\n  const [typingUsers, setTypingUsers] = useState({}); // username -> boolean (is typing)\n  const [recipientStatuses, setRecipientStatuses] = useState({}); // username -> status object\n  const [unreadCounts, setUnreadCounts] = useState({}); // username -> count\n\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const recipientCheckTimeoutRef = useRef(null);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeDevice = async () => {\n      try {\n        // Get device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n\n        // Initialize encryption\n        await initializeEncryption(visitorId);\n      } catch (error) {\n        console.error('Failed to initialize device:', error);\n        // Generate a fallback device ID\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\n        setDeviceId(fallbackId);\n\n        // Initialize encryption with fallback ID\n        await initializeEncryption(fallbackId);\n      }\n    };\n    initializeDevice();\n  }, []);\n\n  // Initialize encryption\n  const initializeEncryption = async deviceIdentifier => {\n    try {\n      setEncryptionStatus('initializing');\n\n      // Check if we have keys in localStorage\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\n      if (storedKeys) {\n        // We have stored keys, check if they're valid\n        try {\n          const parsedKeys = JSON.parse(storedKeys);\n\n          // Validate the keys by testing encryption/decryption\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\n            try {\n              // Test encryption with the stored keys\n              const testMessage = \"test-encryption-\" + Date.now();\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\n              if (decrypted === testMessage) {\n                // Keys are valid\n                setKeyPair(parsedKeys);\n                console.log('Loaded and validated existing encryption keys');\n                setEncryptionStatus('ready');\n              } else {\n                console.warn('Stored keys failed validation test');\n                await generateAndStoreNewKeys(deviceIdentifier);\n              }\n            } catch (testError) {\n              console.error('Error testing stored keys:', testError);\n              await generateAndStoreNewKeys(deviceIdentifier);\n            }\n          } else {\n            console.warn('Stored keys are incomplete');\n            await generateAndStoreNewKeys(deviceIdentifier);\n          }\n        } catch (parseError) {\n          console.error('Error parsing stored keys:', parseError);\n          await generateAndStoreNewKeys(deviceIdentifier);\n        }\n      } else {\n        // No stored keys, generate new ones\n        await generateAndStoreNewKeys(deviceIdentifier);\n      }\n    } catch (error) {\n      console.error('Error initializing encryption:', error);\n      setEncryptionStatus('error');\n      setSecurityAlert({\n        username: 'System',\n        message: 'Failed to initialize encryption. Messages will not be secure.',\n        type: 'error'\n      });\n      setEncryptionEnabled(false);\n    }\n  };\n\n  // Generate and store new keys\n  const generateAndStoreNewKeys = async deviceIdentifier => {\n    try {\n      console.log('Generating new encryption keys...');\n      const newKeyPair = await generateKeyPair();\n      setKeyPair(newKeyPair);\n\n      // Store keys in localStorage\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\n      console.log('Generated and stored new encryption keys');\n      setEncryptionStatus('ready');\n    } catch (error) {\n      console.error('Error generating new keys:', error);\n      throw error;\n    }\n  };\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, {\n        timeout: 5000\n      });\n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n\n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    tempSocket.on('connect_error', err => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n\n  // Chat management functions\n  const openChat = async chatUsername => {\n    // Check if we already have messages for this chat\n    if (!chatMessages[chatUsername]) {\n      // Load chat history from localStorage\n      const history = loadChatHistory(username, chatUsername);\n\n      // Update chat messages\n      setChatMessages(prev => ({\n        ...prev,\n        [chatUsername]: history\n      }));\n    }\n\n    // Mark chat as active\n    setActiveChats(prev => ({\n      ...prev,\n      [chatUsername]: true\n    }));\n\n    // Set as current chat\n    setCurrentChat(chatUsername);\n\n    // Reset unread count\n    setUnreadCounts(prev => ({\n      ...prev,\n      [chatUsername]: 0\n    }));\n    resetUnreadCount(username, chatUsername);\n\n    // Check recipient status\n    checkUserStatus(chatUsername);\n  };\n  const closeChat = chatUsername => {\n    // Mark chat as inactive\n    setActiveChats(prev => {\n      const newActiveChats = {\n        ...prev\n      };\n      delete newActiveChats[chatUsername];\n      return newActiveChats;\n    });\n\n    // If this was the current chat, set current chat to null\n    if (currentChat === chatUsername) {\n      setCurrentChat(null);\n    }\n  };\n  const checkUserStatus = chatUsername => {\n    if (!socketRef.current || !chatUsername) return;\n\n    // First check if the user is in the online users list\n    const isOnline = onlineUsers.includes(chatUsername);\n    if (isOnline) {\n      setRecipientStatuses(prev => ({\n        ...prev,\n        [chatUsername]: {\n          exists: true,\n          online: true\n        }\n      }));\n      return;\n    }\n\n    // Otherwise, check with the server\n    socketRef.current.emit('checkRecipient', {\n      username: chatUsername\n    }, response => {\n      if (response && response.exists) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: {\n            exists: true,\n            online: response.online || false\n          }\n        }));\n      } else {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: {\n            exists: false,\n            online: false\n          }\n        }));\n      }\n    });\n  };\n  const handleClearAllHistory = () => {\n    if (window.confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {\n      // Clear all chat history from localStorage\n      clearAllChatHistory(username);\n\n      // Reset state\n      setChatMessages({});\n      setUnreadCounts({});\n\n      // Show confirmation\n      setSecurityAlert({\n        username: 'System',\n        message: 'All chat history has been cleared.',\n        type: 'info'\n      });\n    }\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n    }\n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        clearTimeout(recipientCheckTimeoutRef.current);\n        clearTimeout(typingTimeoutRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n\n  // Effect to save chat messages to localStorage when they change\n  useEffect(() => {\n    if (username && Object.keys(chatMessages).length > 0) {\n      // Save each chat's messages to localStorage\n      Object.keys(chatMessages).forEach(chatUser => {\n        saveChatHistory(username, chatUser, chatMessages[chatUser]);\n      });\n    }\n  }, [username, chatMessages]);\n  useEffect(() => {\n    if (connected && socketRef.current) {\n      const fetchRelayInfo = () => {\n        console.log('Fetching relay info...');\n\n        // First try to get relay info directly from the socket\n        socketRef.current.emit('getRelayInfo', {}, info => {\n          if (info && info.relayId) {\n            console.log('Received relay info from socket:', info);\n            // Update relay server information\n            setRelayServerUrl(info.relayId);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: info.relayId,\n              relayStatus: info.status || 'connected',\n              connectedUsers: info.connectedUsers,\n              ip: info.ip,\n              port: info.port\n            }));\n\n            // Show connection info automatically on first connect\n            if (!showConnectionInfo) {\n              setShowConnectionInfo(true);\n\n              // Auto-hide after 5 seconds\n              setTimeout(() => {\n                setShowConnectionInfo(false);\n              }, 5000);\n            }\n          } else {\n            console.warn('No relay info received from socket, checking with base node');\n\n            // If we're connected to the base node, try to get our relay assignment\n            socketRef.current.emit('getMyRelayInfo', {\n              username\n            }, relayInfo => {\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\n                console.log('Received relay assignment from base node:', relayInfo);\n                if (relayInfo.isDirect) {\n                  // We're directly connected to the base node\n                  setRelayServerUrl('Direct to Base Node');\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: 'direct',\n                    relayStatus: 'direct_to_base'\n                  }));\n                } else {\n                  // We're assigned to a relay\n                  setRelayServerUrl(relayInfo.relayId);\n                  setConnectionDetails(prev => ({\n                    ...prev,\n                    relayId: relayInfo.relayId,\n                    relayStatus: 'assigned_by_base'\n                  }));\n                }\n              } else {\n                console.warn('No relay assignment from base node, assuming direct connection');\n\n                // If we can't get relay info, we're probably directly connected to the base node\n                const socketId = socketRef.current.id;\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\n                setConnectionDetails(prev => ({\n                  ...prev,\n                  relayId: 'direct',\n                  relayStatus: 'direct_to_base'\n                }));\n              }\n            });\n          }\n        });\n      };\n\n      // Get relay info immediately and then every 10 seconds\n      fetchRelayInfo();\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\n      return () => clearInterval(relayInfoInterval);\n    }\n  }, [connected, showConnectionInfo, username]);\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    // Always connect to base node first for handshake and relay discovery\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\n    setStatus('Connecting to base node for handshake...');\n\n    // Connect to base node\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: {\n        deviceId,\n        username\n      },\n      forceNew: true\n    });\n\n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node for handshake');\n      setRelayStatus('online');\n\n      // When connecting to the base node, set the relay information accordingly\n      setRelayServerUrl(`Base Node (Handshake)`);\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL,\n        relayId: 'base_handshake',\n        relayStatus: 'handshake'\n      });\n\n      // Get available relays first\n      socketRef.current.emit('getAvailableRelays', {}, response => {\n        console.log('Available relays:', response);\n        if (response && response.relays && response.relays.length > 0) {\n          // Cache relay information\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\n            timestamp: Date.now(),\n            relays: response.relays\n          }));\n\n          // Register with base node temporarily\n          registerWithBaseNode(() => {\n            // After successful registration, connect to a relay\n            connectToRelay(response.relays);\n          });\n        } else {\n          // No relays available, register directly with base node\n          registerWithBaseNode(() => {\n            // Set UI to indicate we're using base node as fallback\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            setStatus('Using Base Node as fallback (no relays available)');\n\n            // Start polling for available relays\n            startRelayPolling();\n          });\n        }\n      });\n    });\n    const registerWithBaseNode = callback => {\n      // Register with base node\n      socketRef.current.emit('registerUser', {\n        username,\n        deviceId\n      }, response => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully with base node');\n\n          // Set up socket event handlers\n          connectSocketEvents();\n\n          // Get initial data\n          getOnlineUsers();\n          startPingInterval();\n\n          // Execute callback if provided\n          if (callback && typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`,\n            type: 'error'\n          });\n        }\n      });\n    };\n    socketRef.current.on('connect_error', err => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n\n      // Try to use cached relays if available\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\n      let cachedRelays = [];\n      if (cachedRelayInfo) {\n        try {\n          const parsedCache = JSON.parse(cachedRelayInfo);\n          if (parsedCache.timestamp && Date.now() - parsedCache.timestamp < 3600000) {\n            // Cache valid for 1 hour\n            cachedRelays = parsedCache.relays || [];\n            console.log('Using cached relay information:', cachedRelays);\n            if (cachedRelays.length > 0) {\n              setTimeout(() => {\n                connectToRelay(cachedRelays);\n              }, 1000);\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing cached relay info:', error);\n        }\n      }\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n\n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect' && connected) {\n        setTimeout(() => {\n          if (connected) {\n            // Try to reconnect to base node first\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n  };\n\n  // Function to connect to a relay server\n  const connectToRelay = relays => {\n    if (!relays || !relays.length) {\n      console.log('No relays available to connect to');\n      return;\n    }\n\n    // Use the first available relay\n    const relay = relays[0];\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\n    console.log(`Switching to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay server: ${relay.id}...`);\n\n    // Disconnect from base node first\n    if (socketRef.current) {\n      // Keep a reference to the old socket for cleanup\n      const oldSocket = socketRef.current;\n\n      // Create new socket for relay\n      socketRef.current = io(relayUrl, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 2000,\n        forceNew: true\n      });\n\n      // Set a timeout to disconnect from base node after relay connection is established\n      const relayConnectionTimeout = setTimeout(() => {\n        if (!socketRef.current || !socketRef.current.connected) {\n          console.log('Relay connection timed out, staying with base node');\n          socketRef.current = oldSocket; // Restore old socket\n          setStatus('Using Base Node (relay connection failed)');\n          setRelayServerUrl('Base Node (Fallback)');\n          setConnectionDetails(prev => ({\n            ...prev,\n            relayId: 'direct',\n            relayStatus: 'direct_to_base'\n          }));\n\n          // Start polling for available relays\n          startRelayPolling();\n        }\n      }, 5000);\n      socketRef.current.on('connect', () => {\n        clearTimeout(relayConnectionTimeout);\n        console.log(`Connected to relay server: ${relayUrl}`);\n\n        // Register with the relay\n        socketRef.current.emit('register', {\n          username,\n          deviceId\n        }, response => {\n          if (response && response.success) {\n            console.log('Successfully registered with relay');\n\n            // Now we can safely disconnect from the base node\n            oldSocket.disconnect();\n            setStatus(`Connected to relay server: ${relay.id}`);\n            setRelayServerUrl(relay.id);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: relay.id,\n              socketId: socketRef.current.id,\n              transport: socketRef.current.io.engine.transport.name,\n              relayStatus: 'connected_to_relay'\n            }));\n\n            // Set up socket event handlers\n            connectSocketEvents();\n\n            // Start ping interval\n            startPingInterval();\n\n            // Show connection info automatically\n            setShowConnectionInfo(true);\n            setTimeout(() => {\n              setShowConnectionInfo(false);\n            }, 5000);\n          } else {\n            console.error('Failed to register with relay:', response);\n            setStatus('Failed to register with relay server');\n\n            // Disconnect from relay and stay with base node\n            socketRef.current.disconnect();\n            socketRef.current = oldSocket;\n            setStatus('Using Base Node (relay registration failed)');\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n\n            // Start polling for available relays\n            startRelayPolling();\n          }\n        });\n      });\n      socketRef.current.on('connect_error', err => {\n        clearTimeout(relayConnectionTimeout);\n        console.error(`Relay connection error: ${err.message}`);\n\n        // Stay with base node\n        socketRef.current = oldSocket;\n        setStatus('Using Base Node (relay connection error)');\n        setRelayServerUrl('Base Node (Fallback)');\n        setConnectionDetails(prev => ({\n          ...prev,\n          relayId: 'direct',\n          relayStatus: 'direct_to_base'\n        }));\n\n        // Start polling for available relays\n        startRelayPolling();\n      });\n      socketRef.current.on('disconnect', reason => {\n        console.log(`Disconnected from relay: ${reason}`);\n\n        // If we were previously connected to a relay and lost connection\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\n          setStatus(`Disconnected from relay: ${reason}`);\n\n          // Try to reconnect to base node\n          setTimeout(() => {\n            if (connected) {\n              connectToBaseNode();\n            }\n          }, 1000);\n        }\n      });\n    }\n  };\n\n  // Function to periodically poll for available relays when using base node as fallback\n  const startRelayPolling = () => {\n    // Clear any existing polling interval\n    if (window.relayPollingInterval) {\n      clearInterval(window.relayPollingInterval);\n    }\n\n    // Set up polling interval\n    window.relayPollingInterval = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected && connectionDetails.relayStatus === 'direct_to_base') {\n        console.log('Polling for available relays...');\n        socketRef.current.emit('getAvailableRelays', {}, response => {\n          if (response && response.relays && response.relays.length > 0) {\n            console.log('Found available relays:', response.relays);\n\n            // Cache relay information\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\n              timestamp: Date.now(),\n              relays: response.relays\n            }));\n\n            // Connect to a relay\n            connectToRelay(response.relays);\n\n            // Clear polling interval\n            clearInterval(window.relayPollingInterval);\n          } else {\n            console.log('No relays available, continuing to use base node');\n          }\n        });\n      }\n    }, 30000); // Poll every 30 seconds\n\n    // Clean up on component unmount\n    return () => {\n      if (window.relayPollingInterval) {\n        clearInterval(window.relayPollingInterval);\n      }\n    };\n  };\n  const connectSocketEvents = () => {\n    // Message handling\n    socketRef.current.on('receiveMessage', async data => {\n      console.log('Received message:', data);\n      const {\n        from,\n        message,\n        fromDeviceId,\n        timestamp,\n        encrypted,\n        publicKey,\n        bounced\n      } = data;\n\n      // Store sender's public key if provided\n      if (publicKey && from) {\n        console.log(`Storing public key for ${from}`);\n        setPublicKeys(prev => ({\n          ...prev,\n          [from]: publicKey\n        }));\n      }\n\n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`,\n          type: 'warning'\n        });\n      }\n      let decryptedMessage = message;\n      let decryptionStatus = 'plaintext';\n\n      // Decrypt the message if it's encrypted and we have our private key\n      if (encrypted && keyPair !== null && keyPair !== void 0 && keyPair.privateKey) {\n        try {\n          console.log('Decrypting message...');\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\n          decryptionStatus = 'decrypted';\n          console.log('Message decrypted successfully');\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\n          decryptionStatus = 'failed';\n          setSecurityAlert({\n            username: 'System',\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\n            type: 'warning'\n          });\n        }\n      }\n\n      // Create the message object\n      const messageObj = {\n        from,\n        message: decryptedMessage,\n        fromDeviceId,\n        timestamp: new Date(timestamp || new Date()),\n        encrypted,\n        decryptionStatus,\n        bounced\n      };\n\n      // Add to global messages for backward compatibility\n      setMessages(msgs => [...msgs, messageObj]);\n\n      // Add message to the appropriate chat\n      setChatMessages(prev => {\n        const updatedMessages = {\n          ...prev,\n          [from]: [...(prev[from] || []), messageObj]\n        };\n\n        // Save to localStorage\n        saveChatHistory(username, from, updatedMessages[from]);\n        return updatedMessages;\n      });\n\n      // If this chat is not the current chat, increment unread count\n      if (currentChat !== from) {\n        setUnreadCounts(prev => {\n          const newCounts = {\n            ...prev,\n            [from]: (prev[from] || 0) + 1\n          };\n\n          // Save to localStorage\n          saveUnreadCounts(username, newCounts);\n          return newCounts;\n        });\n\n        // Also increment in localStorage\n        incrementUnreadCount(username, from);\n      }\n\n      // Make sure this user is in our active chats\n      setActiveChats(prev => {\n        if (!prev[from]) {\n          return {\n            ...prev,\n            [from]: true\n          };\n        }\n        return prev;\n      });\n\n      // Check user status\n      checkUserStatus(from);\n    });\n\n    // Handle public key requests\n    socketRef.current.on('publicKeyRequest', ({\n      from\n    }, ack) => {\n      console.log(`Public key requested by ${from}`);\n      if (keyPair && keyPair.publicKey) {\n        console.log(`Sending public key to ${from}`);\n        if (ack) ack({\n          success: true,\n          publicKey: keyPair.publicKey\n        });\n      } else {\n        console.warn('No public key available to share');\n        if (ack) ack({\n          success: false,\n          reason: 'Public key not available'\n        });\n      }\n    });\n\n    // User status updates\n    socketRef.current.on('userStatusUpdate', data => {\n      console.log('User status update:', data);\n      const {\n        username: user,\n        online\n      } = data;\n\n      // If this is our current recipient, update their status\n      if (user === recipient) {\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\n        setRecipientStatus(prev => ({\n          ...prev,\n          exists: true,\n          // If we got a status update, the user definitely exists\n          online,\n          notRegisteredYet: false // Clear this flag since we know the user exists\n        }));\n      }\n\n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          console.log(`Adding ${user} to online users list`);\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          console.log(`Removing ${user} from online users list`);\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n\n      // Update recipient status for all active chats\n      if (activeChats[user]) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [user]: {\n            ...prev[user],\n            exists: true,\n            online\n          }\n        }));\n      }\n\n      // If we're currently checking a recipient, refresh their status\n      if (recipient) {\n        checkRecipientStatus();\n      }\n    });\n\n    // Handle bulk online users updates\n    socketRef.current.on('onlineUsersUpdate', data => {\n      console.log('Online users update:', data);\n      if (data && Array.isArray(data.users)) {\n        setOnlineUsers(data.users);\n\n        // If we have a recipient, check if they're in the online users list\n        if (recipient && data.users.includes(recipient)) {\n          setRecipientStatus(prev => ({\n            ...prev,\n            exists: true,\n            online: true,\n            notRegisteredYet: false\n          }));\n        } else if (recipient) {\n          // If recipient is not in the online users list, refresh their status\n          checkRecipientStatus();\n        }\n\n        // Update status for all active chats\n        Object.keys(activeChats).forEach(chatUser => {\n          const isOnline = data.users.includes(chatUser);\n          setRecipientStatuses(prev => {\n            var _prev$chatUser;\n            return {\n              ...prev,\n              [chatUser]: {\n                ...prev[chatUser],\n                exists: ((_prev$chatUser = prev[chatUser]) === null || _prev$chatUser === void 0 ? void 0 : _prev$chatUser.exists) || isOnline,\n                online: isOnline\n              }\n            };\n          });\n        });\n      }\n    });\n\n    // Typing indicators\n    socketRef.current.on('userTyping', data => {\n      const {\n        username: typingUser\n      } = data;\n\n      // Update typing status for this user\n      setTypingUsers(prev => ({\n        ...prev,\n        [typingUser]: true\n      }));\n\n      // For backward compatibility\n      if (typingUser === recipient) {\n        setTyping(true);\n      }\n\n      // Clear any existing timeout\n      clearTimeout(typingTimeoutRef.current);\n\n      // Set a timeout to clear the typing indicator after 3 seconds\n      typingTimeoutRef.current = setTimeout(() => {\n        setTypingUsers(prev => ({\n          ...prev,\n          [typingUser]: false\n        }));\n\n        // For backward compatibility\n        if (typingUser === recipient) {\n          setTyping(false);\n        }\n      }, 3000);\n    });\n\n    // Error handling\n    socketRef.current.on('error', error => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`,\n        type: 'error'\n      });\n    });\n  };\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, users => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        // Send ping to keep connection alive\n        socketRef.current.emit('ping', {}, response => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n\n        // Also refresh online users list\n        getOnlineUsers();\n\n        // If we have a recipient, check their status\n        if (recipient) {\n          checkRecipientStatus();\n        }\n      }\n    }, 30000); // Every 30 seconds\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient || !socketRef.current) {\n      setRecipientStatus({\n        exists: false,\n        online: false,\n        checking: false\n      });\n      return;\n    }\n    console.log(`Checking status for recipient: ${recipient}`);\n\n    // Set status to checking while we wait for the response\n    setRecipientStatus(prev => ({\n      ...prev,\n      checking: true\n    }));\n\n    // Set a timeout to clear the checking status if we don't get a response\n    const checkingTimeout = setTimeout(() => {\n      setRecipientStatus(prev => {\n        if (prev.checking) {\n          return {\n            ...prev,\n            checking: false\n          };\n        }\n        return prev;\n      });\n    }, 3000); // 3 seconds timeout\n\n    // First check if the recipient is in the online users list\n    if (onlineUsers.includes(recipient)) {\n      clearTimeout(checkingTimeout);\n      console.log(`${recipient} found in online users list`);\n      setRecipientStatus({\n        exists: true,\n        online: true,\n        checking: false\n      });\n      return;\n    }\n\n    // If we're connected to a relay, use the checkRecipient event\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\n      socketRef.current.emit('checkRecipient', {\n        username: recipient\n      }, relayResponse => {\n        clearTimeout(checkingTimeout);\n        console.log('Relay recipient check response:', relayResponse);\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\n          // Only update if we got a valid response\n          setRecipientStatus({\n            ...relayResponse,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    } else {\n      // If connected directly to base node, use checkUser\n      socketRef.current.emit('checkUser', {\n        username: recipient\n      }, response => {\n        clearTimeout(checkingTimeout);\n        console.log('Base node recipient check response:', response);\n\n        // If we got a valid response, use it\n        if (response && typeof response.exists === 'boolean') {\n          setRecipientStatus({\n            ...response,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({\n            exists: false,\n            online: false,\n            checking: false\n          });\n        }\n      });\n    }\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Initialize chat data from localStorage\n  const initializeChatData = () => {\n    // Load active chats\n    const activeChats = getActiveChats(username);\n\n    // Initialize chat data\n    const initialChatMessages = {};\n    const initialUnreadCounts = loadUnreadCounts(username);\n    const initialRecipientStatuses = {};\n\n    // Load chat history for each active chat\n    activeChats.forEach(chatUser => {\n      initialChatMessages[chatUser] = loadChatHistory(username, chatUser);\n      initialRecipientStatuses[chatUser] = {\n        exists: true,\n        online: onlineUsers.includes(chatUser)\n      };\n    });\n\n    // Update state\n    setChatMessages(initialChatMessages);\n    setUnreadCounts(initialUnreadCounts);\n    setRecipientStatuses(initialRecipientStatuses);\n\n    // Set active chats\n    const activeChatsObj = {};\n    activeChats.forEach(chatUser => {\n      activeChatsObj[chatUser] = true;\n    });\n    setActiveChats(activeChatsObj);\n  };\n  const handleUsernameSubmit = async e => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      setIsCheckingUsername(true);\n      const tempSocket = io(BASE_NODE_URL, {\n        forceNew: true,\n        timeout: 5000\n      });\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', {\n          username: username.trim()\n        }, response => {\n          setIsCheckingUsername(false);\n          if (response && response.exists) {\n            setUsernameAvailable(false);\n            setSecurityAlert({\n              username: 'System',\n              message: `Username \"${username}\" is already taken.`,\n              type: 'error'\n            });\n            // Explicitly disconnect and do NOT set connected to true\n            tempSocket.disconnect();\n          } else {\n            setUsernameAvailable(true);\n            setConnected(true);\n\n            // Initialize chat data from localStorage\n            initializeChatData();\n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', error => {\n        console.error('Connection error during username check:', error);\n        setIsCheckingUsername(false);\n        setSecurityAlert({\n          username: 'System',\n          message: 'Could not verify username. Base node may be offline.',\n          type: 'error'\n        });\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        username: 'System',\n        message: 'Cannot connect: Base node is offline',\n        type: 'error'\n      });\n    }\n  };\n  const handleRecipientChange = e => {\n    const newRecipient = e.target.value.trim();\n    setRecipient(newRecipient);\n\n    // Reset recipient status when the recipient changes\n    setRecipientStatus({\n      exists: false,\n      online: false,\n      checking: false\n    });\n\n    // If the recipient is not empty, check their status\n    if (newRecipient && socketRef.current) {\n      // Use a small delay to avoid too many checks while typing\n      if (recipientCheckTimeoutRef.current) {\n        clearTimeout(recipientCheckTimeoutRef.current);\n      }\n      recipientCheckTimeoutRef.current = setTimeout(() => {\n        checkRecipientStatus();\n      }, 500); // 500ms delay\n    }\n  };\n  const handleSend = async (e, bounce = false) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    try {\n      // Show sending indicator\n      setStatus('Sending message...');\n\n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\n      if (!bounce) {\n        // For direct messages, we need to check if the recipient exists and is online\n        const recipientOnline = recipientStatus.online;\n\n        // If recipient is not online, suggest using relay\n        if (!recipientOnline) {\n          setSecurityAlert({\n            username: 'System',\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\n            type: 'warning'\n          });\n          setStatus('Registered successfully');\n          return;\n        }\n      }\n\n      // Get recipient's public key if we don't have it and encryption is enabled\n      if (encryptionEnabled && !publicKeys[recipient]) {\n        try {\n          await requestPublicKey(recipient);\n        } catch (error) {\n          console.error('Failed to get public key:', error);\n          // Continue without encryption if we can't get the key\n        }\n      }\n      let finalMessage = message.trim();\n      let isEncrypted = false;\n\n      // Encrypt the message if encryption is enabled and we have the recipient's public key\n      if (encryptionEnabled && publicKeys[recipient]) {\n        try {\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\n          isEncrypted = true;\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          setSecurityAlert({\n            username: 'System',\n            message: 'Failed to encrypt message. Sending as plaintext.',\n            type: 'warning'\n          });\n        }\n      }\n      const messageData = {\n        to: recipient,\n        message: finalMessage,\n        deviceId,\n        timestamp: new Date().toISOString(),\n        bounce: bounce,\n        // Always use the bounce parameter directly\n        encrypted: isEncrypted,\n        publicKey: keyPair === null || keyPair === void 0 ? void 0 : keyPair.publicKey // Send our public key with the message\n      };\n      console.log('Sending message:', {\n        ...messageData,\n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\n        bounce: bounce\n      });\n\n      // Add a timeout to handle cases where the server doesn't respond\n      const messageTimeout = setTimeout(() => {\n        setSecurityAlert({\n          username: 'System',\n          message: 'Message sending timed out. Server may be offline.',\n          type: 'error'\n        });\n        setStatus('Registered successfully');\n      }, 10000);\n      socketRef.current.emit('sendMessage', messageData, response => {\n        clearTimeout(messageTimeout);\n        console.log('Send message response:', response);\n        setStatus('Registered successfully');\n        if (response && (response.delivered || response.bounced)) {\n          // Add message to local state (store original message for display)\n          setMessages(msgs => [...msgs, {\n            from: username,\n            message: message.trim(),\n            // Store original message for display\n            fromDeviceId: deviceId,\n            timestamp: new Date(),\n            status: response.delivered ? 'delivered' : 'bounced',\n            expiresAt: response.expiresAt,\n            encrypted: isEncrypted\n          }]);\n          setMessage('');\n\n          // Show notification if message was bounced\n          if (response.bounced) {\n            setSecurityAlert({\n              username: 'System',\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\n              type: 'info'\n            });\n          }\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.reason) || 'Message delivery failed';\n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\n            if (bounce) {\n              // For bounced messages to non-existent users, show a special message\n              setSecurityAlert({\n                username: 'System',\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\n                type: 'info'\n              });\n\n              // Add message to local state as bounced\n              setMessages(msgs => [...msgs, {\n                from: username,\n                message: message.trim(),\n                fromDeviceId: deviceId,\n                timestamp: new Date(),\n                status: 'bounced',\n                expiresAt: Date.now() + 14400000,\n                // 4 hours\n                encrypted: isEncrypted\n              }]);\n              setMessage('');\n            } else {\n              setSecurityAlert({\n                username: 'System',\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\n                type: 'warning'\n              });\n            }\n          } else if (errorMsg.includes('offline')) {\n            setSecurityAlert({\n              username: 'System',\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\n              type: 'warning'\n            });\n          } else {\n            setSecurityAlert({\n              username: 'System',\n              message: `Failed to send message: ${errorMsg}`,\n              type: 'error'\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error sending message: ${error.message}`,\n        type: 'error'\n      });\n      setStatus('Registered successfully');\n    }\n  };\n\n  // Request public key from a user\n  const requestPublicKey = async username => {\n    return new Promise((resolve, reject) => {\n      if (!socketRef.current) {\n        reject(new Error('Not connected'));\n        return;\n      }\n      console.log(`Requesting public key for ${username}...`);\n\n      // Set a timeout in case the server doesn't respond\n      const requestTimeout = setTimeout(() => {\n        console.error(`Public key request for ${username} timed out`);\n        reject(new Error('Request timed out'));\n      }, 10000);\n      socketRef.current.emit('requestPublicKey', {\n        username\n      }, response => {\n        clearTimeout(requestTimeout);\n        if (response && response.success && response.publicKey) {\n          console.log(`Received public key for ${username}`);\n          setPublicKeys(prev => ({\n            ...prev,\n            [username]: response.publicKey\n          }));\n          resolve(response.publicKey);\n        } else {\n          const reason = (response === null || response === void 0 ? void 0 : response.reason) || 'Public key not available';\n          console.log(`No public key available for ${username}: ${reason}`);\n          reject(new Error(reason));\n        }\n      });\n    });\n  };\n\n  // Handle relay bounce for any user\n  const handleRelayBounce = e => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n\n    // Show confirmation before bouncing\n    const confirmBounce = window.confirm(`RELAY MESSAGE\\n\\n` + `Your message to \"${recipient}\" will be stored on ${connectionDetails.relayStatus === 'connected_to_relay' ? 'relay' : 'base node'} servers for up to 4 hours.\\n\\n` + `It will be delivered when ${recipient} comes online or registers with the network.\\n\\n` + `Continue?`);\n    if (confirmBounce) {\n      handleSend(e, true);\n    }\n  };\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n\n    // Send typing indicator\n    if (socketRef.current && recipient && e.target.value.length > 0) {\n      socketRef.current.emit('typing', {\n        to: recipient\n      });\n    }\n  };\n  const handleDisconnect = () => {\n    if (socketRef.current) {\n      // Notify the server that we're intentionally disconnecting\n      socketRef.current.emit('userLogout', {\n        username,\n        deviceId\n      }, () => {\n        console.log('Sent logout notification to server');\n\n        // Now disconnect\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      });\n    }\n\n    // Clear local state\n    setConnected(false);\n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({\n      exists: false,\n      online: false\n    });\n    setStatus('Disconnected');\n    setRelayStatus('offline');\n    clearInterval(pingIntervalRef.current);\n  };\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  const formatMessageTime = timestamp => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#0a0e14',\n      minHeight: '100vh',\n      width: '100vw',\n      height: '100vh',\n      color: '#a2aabc',\n      display: 'flex',\n      flexDirection: 'column',\n      fontFamily: '\"Fira Code\", monospace',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#171c28',\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          padding: '16px 24px',\n          borderBottom: '1px solid #1e2d3d'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: 0,\n            color: '#5ccfe6',\n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          },\n          children: \"WhisperNet_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1598,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 12,\n            padding: '4px 8px',\n            borderRadius: 4,\n            background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n            color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n            cursor: 'pointer'\n          },\n          onClick: () => setShowConnectionInfo(!showConnectionInfo),\n          children: relayStatus === 'online' ? 'Base Node Online' : relayStatus === 'checking' ? 'Checking...' : 'Base Node Offline'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1604,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1591,\n        columnNumber: 9\n      }, this), showConnectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#0d1117',\n          padding: '8px 24px',\n          fontSize: 12,\n          fontFamily: 'monospace',\n          borderBottom: '1px solid #1e2d3d',\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '8px 24px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1628,\n          columnNumber: 13\n        }, this), connected && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Socket ID: \", connectionDetails.socketId || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1631,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Transport: \", connectionDetails.transport || 'unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1632,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Base Node: \", connectionDetails.baseNodeUrl || BASE_NODE_URL]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1633,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#5ccfe6'\n              },\n              children: relayServerUrl || 'Unknown'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1634,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1634,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40'\n              },\n              children: connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1635,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1635,\n            columnNumber: 17\n          }, this), connectionDetails.connectedUsers !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Users on Relay: \", connectionDetails.connectedUsers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1644,\n            columnNumber: 19\n          }, this), connectionDetails.ip && connectionDetails.port && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Relay Address: \", connectionDetails.ip, \":\", connectionDetails.port]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1647,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Base Node Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            },\n            children: relayStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1651,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1651,\n          columnNumber: 13\n        }, this), deviceId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Device ID: \", deviceId.substring(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1654,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1618,\n        columnNumber: 11\n      }, this), securityAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#4b1c1c',\n          color: '#ff8f40',\n          padding: '12px 24px',\n          borderBottom: '1px solid #1e2d3d',\n          position: 'relative',\n          fontSize: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 20\n          },\n          children: securityAlert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1667,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            position: 'absolute',\n            top: 12,\n            right: 24,\n            background: 'none',\n            border: 'none',\n            color: '#ff8f40',\n            cursor: 'pointer',\n            fontSize: 16\n          },\n          onClick: dismissAlert,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1668,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1659,\n        columnNumber: 11\n      }, this), !connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: '0 24px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxWidth: '400px',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 16,\n              fontSize: 14,\n              color: '#5ccfe6'\n            },\n            children: [getTimestamp(), \" Initializing secure connection...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1699,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleUsernameSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                width: '100%',\n                padding: 10,\n                marginBottom: 12,\n                borderRadius: 4,\n                border: '1px solid #1e2d3d',\n                background: '#0d1117',\n                color: '#a2aabc',\n                fontSize: 16,\n                fontFamily: '\"Fira Code\", monospace',\n                boxSizing: 'border-box'\n              },\n              placeholder: \"Enter username\",\n              value: username,\n              onChange: e => {\n                setUsername(e.target.value);\n                setUsernameAvailable(true);\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1703,\n              columnNumber: 17\n            }, this), !usernameAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: '#ff8f40',\n                fontSize: 12,\n                marginTop: -8,\n                marginBottom: 8\n              },\n              children: \"Username not available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1724,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                width: '100%',\n                padding: 10,\n                borderRadius: 4,\n                background: relayStatus === 'online' ? 'linear-gradient(90deg, #5ccfe6, #bae67e)' : '#636b78',\n                color: '#171c28',\n                fontWeight: 'bold',\n                fontSize: 16,\n                border: 'none',\n                cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              type: \"submit\",\n              disabled: relayStatus !== 'online' || isCheckingUsername,\n              children: isCheckingUsername ? 'CHECKING...' : relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1725,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1702,\n            columnNumber: 15\n          }, this), relayStatus !== 'online' && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '100%',\n              padding: 8,\n              marginTop: 8,\n              borderRadius: 4,\n              background: '#4b1c1c',\n              color: '#ff8f40',\n              fontSize: 14,\n              border: 'none',\n              cursor: 'pointer',\n              fontFamily: '\"Fira Code\", monospace'\n            },\n            onClick: retryConnection,\n            children: \"RETRY CONNECTION\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1747,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 12,\n              color: '#ff3333',\n              textAlign: 'center',\n              fontSize: 14\n            },\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1765,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1695,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1687,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: 'flex',\n          overflow: 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(UserList, {\n          users: onlineUsers.map(user => ({\n            username: user,\n            online: true\n          })),\n          activeChats: activeChats,\n          unreadCounts: unreadCounts,\n          onSelectUser: openChat,\n          currentUser: username,\n          onClearHistory: handleClearAllHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1777,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden'\n          },\n          children: [!currentChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              padding: '0 24px',\n              background: '#0d1117'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 24,\n                color: '#5ccfe6',\n                marginBottom: 16,\n                fontWeight: 'bold'\n              },\n              children: \"Welcome to WhisperNet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1804,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 16,\n                color: '#a2aabc',\n                textAlign: 'center',\n                maxWidth: 500,\n                lineHeight: 1.5\n              },\n              children: \"Select a user from the sidebar to start a conversation or click on a username when you receive a message.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1812,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: 32,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: 14,\n                  color: '#636b78',\n                  marginBottom: 8\n                },\n                children: \"Connected as:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1827,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: 20,\n                  color: '#bae67e',\n                  fontWeight: 'bold'\n                },\n                children: username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1834,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1821,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                marginTop: 32,\n                padding: '8px 16px',\n                borderRadius: 4,\n                background: '#4b1c1c',\n                color: '#ff8f40',\n                fontSize: 14,\n                border: 'none',\n                cursor: 'pointer',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              onClick: handleDisconnect,\n              children: \"DISCONNECT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1842,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1795,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(ChatBox, {\n            recipient: currentChat,\n            messages: chatMessages[currentChat] || [],\n            username: username,\n            onSendMessage: (recipient, message) => {\n              // Set recipient and message\n              setRecipient(recipient);\n              setMessage(message);\n\n              // Create a synthetic event\n              const event = {\n                preventDefault: () => {}\n              };\n\n              // Call handleSend\n              handleSend(event);\n            },\n            onRelayMessage: (recipient, message) => {\n              // Set recipient and message\n              setRecipient(recipient);\n              setMessage(message);\n\n              // Create a synthetic event\n              const event = {\n                preventDefault: () => {}\n              };\n\n              // Call handleRelayBounce\n              handleRelayBounce(event);\n            },\n            recipientStatus: recipientStatuses[currentChat] || {\n              exists: false,\n              online: false\n            },\n            typing: typingUsers[currentChat] || false,\n            onMessageChange: message => {\n              // Send typing indicator\n              if (socketRef.current && currentChat && message.length > 0) {\n                socketRef.current.emit('typing', {\n                  to: currentChat\n                });\n              }\n            },\n            onClose: () => closeChat(currentChat)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1860,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '8px 16px',\n              borderTop: '1px solid #1e2d3d',\n              background: '#171c28'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: 12,\n                color: '#636b78',\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 8,\n                  height: 8,\n                  borderRadius: '50%',\n                  background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                  marginRight: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1912,\n                columnNumber: 19\n              }, this), status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1906,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '4px 12px',\n                borderRadius: 4,\n                background: '#4b1c1c',\n                color: '#ff8f40',\n                fontSize: 12,\n                border: 'none',\n                cursor: 'pointer',\n                fontFamily: '\"Fira Code\", monospace'\n              },\n              onClick: handleDisconnect,\n              children: \"DISCONNECT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1922,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1899,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1787,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1771,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1584,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1573,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CB/ZE2GNXHV9aeL6FqoDFRHUyXQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","axios","FingerprintJS","ChatBox","UserList","saveChatHistory","loadChatHistory","getActiveChats","clearAllChatHistory","saveUnreadCounts","loadUnreadCounts","resetUnreadCount","incrementUnreadCount","jsxDEV","_jsxDEV","Fragment","_Fragment","BASE_NODE_URL","process","env","REACT_APP_BASE_NODE_URL","generateKeyPair","keyPair","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","publicKey","exportKey","privateKey","error","console","encryptMessage","message","publicKeyJwk","importKey","encoder","TextEncoder","data","encode","encryptedData","encrypt","btoa","String","fromCharCode","decryptMessage","encryptedMessage","privateKeyJwk","from","atob","c","charCodeAt","decryptedData","decrypt","decoder","TextDecoder","decode","fpPromise","load","App","_s","username","setUsername","recipient","setRecipient","setMessage","messages","setMessages","connected","setConnected","status","setStatus","deviceId","setDeviceId","connectionDetails","setConnectionDetails","showConnectionInfo","setShowConnectionInfo","securityAlert","setSecurityAlert","typing","setTyping","relayServerUrl","setRelayServerUrl","relayStatus","setRelayStatus","onlineUsers","setOnlineUsers","recipientStatus","setRecipientStatus","exists","online","isCheckingUsername","setIsCheckingUsername","usernameAvailable","setUsernameAvailable","setKeyPair","publicKeys","setPublicKeys","encryptionEnabled","setEncryptionEnabled","encryptionStatus","setEncryptionStatus","activeChats","setActiveChats","chatMessages","setChatMessages","currentChat","setCurrentChat","typingUsers","setTypingUsers","recipientStatuses","setRecipientStatuses","unreadCounts","setUnreadCounts","socketRef","messagesEndRef","typingTimeoutRef","pingIntervalRef","recipientCheckTimeoutRef","initializeDevice","fp","result","get","visitorId","initializeEncryption","fallbackId","Math","random","toString","substr","deviceIdentifier","storedKeys","localStorage","getItem","parsedKeys","JSON","parse","testMessage","Date","now","encrypted","decrypted","log","warn","generateAndStoreNewKeys","testError","parseError","type","newKeyPair","setItem","stringify","checkRelayStatus","response","timeout","tempSocket","transports","reconnectionAttempts","reconnectionDelay","forceNew","connectionTimeout","setTimeout","disconnect","on","clearTimeout","err","openChat","chatUsername","history","prev","checkUserStatus","closeChat","newActiveChats","current","isOnline","includes","emit","handleClearAllHistory","confirm","connectToBaseNode","clearInterval","Object","keys","length","forEach","chatUser","fetchRelayInfo","info","relayId","connectedUsers","ip","port","relayInfo","success","isDirect","socketId","id","substring","relayInfoInterval","setInterval","query","transport","engine","baseNodeUrl","relays","timestamp","registerWithBaseNode","connectToRelay","startRelayPolling","callback","connectSocketEvents","getOnlineUsers","startPingInterval","errorMsg","reason","cachedRelayInfo","cachedRelays","parsedCache","relay","relayUrl","startsWith","oldSocket","relayConnectionTimeout","relayPollingInterval","fromDeviceId","bounced","previousMessages","filter","msg","decryptedMessage","decryptionStatus","messageObj","msgs","updatedMessages","newCounts","ack","user","notRegisteredYet","u","checkRecipientStatus","Array","isArray","users","_prev$chatUser","typingUser","checking","checkingTimeout","relayResponse","timeoutId","_messagesEndRef$curre","scrollIntoView","behavior","initializeChatData","initialChatMessages","initialUnreadCounts","initialRecipientStatuses","activeChatsObj","handleUsernameSubmit","e","preventDefault","trim","handleRecipientChange","newRecipient","target","value","handleSend","bounce","recipientOnline","requestPublicKey","finalMessage","isEncrypted","messageData","to","toISOString","messageTimeout","delivered","expiresAt","Promise","resolve","reject","Error","requestTimeout","handleRelayBounce","confirmBounce","handleMessageChange","handleDisconnect","dismissAlert","retryConnection","getTimestamp","getHours","padStart","getMinutes","getSeconds","formatMessageTime","date","style","background","minHeight","width","height","color","display","flexDirection","fontFamily","overflow","children","flex","justifyContent","alignItems","padding","borderBottom","margin","letterSpacing","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","borderRadius","cursor","onClick","flexWrap","gap","undefined","position","marginRight","top","right","border","maxWidth","marginBottom","onSubmit","boxSizing","placeholder","onChange","required","marginTop","fontWeight","disabled","textAlign","map","onSelectUser","currentUser","onClearHistory","lineHeight","onSendMessage","event","onRelayMessage","onMessageChange","onClose","borderTop","_c","$RefreshReg$"],"sources":["C:/Users/siddharth/Documents/GitHub/WhisperNet/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport ChatBox from './components/ChatBox';\nimport UserList from './components/UserList';\nimport { \n  saveChatHistory, \n  loadChatHistory, \n  getActiveChats, \n  clearAllChatHistory,\n  saveUnreadCounts,\n  loadUnreadCounts,\n  resetUnreadCount,\n  incrementUnreadCount\n} from './utils/chatStorage';\n\nconst BASE_NODE_URL = process.env.REACT_APP_BASE_NODE_URL || \"http://localhost:5000\";\n\n// Encryption utilities\nconst generateKeyPair = async () => {\n  try {\n    const keyPair = await window.crypto.subtle.generateKey(\n      {\n        name: \"RSA-OAEP\",\n        modulusLength: 2048,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n      },\n      true,\n      [\"encrypt\", \"decrypt\"]\n    );\n    \n    // Export the keys to JWK format\n    const publicKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"jwk\", keyPair.privateKey);\n    \n    return { publicKey, privateKey };\n  } catch (error) {\n    console.error('Error generating key pair:', error);\n    throw error;\n  }\n};\n\nconst encryptMessage = async (message, publicKeyJwk) => {\n  try {\n    // Import the public key\n    const publicKey = await window.crypto.subtle.importKey(\n      \"jwk\",\n      publicKeyJwk,\n      {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\",\n      },\n      false,\n      [\"encrypt\"]\n    );\n    \n    // Convert the message to ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n    \n    // Encrypt the data\n    const encryptedData = await window.crypto.subtle.encrypt(\n      {\n        name: \"RSA-OAEP\"\n      },\n      publicKey,\n      data\n    );\n    \n    // Convert the encrypted data to base64\n    return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n  } catch (error) {\n    console.error('Error encrypting message:', error);\n    throw error;\n  }\n};\n\nconst decryptMessage = async (encryptedMessage, privateKeyJwk) => {\n  try {\n    // Import the private key\n    const privateKey = await window.crypto.subtle.importKey(\n      \"jwk\",\n      privateKeyJwk,\n      {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\",\n      },\n      false,\n      [\"decrypt\"]\n    );\n    \n    // Convert the base64 encrypted message to ArrayBuffer\n    const encryptedData = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));\n    \n    // Decrypt the data\n    const decryptedData = await window.crypto.subtle.decrypt(\n      {\n        name: \"RSA-OAEP\"\n      },\n      privateKey,\n      encryptedData\n    );\n    \n    // Convert the decrypted data to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n  } catch (error) {\n    console.error('Error decrypting message:', error);\n    return '[Encrypted message - cannot decrypt]';\n  }\n};\n\n// Initialize the fingerprint agent\nconst fpPromise = FingerprintJS.load();\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [status, setStatus] = useState('Checking relay status...');\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionDetails, setConnectionDetails] = useState({});\n  const [showConnectionInfo, setShowConnectionInfo] = useState(false);\n  const [securityAlert, setSecurityAlert] = useState(null);\n  const [typing, setTyping] = useState(false);\n  const [relayServerUrl, setRelayServerUrl] = useState('Unknown');\n  const [relayStatus, setRelayStatus] = useState('checking');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [recipientStatus, setRecipientStatus] = useState({ exists: false, online: false });\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState(true);\n  const [keyPair, setKeyPair] = useState(null);\n  const [publicKeys, setPublicKeys] = useState({}); // username -> publicKey\n  const [encryptionEnabled, setEncryptionEnabled] = useState(true);\n  const [encryptionStatus, setEncryptionStatus] = useState('initializing');\n  \n  // New state variables for chat management\n  const [activeChats, setActiveChats] = useState({}); // username -> boolean (is chat open)\n  const [chatMessages, setChatMessages] = useState({}); // username -> messages array\n  const [currentChat, setCurrentChat] = useState(null); // currently selected chat username\n  const [typingUsers, setTypingUsers] = useState({}); // username -> boolean (is typing)\n  const [recipientStatuses, setRecipientStatuses] = useState({}); // username -> status object\n  const [unreadCounts, setUnreadCounts] = useState({}); // username -> count\n  \n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const pingIntervalRef = useRef(null);\n  const recipientCheckTimeoutRef = useRef(null);\n\n  // Get device fingerprint and initialize encryption on component mount\n  useEffect(() => {\n    const initializeDevice = async () => {\n      try {\n        // Get device fingerprint\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n        \n        // Initialize encryption\n        await initializeEncryption(visitorId);\n      } catch (error) {\n        console.error('Failed to initialize device:', error);\n        // Generate a fallback device ID\n        const fallbackId = 'fallback-' + Math.random().toString(36).substr(2, 9);\n        setDeviceId(fallbackId);\n        \n        // Initialize encryption with fallback ID\n        await initializeEncryption(fallbackId);\n      }\n    };\n    \n    initializeDevice();\n  }, []);\n  \n  // Initialize encryption\n  const initializeEncryption = async (deviceIdentifier) => {\n    try {\n      setEncryptionStatus('initializing');\n      \n      // Check if we have keys in localStorage\n      const storedKeys = localStorage.getItem(`whispernetKeys_${deviceIdentifier}`);\n      \n      if (storedKeys) {\n        // We have stored keys, check if they're valid\n        try {\n          const parsedKeys = JSON.parse(storedKeys);\n          \n          // Validate the keys by testing encryption/decryption\n          if (parsedKeys.publicKey && parsedKeys.privateKey) {\n            try {\n              // Test encryption with the stored keys\n              const testMessage = \"test-encryption-\" + Date.now();\n              const encrypted = await encryptMessage(testMessage, parsedKeys.publicKey);\n              const decrypted = await decryptMessage(encrypted, parsedKeys.privateKey);\n              \n              if (decrypted === testMessage) {\n                // Keys are valid\n                setKeyPair(parsedKeys);\n                console.log('Loaded and validated existing encryption keys');\n                setEncryptionStatus('ready');\n              } else {\n                console.warn('Stored keys failed validation test');\n                await generateAndStoreNewKeys(deviceIdentifier);\n              }\n            } catch (testError) {\n              console.error('Error testing stored keys:', testError);\n              await generateAndStoreNewKeys(deviceIdentifier);\n            }\n          } else {\n            console.warn('Stored keys are incomplete');\n            await generateAndStoreNewKeys(deviceIdentifier);\n          }\n        } catch (parseError) {\n          console.error('Error parsing stored keys:', parseError);\n          await generateAndStoreNewKeys(deviceIdentifier);\n        }\n      } else {\n        // No stored keys, generate new ones\n        await generateAndStoreNewKeys(deviceIdentifier);\n      }\n    } catch (error) {\n      console.error('Error initializing encryption:', error);\n      setEncryptionStatus('error');\n      setSecurityAlert({\n        username: 'System',\n        message: 'Failed to initialize encryption. Messages will not be secure.',\n        type: 'error'\n      });\n      setEncryptionEnabled(false);\n    }\n  };\n  \n  // Generate and store new keys\n  const generateAndStoreNewKeys = async (deviceIdentifier) => {\n    try {\n      console.log('Generating new encryption keys...');\n      const newKeyPair = await generateKeyPair();\n      setKeyPair(newKeyPair);\n      \n      // Store keys in localStorage\n      localStorage.setItem(`whispernetKeys_${deviceIdentifier}`, JSON.stringify(newKeyPair));\n      \n      console.log('Generated and stored new encryption keys');\n      setEncryptionStatus('ready');\n    } catch (error) {\n      console.error('Error generating new keys:', error);\n      throw error;\n    }\n  };\n\n  // Check relay status on initial load\n  useEffect(() => {\n    if (deviceId) {\n      checkRelayStatus();\n    }\n  }, [deviceId]);\n\n  // Function to check relay status\n  const checkRelayStatus = async () => {\n    setStatus('Checking base node status...');\n    setRelayStatus('checking');\n    \n    try {\n      // First try HTTP health check\n      const response = await axios.get(`${BASE_NODE_URL}/health`, { \n        timeout: 5000 \n      });\n      \n      if (response.status === 200) {\n        setRelayStatus('online');\n        setStatus('Base node online. Please login.');\n        return;\n      }\n    } catch (error) {\n      console.log('HTTP health check failed, trying socket connection:', error.message);\n    }\n    \n    // Fallback to socket connection test\n    const tempSocket = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 2,\n      reconnectionDelay: 1000,\n      timeout: 5000,\n      forceNew: true\n    });\n    \n    const connectionTimeout = setTimeout(() => {\n      setRelayStatus('timeout');\n      setStatus('Connection timeout. Base node may be offline.');\n      tempSocket.disconnect();\n    }, 8000);\n    \n    tempSocket.on('connect', () => {\n      clearTimeout(connectionTimeout);\n      setRelayStatus('online');\n      setStatus('Base node online. Please login.');\n      tempSocket.disconnect();\n    });\n    \n    tempSocket.on('connect_error', (err) => {\n      clearTimeout(connectionTimeout);\n      console.error('Socket connection error:', err);\n      setRelayStatus('offline');\n      setStatus('Base node offline. Please try again later.');\n      tempSocket.disconnect();\n    });\n  };\n  \n  // Chat management functions\n  const openChat = async (chatUsername) => {\n    // Check if we already have messages for this chat\n    if (!chatMessages[chatUsername]) {\n      // Load chat history from localStorage\n      const history = loadChatHistory(username, chatUsername);\n      \n      // Update chat messages\n      setChatMessages(prev => ({\n        ...prev,\n        [chatUsername]: history\n      }));\n    }\n    \n    // Mark chat as active\n    setActiveChats(prev => ({\n      ...prev,\n      [chatUsername]: true\n    }));\n    \n    // Set as current chat\n    setCurrentChat(chatUsername);\n    \n    // Reset unread count\n    setUnreadCounts(prev => ({\n      ...prev,\n      [chatUsername]: 0\n    }));\n    resetUnreadCount(username, chatUsername);\n    \n    // Check recipient status\n    checkUserStatus(chatUsername);\n  };\n  \n  const closeChat = (chatUsername) => {\n    // Mark chat as inactive\n    setActiveChats(prev => {\n      const newActiveChats = { ...prev };\n      delete newActiveChats[chatUsername];\n      return newActiveChats;\n    });\n    \n    // If this was the current chat, set current chat to null\n    if (currentChat === chatUsername) {\n      setCurrentChat(null);\n    }\n  };\n  \n  const checkUserStatus = (chatUsername) => {\n    if (!socketRef.current || !chatUsername) return;\n    \n    // First check if the user is in the online users list\n    const isOnline = onlineUsers.includes(chatUsername);\n    \n    if (isOnline) {\n      setRecipientStatuses(prev => ({\n        ...prev,\n        [chatUsername]: { exists: true, online: true }\n      }));\n      return;\n    }\n    \n    // Otherwise, check with the server\n    socketRef.current.emit('checkRecipient', { username: chatUsername }, (response) => {\n      if (response && response.exists) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: { exists: true, online: response.online || false }\n        }));\n      } else {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [chatUsername]: { exists: false, online: false }\n        }));\n      }\n    });\n  };\n  \n  const handleClearAllHistory = () => {\n    if (window.confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {\n      // Clear all chat history from localStorage\n      clearAllChatHistory(username);\n      \n      // Reset state\n      setChatMessages({});\n      setUnreadCounts({});\n      \n      // Show confirmation\n      setSecurityAlert({\n        username: 'System',\n        message: 'All chat history has been cleared.',\n        type: 'info'\n      });\n    }\n  };\n\n  // Main socket connection effect\n  useEffect(() => {\n    if (connected && username && deviceId) {\n      connectToBaseNode();\n    }\n    \n    return () => {\n      if (socketRef.current) {\n        clearInterval(pingIntervalRef.current);\n        clearTimeout(recipientCheckTimeoutRef.current);\n        clearTimeout(typingTimeoutRef.current);\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connected, username, deviceId]);\n  \n  // Effect to save chat messages to localStorage when they change\n  useEffect(() => {\n    if (username && Object.keys(chatMessages).length > 0) {\n      // Save each chat's messages to localStorage\n      Object.keys(chatMessages).forEach(chatUser => {\n        saveChatHistory(username, chatUser, chatMessages[chatUser]);\n      });\n    }\n  }, [username, chatMessages]);\n\n  useEffect(() => {\n    if (connected && socketRef.current) {\n      const fetchRelayInfo = () => {\n        console.log('Fetching relay info...');\n        \n        // First try to get relay info directly from the socket\n        socketRef.current.emit('getRelayInfo', {}, (info) => {\n          if (info && info.relayId) {\n            console.log('Received relay info from socket:', info);\n            // Update relay server information\n            setRelayServerUrl(info.relayId);\n            setConnectionDetails(prev => ({ \n              ...prev, \n              relayId: info.relayId,\n              relayStatus: info.status || 'connected',\n              connectedUsers: info.connectedUsers,\n              ip: info.ip,\n              port: info.port\n            }));\n            \n            // Show connection info automatically on first connect\n            if (!showConnectionInfo) {\n              setShowConnectionInfo(true);\n              \n              // Auto-hide after 5 seconds\n              setTimeout(() => {\n                setShowConnectionInfo(false);\n              }, 5000);\n            }\n          } else {\n            console.warn('No relay info received from socket, checking with base node');\n            \n            // If we're connected to the base node, try to get our relay assignment\n            socketRef.current.emit('getMyRelayInfo', { username }, (relayInfo) => {\n              if (relayInfo && relayInfo.success && relayInfo.relayId) {\n                console.log('Received relay assignment from base node:', relayInfo);\n                \n                if (relayInfo.isDirect) {\n                  // We're directly connected to the base node\n                  setRelayServerUrl('Direct to Base Node');\n                  setConnectionDetails(prev => ({ \n                    ...prev, \n                    relayId: 'direct',\n                    relayStatus: 'direct_to_base',\n                  }));\n                } else {\n                  // We're assigned to a relay\n                  setRelayServerUrl(relayInfo.relayId);\n                  setConnectionDetails(prev => ({ \n                    ...prev, \n                    relayId: relayInfo.relayId,\n                    relayStatus: 'assigned_by_base',\n                  }));\n                }\n              } else {\n                console.warn('No relay assignment from base node, assuming direct connection');\n                \n                // If we can't get relay info, we're probably directly connected to the base node\n                const socketId = socketRef.current.id;\n                setRelayServerUrl(`Direct (${socketId.substring(0, 8)}...)`);\n                setConnectionDetails(prev => ({ \n                  ...prev, \n                  relayId: 'direct',\n                  relayStatus: 'direct_to_base',\n                }));\n              }\n            });\n          }\n        });\n      };\n      \n      // Get relay info immediately and then every 10 seconds\n      fetchRelayInfo();\n      const relayInfoInterval = setInterval(fetchRelayInfo, 10000);\n      \n      return () => clearInterval(relayInfoInterval);\n    }\n  }, [connected, showConnectionInfo, username]);\n\n  const connectToBaseNode = () => {\n    // Clear any previous connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    \n    // Always connect to base node first for handshake and relay discovery\n    console.log('Connecting to base node for initial handshake:', BASE_NODE_URL);\n    setStatus('Connecting to base node for handshake...');\n    \n    // Connect to base node\n    socketRef.current = io(BASE_NODE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 2000,\n      query: { \n        deviceId,\n        username \n      },\n      forceNew: true\n    });\n    \n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to base node with socket ID:', socketRef.current.id);\n      setStatus('Connected to base node for handshake');\n      setRelayStatus('online');\n      \n      // When connecting to the base node, set the relay information accordingly\n      setRelayServerUrl(`Base Node (Handshake)`);\n      setConnectionDetails({\n        socketId: socketRef.current.id,\n        transport: socketRef.current.io.engine.transport.name,\n        baseNodeUrl: BASE_NODE_URL,\n        relayId: 'base_handshake',\n        relayStatus: 'handshake'\n      });\n      \n      // Get available relays first\n      socketRef.current.emit('getAvailableRelays', {}, (response) => {\n        console.log('Available relays:', response);\n        \n        if (response && response.relays && response.relays.length > 0) {\n          // Cache relay information\n          localStorage.setItem('whispernetRelayCache', JSON.stringify({\n            timestamp: Date.now(),\n            relays: response.relays\n          }));\n          \n          // Register with base node temporarily\n          registerWithBaseNode(() => {\n            // After successful registration, connect to a relay\n            connectToRelay(response.relays);\n          });\n        } else {\n          // No relays available, register directly with base node\n          registerWithBaseNode(() => {\n            // Set UI to indicate we're using base node as fallback\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            setStatus('Using Base Node as fallback (no relays available)');\n            \n            // Start polling for available relays\n            startRelayPolling();\n          });\n        }\n      });\n    });\n    \n    const registerWithBaseNode = (callback) => {\n      // Register with base node\n      socketRef.current.emit('registerUser', { \n        username, \n        deviceId \n      }, (response) => {\n        console.log('Registration response:', response);\n        if (response && response.success) {\n          setStatus('Registered successfully with base node');\n          \n          // Set up socket event handlers\n          connectSocketEvents();\n          \n          // Get initial data\n          getOnlineUsers();\n          startPingInterval();\n          \n          // Execute callback if provided\n          if (callback && typeof callback === 'function') {\n            callback();\n          }\n        } else {\n          const errorMsg = response?.reason || 'Registration failed';\n          setStatus(`Registration failed: ${errorMsg}`);\n          setSecurityAlert({\n            username: 'System',\n            message: `Registration failed: ${errorMsg}`,\n            type: 'error'\n          });\n        }\n      });\n    };\n    \n    socketRef.current.on('connect_error', (err) => {\n      console.error('Base node connection error:', err);\n      setStatus(`Connection failed: ${err.message}`);\n      setRelayStatus('offline');\n      \n      // Try to use cached relays if available\n      const cachedRelayInfo = localStorage.getItem('whispernetRelayCache');\n      let cachedRelays = [];\n      \n      if (cachedRelayInfo) {\n        try {\n          const parsedCache = JSON.parse(cachedRelayInfo);\n          if (parsedCache.timestamp && (Date.now() - parsedCache.timestamp < 3600000)) { // Cache valid for 1 hour\n            cachedRelays = parsedCache.relays || [];\n            console.log('Using cached relay information:', cachedRelays);\n            \n            if (cachedRelays.length > 0) {\n              setTimeout(() => {\n                connectToRelay(cachedRelays);\n              }, 1000);\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing cached relay info:', error);\n        }\n      }\n    });\n    \n    socketRef.current.on('disconnect', (reason) => {\n      console.log('Disconnected from base node:', reason);\n      setStatus(`Disconnected: ${reason}`);\n      \n      // Don't auto-reconnect if user manually disconnected\n      if (reason !== 'io client disconnect' && connected) {\n        setTimeout(() => {\n          if (connected) {\n            // Try to reconnect to base node first\n            connectToBaseNode();\n          }\n        }, 3000);\n      }\n    });\n  };\n  \n  // Function to connect to a relay server\n  const connectToRelay = (relays) => {\n    if (!relays || !relays.length) {\n      console.log('No relays available to connect to');\n      return;\n    }\n    \n    // Use the first available relay\n    const relay = relays[0];\n    const relayUrl = relay.id.startsWith('http') ? relay.id : `http://${relay.id}`;\n    \n    console.log(`Switching to relay server: ${relayUrl}`);\n    setStatus(`Connecting to relay server: ${relay.id}...`);\n    \n    // Disconnect from base node first\n    if (socketRef.current) {\n      // Keep a reference to the old socket for cleanup\n      const oldSocket = socketRef.current;\n      \n      // Create new socket for relay\n      socketRef.current = io(relayUrl, {\n        transports: ['websocket', 'polling'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 2000,\n        forceNew: true\n      });\n      \n      // Set a timeout to disconnect from base node after relay connection is established\n      const relayConnectionTimeout = setTimeout(() => {\n        if (!socketRef.current || !socketRef.current.connected) {\n          console.log('Relay connection timed out, staying with base node');\n          socketRef.current = oldSocket; // Restore old socket\n          setStatus('Using Base Node (relay connection failed)');\n          setRelayServerUrl('Base Node (Fallback)');\n          setConnectionDetails(prev => ({\n            ...prev,\n            relayId: 'direct',\n            relayStatus: 'direct_to_base'\n          }));\n          \n          // Start polling for available relays\n          startRelayPolling();\n        }\n      }, 5000);\n      \n      socketRef.current.on('connect', () => {\n        clearTimeout(relayConnectionTimeout);\n        console.log(`Connected to relay server: ${relayUrl}`);\n        \n        // Register with the relay\n        socketRef.current.emit('register', { \n          username, \n          deviceId \n        }, (response) => {\n          if (response && response.success) {\n            console.log('Successfully registered with relay');\n            \n            // Now we can safely disconnect from the base node\n            oldSocket.disconnect();\n            \n            setStatus(`Connected to relay server: ${relay.id}`);\n            setRelayServerUrl(relay.id);\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: relay.id,\n              socketId: socketRef.current.id,\n              transport: socketRef.current.io.engine.transport.name,\n              relayStatus: 'connected_to_relay'\n            }));\n            \n            // Set up socket event handlers\n            connectSocketEvents();\n            \n            // Start ping interval\n            startPingInterval();\n            \n            // Show connection info automatically\n            setShowConnectionInfo(true);\n            setTimeout(() => {\n              setShowConnectionInfo(false);\n            }, 5000);\n          } else {\n            console.error('Failed to register with relay:', response);\n            setStatus('Failed to register with relay server');\n            \n            // Disconnect from relay and stay with base node\n            socketRef.current.disconnect();\n            socketRef.current = oldSocket;\n            \n            setStatus('Using Base Node (relay registration failed)');\n            setRelayServerUrl('Base Node (Fallback)');\n            setConnectionDetails(prev => ({\n              ...prev,\n              relayId: 'direct',\n              relayStatus: 'direct_to_base'\n            }));\n            \n            // Start polling for available relays\n            startRelayPolling();\n          }\n        });\n      });\n      \n      socketRef.current.on('connect_error', (err) => {\n        clearTimeout(relayConnectionTimeout);\n        console.error(`Relay connection error: ${err.message}`);\n        \n        // Stay with base node\n        socketRef.current = oldSocket;\n        \n        setStatus('Using Base Node (relay connection error)');\n        setRelayServerUrl('Base Node (Fallback)');\n        setConnectionDetails(prev => ({\n          ...prev,\n          relayId: 'direct',\n          relayStatus: 'direct_to_base'\n        }));\n        \n        // Start polling for available relays\n        startRelayPolling();\n      });\n      \n      socketRef.current.on('disconnect', (reason) => {\n        console.log(`Disconnected from relay: ${reason}`);\n        \n        // If we were previously connected to a relay and lost connection\n        if (connectionDetails.relayStatus === 'connected_to_relay') {\n          setStatus(`Disconnected from relay: ${reason}`);\n          \n          // Try to reconnect to base node\n          setTimeout(() => {\n            if (connected) {\n              connectToBaseNode();\n            }\n          }, 1000);\n        }\n      });\n    }\n  };\n  \n  // Function to periodically poll for available relays when using base node as fallback\n  const startRelayPolling = () => {\n    // Clear any existing polling interval\n    if (window.relayPollingInterval) {\n      clearInterval(window.relayPollingInterval);\n    }\n    \n    // Set up polling interval\n    window.relayPollingInterval = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected && \n          connectionDetails.relayStatus === 'direct_to_base') {\n        console.log('Polling for available relays...');\n        \n        socketRef.current.emit('getAvailableRelays', {}, (response) => {\n          if (response && response.relays && response.relays.length > 0) {\n            console.log('Found available relays:', response.relays);\n            \n            // Cache relay information\n            localStorage.setItem('whispernetRelayCache', JSON.stringify({\n              timestamp: Date.now(),\n              relays: response.relays\n            }));\n            \n            // Connect to a relay\n            connectToRelay(response.relays);\n            \n            // Clear polling interval\n            clearInterval(window.relayPollingInterval);\n          } else {\n            console.log('No relays available, continuing to use base node');\n          }\n        });\n      }\n    }, 30000); // Poll every 30 seconds\n    \n    // Clean up on component unmount\n    return () => {\n      if (window.relayPollingInterval) {\n        clearInterval(window.relayPollingInterval);\n      }\n    };\n  };\n\n  const connectSocketEvents = () => {\n    // Message handling\n    socketRef.current.on('receiveMessage', async (data) => {\n      console.log('Received message:', data);\n      const { from, message, fromDeviceId, timestamp, encrypted, publicKey, bounced } = data;\n      \n      // Store sender's public key if provided\n      if (publicKey && from) {\n        console.log(`Storing public key for ${from}`);\n        setPublicKeys(prev => ({ ...prev, [from]: publicKey }));\n      }\n      \n      // Security check for device ID changes\n      const previousMessages = messages.filter(msg => msg.from === from);\n      if (previousMessages.length > 0 && previousMessages[0].fromDeviceId && \n          previousMessages[0].fromDeviceId !== fromDeviceId) {\n        setSecurityAlert({\n          username: from,\n          message: `Warning: ${from} appears to be messaging from a different device!`,\n          type: 'warning'\n        });\n      }\n      \n      let decryptedMessage = message;\n      let decryptionStatus = 'plaintext';\n      \n      // Decrypt the message if it's encrypted and we have our private key\n      if (encrypted && keyPair?.privateKey) {\n        try {\n          console.log('Decrypting message...');\n          decryptedMessage = await decryptMessage(message, keyPair.privateKey);\n          decryptionStatus = 'decrypted';\n          console.log('Message decrypted successfully');\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n          decryptedMessage = '[Encrypted message - cannot decrypt]';\n          decryptionStatus = 'failed';\n          \n          setSecurityAlert({\n            username: 'System',\n            message: `Failed to decrypt message from ${from}. Your keys may have changed.`,\n            type: 'warning'\n          });\n        }\n      }\n      \n      // Create the message object\n      const messageObj = { \n        from, \n        message: decryptedMessage, \n        fromDeviceId, \n        timestamp: new Date(timestamp || new Date()),\n        encrypted,\n        decryptionStatus,\n        bounced\n      };\n      \n      // Add to global messages for backward compatibility\n      setMessages(msgs => [...msgs, messageObj]);\n      \n      // Add message to the appropriate chat\n      setChatMessages(prev => {\n        const updatedMessages = { \n          ...prev,\n          [from]: [...(prev[from] || []), messageObj]\n        };\n        \n        // Save to localStorage\n        saveChatHistory(username, from, updatedMessages[from]);\n        \n        return updatedMessages;\n      });\n      \n      // If this chat is not the current chat, increment unread count\n      if (currentChat !== from) {\n        setUnreadCounts(prev => {\n          const newCounts = {\n            ...prev,\n            [from]: (prev[from] || 0) + 1\n          };\n          \n          // Save to localStorage\n          saveUnreadCounts(username, newCounts);\n          \n          return newCounts;\n        });\n        \n        // Also increment in localStorage\n        incrementUnreadCount(username, from);\n      }\n      \n      // Make sure this user is in our active chats\n      setActiveChats(prev => {\n        if (!prev[from]) {\n          return {\n            ...prev,\n            [from]: true\n          };\n        }\n        return prev;\n      });\n      \n      // Check user status\n      checkUserStatus(from);\n    });\n    \n    // Handle public key requests\n    socketRef.current.on('publicKeyRequest', ({ from }, ack) => {\n      console.log(`Public key requested by ${from}`);\n      \n      if (keyPair && keyPair.publicKey) {\n        console.log(`Sending public key to ${from}`);\n        if (ack) ack({ success: true, publicKey: keyPair.publicKey });\n      } else {\n        console.warn('No public key available to share');\n        if (ack) ack({ success: false, reason: 'Public key not available' });\n      }\n    });\n    \n    // User status updates\n    socketRef.current.on('userStatusUpdate', (data) => {\n      console.log('User status update:', data);\n      const { username: user, online } = data;\n      \n      // If this is our current recipient, update their status\n      if (user === recipient) {\n        console.log(`Updating status for current recipient ${user} to ${online ? 'online' : 'offline'}`);\n        setRecipientStatus(prev => ({ \n          ...prev, \n          exists: true, // If we got a status update, the user definitely exists\n          online,\n          notRegisteredYet: false // Clear this flag since we know the user exists\n        }));\n      }\n      \n      // Update online users list\n      setOnlineUsers(prev => {\n        if (online && !prev.includes(user)) {\n          console.log(`Adding ${user} to online users list`);\n          return [...prev, user];\n        } else if (!online && prev.includes(user)) {\n          console.log(`Removing ${user} from online users list`);\n          return prev.filter(u => u !== user);\n        }\n        return prev;\n      });\n      \n      // Update recipient status for all active chats\n      if (activeChats[user]) {\n        setRecipientStatuses(prev => ({\n          ...prev,\n          [user]: { \n            ...prev[user],\n            exists: true, \n            online \n          }\n        }));\n      }\n      \n      // If we're currently checking a recipient, refresh their status\n      if (recipient) {\n        checkRecipientStatus();\n      }\n    });\n    \n    // Handle bulk online users updates\n    socketRef.current.on('onlineUsersUpdate', (data) => {\n      console.log('Online users update:', data);\n      if (data && Array.isArray(data.users)) {\n        setOnlineUsers(data.users);\n        \n        // If we have a recipient, check if they're in the online users list\n        if (recipient && data.users.includes(recipient)) {\n          setRecipientStatus(prev => ({ \n            ...prev, \n            exists: true,\n            online: true,\n            notRegisteredYet: false\n          }));\n        } else if (recipient) {\n          // If recipient is not in the online users list, refresh their status\n          checkRecipientStatus();\n        }\n        \n        // Update status for all active chats\n        Object.keys(activeChats).forEach(chatUser => {\n          const isOnline = data.users.includes(chatUser);\n          setRecipientStatuses(prev => ({\n            ...prev,\n            [chatUser]: { \n              ...prev[chatUser],\n              exists: prev[chatUser]?.exists || isOnline, \n              online: isOnline \n            }\n          }));\n        });\n      }\n    });\n    \n    // Typing indicators\n    socketRef.current.on('userTyping', (data) => {\n      const { username: typingUser } = data;\n      \n      // Update typing status for this user\n      setTypingUsers(prev => ({\n        ...prev,\n        [typingUser]: true\n      }));\n      \n      // For backward compatibility\n      if (typingUser === recipient) {\n        setTyping(true);\n      }\n      \n      // Clear any existing timeout\n      clearTimeout(typingTimeoutRef.current);\n      \n      // Set a timeout to clear the typing indicator after 3 seconds\n      typingTimeoutRef.current = setTimeout(() => {\n        setTypingUsers(prev => ({\n          ...prev,\n          [typingUser]: false\n        }));\n        \n        // For backward compatibility\n        if (typingUser === recipient) {\n          setTyping(false);\n        }\n      }, 3000);\n    });\n    \n    // Error handling\n    socketRef.current.on('error', (error) => {\n      console.error('Socket error:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Connection error: ${error.message || 'Unknown error'}`,\n        type: 'error'\n      });\n    });\n  };\n\n  const getOnlineUsers = () => {\n    if (socketRef.current) {\n      socketRef.current.emit('getOnlineUsers', {}, (users) => {\n        console.log('Online users:', users);\n        if (Array.isArray(users)) {\n          setOnlineUsers(users);\n        }\n      });\n    }\n  };\n\n  const startPingInterval = () => {\n    pingIntervalRef.current = setInterval(() => {\n      if (socketRef.current && socketRef.current.connected) {\n        // Send ping to keep connection alive\n        socketRef.current.emit('ping', {}, (response) => {\n          if (response) {\n            console.log('Ping response:', response);\n          }\n        });\n        \n        // Also refresh online users list\n        getOnlineUsers();\n        \n        // If we have a recipient, check their status\n        if (recipient) {\n          checkRecipientStatus();\n        }\n      }\n    }, 30000); // Every 30 seconds\n  };\n\n  // Check recipient status\n  const checkRecipientStatus = () => {\n    if (!recipient || !socketRef.current) {\n      setRecipientStatus({ exists: false, online: false, checking: false });\n      return;\n    }\n    \n    console.log(`Checking status for recipient: ${recipient}`);\n    \n    // Set status to checking while we wait for the response\n    setRecipientStatus(prev => ({ ...prev, checking: true }));\n    \n    // Set a timeout to clear the checking status if we don't get a response\n    const checkingTimeout = setTimeout(() => {\n      setRecipientStatus(prev => {\n        if (prev.checking) {\n          return { ...prev, checking: false };\n        }\n        return prev;\n      });\n    }, 3000); // 3 seconds timeout\n    \n    // First check if the recipient is in the online users list\n    if (onlineUsers.includes(recipient)) {\n      clearTimeout(checkingTimeout);\n      console.log(`${recipient} found in online users list`);\n      setRecipientStatus({ exists: true, online: true, checking: false });\n      return;\n    }\n    \n    // If we're connected to a relay, use the checkRecipient event\n    if (connectionDetails.relayStatus === 'connected_to_relay') {\n      socketRef.current.emit('checkRecipient', { username: recipient }, (relayResponse) => {\n        clearTimeout(checkingTimeout);\n        console.log('Relay recipient check response:', relayResponse);\n        if (relayResponse && typeof relayResponse.exists === 'boolean') {\n          // Only update if we got a valid response\n          setRecipientStatus({\n            ...relayResponse,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({ \n            exists: false, \n            online: false, \n            checking: false \n          });\n        }\n      });\n    } else {\n      // If connected directly to base node, use checkUser\n      socketRef.current.emit('checkUser', { username: recipient }, (response) => {\n        clearTimeout(checkingTimeout);\n        console.log('Base node recipient check response:', response);\n        \n        // If we got a valid response, use it\n        if (response && typeof response.exists === 'boolean') {\n          setRecipientStatus({\n            ...response,\n            checking: false\n          });\n        } else {\n          // If no valid response, mark as not found\n          setRecipientStatus({ \n            exists: false, \n            online: false, \n            checking: false \n          });\n        }\n      });\n    }\n  };\n\n  // Effect to check recipient status whenever recipient changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (connected && recipient) {\n        checkRecipientStatus();\n      }\n    }, 500); // Debounce\n    \n    return () => clearTimeout(timeoutId);\n  }, [connected, recipient]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Initialize chat data from localStorage\n  const initializeChatData = () => {\n    // Load active chats\n    const activeChats = getActiveChats(username);\n    \n    // Initialize chat data\n    const initialChatMessages = {};\n    const initialUnreadCounts = loadUnreadCounts(username);\n    const initialRecipientStatuses = {};\n    \n    // Load chat history for each active chat\n    activeChats.forEach(chatUser => {\n      initialChatMessages[chatUser] = loadChatHistory(username, chatUser);\n      initialRecipientStatuses[chatUser] = { exists: true, online: onlineUsers.includes(chatUser) };\n    });\n    \n    // Update state\n    setChatMessages(initialChatMessages);\n    setUnreadCounts(initialUnreadCounts);\n    setRecipientStatuses(initialRecipientStatuses);\n    \n    // Set active chats\n    const activeChatsObj = {};\n    activeChats.forEach(chatUser => {\n      activeChatsObj[chatUser] = true;\n    });\n    setActiveChats(activeChatsObj);\n  };\n\n  const handleUsernameSubmit = async (e) => {\n    e.preventDefault();\n    if (username.trim() && relayStatus === 'online') {\n      setIsCheckingUsername(true);\n      const tempSocket = io(BASE_NODE_URL, { forceNew: true, timeout: 5000 });\n      tempSocket.on('connect', () => {\n        tempSocket.emit('checkUser', { username: username.trim() }, (response) => {\n          setIsCheckingUsername(false);\n          if (response && response.exists) {\n            setUsernameAvailable(false);\n            setSecurityAlert({\n              username: 'System',\n              message: `Username \"${username}\" is already taken.`,\n              type: 'error'\n            });\n            // Explicitly disconnect and do NOT set connected to true\n            tempSocket.disconnect();\n          } else {\n            setUsernameAvailable(true);\n            setConnected(true);\n            \n            // Initialize chat data from localStorage\n            initializeChatData();\n            \n            tempSocket.disconnect();\n          }\n        });\n      });\n      tempSocket.on('connect_error', (error) => {\n        console.error('Connection error during username check:', error);\n        setIsCheckingUsername(false);\n        setSecurityAlert({\n          username: 'System',\n          message: 'Could not verify username. Base node may be offline.',\n          type: 'error'\n        });\n        tempSocket.disconnect();\n      });\n    } else if (relayStatus !== 'online') {\n      setSecurityAlert({\n        username: 'System',\n        message: 'Cannot connect: Base node is offline',\n        type: 'error'\n      });\n    }\n  };\n\n  const handleRecipientChange = (e) => {\n    const newRecipient = e.target.value.trim();\n    setRecipient(newRecipient);\n    \n    // Reset recipient status when the recipient changes\n    setRecipientStatus({ exists: false, online: false, checking: false });\n    \n    // If the recipient is not empty, check their status\n    if (newRecipient && socketRef.current) {\n      // Use a small delay to avoid too many checks while typing\n      if (recipientCheckTimeoutRef.current) {\n        clearTimeout(recipientCheckTimeoutRef.current);\n      }\n      \n      recipientCheckTimeoutRef.current = setTimeout(() => {\n        checkRecipientStatus();\n      }, 500); // 500ms delay\n    }\n  };\n\n  const handleSend = async (e, bounce = false) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    \n    try {\n      // Show sending indicator\n      setStatus('Sending message...');\n      \n      // If this is a relay/bounce message, we'll proceed regardless of recipient status\n      if (!bounce) {\n        // For direct messages, we need to check if the recipient exists and is online\n        const recipientOnline = recipientStatus.online;\n        \n        // If recipient is not online, suggest using relay\n        if (!recipientOnline) {\n          setSecurityAlert({\n            username: 'System',\n            message: `${recipient} is offline or not found. Use the RELAY button to send a delayed message.`,\n            type: 'warning'\n          });\n          setStatus('Registered successfully');\n          return;\n        }\n      }\n      \n      // Get recipient's public key if we don't have it and encryption is enabled\n      if (encryptionEnabled && !publicKeys[recipient]) {\n        try {\n          await requestPublicKey(recipient);\n        } catch (error) {\n          console.error('Failed to get public key:', error);\n          // Continue without encryption if we can't get the key\n        }\n      }\n      \n      let finalMessage = message.trim();\n      let isEncrypted = false;\n      \n      // Encrypt the message if encryption is enabled and we have the recipient's public key\n      if (encryptionEnabled && publicKeys[recipient]) {\n        try {\n          finalMessage = await encryptMessage(message.trim(), publicKeys[recipient]);\n          isEncrypted = true;\n          console.log('Message encrypted successfully');\n        } catch (error) {\n          console.error('Failed to encrypt message:', error);\n          setSecurityAlert({\n            username: 'System',\n            message: 'Failed to encrypt message. Sending as plaintext.',\n            type: 'warning'\n          });\n        }\n      }\n      \n      const messageData = {\n        to: recipient,\n        message: finalMessage,\n        deviceId,\n        timestamp: new Date().toISOString(),\n        bounce: bounce, // Always use the bounce parameter directly\n        encrypted: isEncrypted,\n        publicKey: keyPair?.publicKey // Send our public key with the message\n      };\n      \n      console.log('Sending message:', { \n        ...messageData, \n        message: isEncrypted ? '[ENCRYPTED]' : finalMessage,\n        bounce: bounce\n      });\n      \n      // Add a timeout to handle cases where the server doesn't respond\n      const messageTimeout = setTimeout(() => {\n        setSecurityAlert({\n          username: 'System',\n          message: 'Message sending timed out. Server may be offline.',\n          type: 'error'\n        });\n        setStatus('Registered successfully');\n      }, 10000);\n      \n      socketRef.current.emit('sendMessage', messageData, (response) => {\n        clearTimeout(messageTimeout);\n        console.log('Send message response:', response);\n        setStatus('Registered successfully');\n        \n        if (response && (response.delivered || response.bounced)) {\n          // Add message to local state (store original message for display)\n          setMessages(msgs => [...msgs, { \n            from: username, \n            message: message.trim(), // Store original message for display\n            fromDeviceId: deviceId, \n            timestamp: new Date(),\n            status: response.delivered ? 'delivered' : 'bounced',\n            expiresAt: response.expiresAt,\n            encrypted: isEncrypted\n          }]);\n          setMessage('');\n          \n          // Show notification if message was bounced\n          if (response.bounced) {\n            setSecurityAlert({\n              username: 'System',\n              message: `Message to ${recipient} will be delivered when they come online (expires in 4 hours)`,\n              type: 'info'\n            });\n          }\n        } else {\n          const errorMsg = response?.reason || 'Message delivery failed';\n          \n          if (errorMsg.includes('not found') || errorMsg.includes('User not found')) {\n            if (bounce) {\n              // For bounced messages to non-existent users, show a special message\n              setSecurityAlert({\n                username: 'System',\n                message: `Message will be delivered if ${recipient} registers within 4 hours.`,\n                type: 'info'\n              });\n              \n              // Add message to local state as bounced\n              setMessages(msgs => [...msgs, { \n                from: username, \n                message: message.trim(),\n                fromDeviceId: deviceId, \n                timestamp: new Date(),\n                status: 'bounced',\n                expiresAt: Date.now() + 14400000, // 4 hours\n                encrypted: isEncrypted\n              }]);\n              setMessage('');\n            } else {\n              setSecurityAlert({\n                username: 'System',\n                message: `${recipient} not found. Use the RELAY button to send a message that will be delivered if they register.`,\n                type: 'warning'\n              });\n            }\n          } else if (errorMsg.includes('offline')) {\n            setSecurityAlert({\n              username: 'System',\n              message: `${recipient} is offline. Use the RELAY button to send a delayed message.`,\n              type: 'warning'\n            });\n          } else {\n            setSecurityAlert({\n              username: 'System',\n              message: `Failed to send message: ${errorMsg}`,\n              type: 'error'\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSecurityAlert({\n        username: 'System',\n        message: `Error sending message: ${error.message}`,\n        type: 'error'\n      });\n      setStatus('Registered successfully');\n    }\n  };\n  \n  // Request public key from a user\n  const requestPublicKey = async (username) => {\n    return new Promise((resolve, reject) => {\n      if (!socketRef.current) {\n        reject(new Error('Not connected'));\n        return;\n      }\n      \n      console.log(`Requesting public key for ${username}...`);\n      \n      // Set a timeout in case the server doesn't respond\n      const requestTimeout = setTimeout(() => {\n        console.error(`Public key request for ${username} timed out`);\n        reject(new Error('Request timed out'));\n      }, 10000);\n      \n      socketRef.current.emit('requestPublicKey', { username }, (response) => {\n        clearTimeout(requestTimeout);\n        \n        if (response && response.success && response.publicKey) {\n          console.log(`Received public key for ${username}`);\n          setPublicKeys(prev => ({ ...prev, [username]: response.publicKey }));\n          resolve(response.publicKey);\n        } else {\n          const reason = response?.reason || 'Public key not available';\n          console.log(`No public key available for ${username}: ${reason}`);\n          reject(new Error(reason));\n        }\n      });\n    });\n  };\n  \n  // Handle relay bounce for any user\n  const handleRelayBounce = (e) => {\n    e.preventDefault();\n    if (!recipient || !message.trim() || !socketRef.current) return;\n    \n    // Show confirmation before bouncing\n    const confirmBounce = window.confirm(\n      `RELAY MESSAGE\\n\\n` +\n      `Your message to \"${recipient}\" will be stored on ${connectionDetails.relayStatus === 'connected_to_relay' ? 'relay' : 'base node'} servers for up to 4 hours.\\n\\n` +\n      `It will be delivered when ${recipient} comes online or registers with the network.\\n\\n` +\n      `Continue?`\n    );\n    \n    if (confirmBounce) {\n      handleSend(e, true);\n    }\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    \n    // Send typing indicator\n    if (socketRef.current && recipient && e.target.value.length > 0) {\n      socketRef.current.emit('typing', { to: recipient });\n    }\n  };\n\n  const handleDisconnect = () => {\n    if (socketRef.current) {\n      // Notify the server that we're intentionally disconnecting\n      socketRef.current.emit('userLogout', { username, deviceId }, () => {\n        console.log('Sent logout notification to server');\n        \n        // Now disconnect\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      });\n    }\n    \n    // Clear local state\n    setConnected(false);\n    setMessages([]);\n    setOnlineUsers([]);\n    setRecipientStatus({ exists: false, online: false });\n    setStatus('Disconnected');\n    setRelayStatus('offline');\n    clearInterval(pingIntervalRef.current);\n  };\n\n  const dismissAlert = () => {\n    setSecurityAlert(null);\n  };\n\n  const retryConnection = () => {\n    checkRelayStatus();\n  };\n\n  // Utility functions\n  const getTimestamp = () => {\n    const now = new Date();\n    return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  const formatMessageTime = (timestamp) => {\n    if (!timestamp) return getTimestamp();\n    const date = new Date(timestamp);\n    return `[${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}]`;\n  };\n\n  return (\n    <div style={{ \n      background: '#0a0e14', \n      minHeight: '100vh',\n      width: '100vw',\n      height: '100vh',\n      color: '#a2aabc', \n      display: 'flex', \n      flexDirection: 'column',\n      fontFamily: '\"Fira Code\", monospace',\n      overflow: 'hidden'\n    }}>\n      <div style={{ \n        background: '#171c28', \n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          padding: '16px 24px',\n          borderBottom: '1px solid #1e2d3d'\n        }}>\n          <h2 style={{ \n            margin: 0, \n            color: '#5ccfe6', \n            fontFamily: '\"Fira Code\", monospace',\n            letterSpacing: '1px'\n          }}>WhisperNet_</h2>\n          <div style={{ \n            fontSize: 12, \n            padding: '4px 8px', \n            borderRadius: 4, \n            background: relayStatus === 'online' ? '#1c4b3c' : '#4b1c1c',\n            color: relayStatus === 'online' ? '#5ccfe6' : '#ff8f40',\n            cursor: 'pointer'\n          }} onClick={() => setShowConnectionInfo(!showConnectionInfo)}>\n            {relayStatus === 'online' ? 'Base Node Online' : \n             relayStatus === 'checking' ? 'Checking...' : 'Base Node Offline'}\n          </div>\n        </div>\n        \n        {showConnectionInfo && (\n          <div style={{ \n            background: '#0d1117', \n            padding: '8px 24px', \n            fontSize: 12, \n            fontFamily: 'monospace',\n            borderBottom: '1px solid #1e2d3d',\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '8px 24px'\n          }}>\n            <div>Status: {status}</div>\n            {connected && (\n              <>\n                <div>Socket ID: {connectionDetails.socketId || 'unknown'}</div>\n                <div>Transport: {connectionDetails.transport || 'unknown'}</div>\n                <div>Base Node: {connectionDetails.baseNodeUrl || BASE_NODE_URL}</div>\n                <div>Relay ID: <span style={{ color: '#5ccfe6' }}>{relayServerUrl || 'Unknown'}</span></div>\n                <div>Relay Status: <span style={{ \n                  color: connectionDetails.relayStatus === 'connected_to_base' ? '#bae67e' : \n                         connectionDetails.relayStatus === 'direct_to_base' ? '#5ccfe6' : '#ff8f40' \n                }}>\n                  {connectionDetails.relayStatus === 'connected_to_base' ? 'Connected to Base' : \n                   connectionDetails.relayStatus === 'direct_to_base' ? 'Direct to Base Node' : \n                   connectionDetails.relayStatus === 'assigned_by_base' ? 'Assigned by Base' : 'Standalone'}\n                </span></div>\n                {connectionDetails.connectedUsers !== undefined && (\n                  <div>Users on Relay: {connectionDetails.connectedUsers}</div>\n                )}\n                {connectionDetails.ip && connectionDetails.port && (\n                  <div>Relay Address: {connectionDetails.ip}:{connectionDetails.port}</div>\n                )}\n              </>\n            )}\n            <div>Base Node Status: <span style={{\n              color: relayStatus === 'online' ? '#bae67e' : '#ff8f40'\n            }}>{relayStatus}</span></div>\n            {deviceId && <div>Device ID: {deviceId.substring(0, 8)}...</div>}\n          </div>\n        )}\n        \n        {securityAlert && (\n          <div style={{ \n            background: '#4b1c1c', \n            color: '#ff8f40', \n            padding: '12px 24px', \n            borderBottom: '1px solid #1e2d3d',\n            position: 'relative',\n            fontSize: 14\n          }}>\n            <div style={{ marginRight: 20 }}>{securityAlert.message}</div>\n            <button \n              style={{ \n                position: 'absolute', \n                top: 12, \n                right: 24, \n                background: 'none', \n                border: 'none', \n                color: '#ff8f40', \n                cursor: 'pointer',\n                fontSize: 16\n              }}\n              onClick={dismissAlert}\n            >\n              ×\n            </button>\n          </div>\n        )}\n        \n        {!connected ? (\n          <div style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '0 24px'\n          }}>\n            <div style={{ \n              maxWidth: '400px',\n              width: '100%'\n            }}>\n              <div style={{ marginBottom: 16, fontSize: 14, color: '#5ccfe6' }}>\n                {getTimestamp()} Initializing secure connection...\n              </div>\n              <form onSubmit={handleUsernameSubmit}>\n                <input\n                  style={{ \n                    width: '100%', \n                    padding: 10, \n                    marginBottom: 12, \n                    borderRadius: 4, \n                    border: '1px solid #1e2d3d', \n                    background: '#0d1117',\n                    color: '#a2aabc',\n                    fontSize: 16,\n                    fontFamily: '\"Fira Code\", monospace',\n                    boxSizing: 'border-box'\n                  }}\n                  placeholder=\"Enter username\"\n                  value={username}\n                  onChange={e => {\n                    setUsername(e.target.value);\n                    setUsernameAvailable(true);\n                  }}\n                  required\n                />\n                {!usernameAvailable && <div style={{color: '#ff8f40', fontSize: 12, marginTop: -8, marginBottom: 8}}>Username not available.</div>}\n                <button\n                  style={{\n                    width: '100%',\n                    padding: 10,\n                    borderRadius: 4,\n                    background: relayStatus === 'online' ?\n                      'linear-gradient(90deg, #5ccfe6, #bae67e)' :\n                      '#636b78',\n                    color: '#171c28',\n                    fontWeight: 'bold',\n                    fontSize: 16,\n                    border: 'none',\n                    cursor: relayStatus === 'online' && !isCheckingUsername ? 'pointer' : 'not-allowed',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}\n                  type=\"submit\"\n                  disabled={relayStatus !== 'online' || isCheckingUsername}\n                >\n                  {isCheckingUsername ? 'CHECKING...' : (relayStatus === 'online' ? 'AUTHENTICATE' : 'BASE NODE OFFLINE')}\n                </button>\n              </form>\n              {relayStatus !== 'online' && (\n                <button \n                  style={{ \n                    width: '100%', \n                    padding: 8, \n                    marginTop: 8,\n                    borderRadius: 4, \n                    background: '#4b1c1c', \n                    color: '#ff8f40', \n                    fontSize: 14, \n                    border: 'none',\n                    cursor: 'pointer',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }} \n                  onClick={retryConnection}\n                >\n                  RETRY CONNECTION\n                </button>\n              )}\n              <div style={{ marginTop: 12, color: '#ff3333', textAlign: 'center', fontSize: 14 }}>\n                {status}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div style={{\n            flex: 1,\n            display: 'flex',\n            overflow: 'hidden'\n          }}>\n            {/* User list sidebar */}\n            <UserList \n              users={onlineUsers.map(user => ({ username: user, online: true }))}\n              activeChats={activeChats}\n              unreadCounts={unreadCounts}\n              onSelectUser={openChat}\n              currentUser={username}\n              onClearHistory={handleClearAllHistory}\n            />\n            \n            {/* Main chat area */}\n            <div style={{\n              flex: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              overflow: 'hidden'\n            }}>\n              {/* Welcome screen or active chat */}\n              {!currentChat ? (\n                <div style={{\n                  flex: 1,\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  padding: '0 24px',\n                  background: '#0d1117'\n                }}>\n                  <div style={{ \n                    fontSize: 24, \n                    color: '#5ccfe6', \n                    marginBottom: 16,\n                    fontWeight: 'bold'\n                  }}>\n                    Welcome to WhisperNet\n                  </div>\n                  <div style={{ \n                    fontSize: 16, \n                    color: '#a2aabc', \n                    textAlign: 'center',\n                    maxWidth: 500,\n                    lineHeight: 1.5\n                  }}>\n                    Select a user from the sidebar to start a conversation or click on a username when you receive a message.\n                  </div>\n                  <div style={{ \n                    marginTop: 32,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                  }}>\n                    <div style={{ \n                      fontSize: 14, \n                      color: '#636b78', \n                      marginBottom: 8 \n                    }}>\n                      Connected as:\n                    </div>\n                    <div style={{ \n                      fontSize: 20, \n                      color: '#bae67e', \n                      fontWeight: 'bold' \n                    }}>\n                      {username}\n                    </div>\n                  </div>\n                  <button \n                    style={{ \n                      marginTop: 32,\n                      padding: '8px 16px', \n                      borderRadius: 4, \n                      background: '#4b1c1c', \n                      color: '#ff8f40', \n                      fontSize: 14, \n                      border: 'none',\n                      cursor: 'pointer',\n                      fontFamily: '\"Fira Code\", monospace'\n                    }} \n                    onClick={handleDisconnect}\n                  >\n                    DISCONNECT\n                  </button>\n                </div>\n              ) : (\n                <ChatBox \n                  recipient={currentChat}\n                  messages={chatMessages[currentChat] || []}\n                  username={username}\n                  onSendMessage={(recipient, message) => {\n                    // Set recipient and message\n                    setRecipient(recipient);\n                    setMessage(message);\n                    \n                    // Create a synthetic event\n                    const event = { preventDefault: () => {} };\n                    \n                    // Call handleSend\n                    handleSend(event);\n                  }}\n                  onRelayMessage={(recipient, message) => {\n                    // Set recipient and message\n                    setRecipient(recipient);\n                    setMessage(message);\n                    \n                    // Create a synthetic event\n                    const event = { preventDefault: () => {} };\n                    \n                    // Call handleRelayBounce\n                    handleRelayBounce(event);\n                  }}\n                  recipientStatus={recipientStatuses[currentChat] || { exists: false, online: false }}\n                  typing={typingUsers[currentChat] || false}\n                  onMessageChange={(message) => {\n                    // Send typing indicator\n                    if (socketRef.current && currentChat && message.length > 0) {\n                      socketRef.current.emit('typing', { to: currentChat });\n                    }\n                  }}\n                  onClose={() => closeChat(currentChat)}\n                />\n              )}\n              \n              {/* Connection status footer */}\n              <div style={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                padding: '8px 16px',\n                borderTop: '1px solid #1e2d3d',\n                background: '#171c28'\n              }}>\n                <div style={{ \n                  fontSize: 12, \n                  color: '#636b78', \n                  display: 'flex', \n                  alignItems: 'center' \n                }}>\n                  <div style={{ \n                    width: 8, \n                    height: 8, \n                    borderRadius: '50%', \n                    background: status.includes('Connected') || status.includes('Registered') ? '#bae67e' : '#ff3333',\n                    marginRight: 6 \n                  }}></div>\n                  {status.includes('Connected') || status.includes('Registered') ? 'SECURE CONNECTION' : 'CONNECTION LOST'}\n                </div>\n                \n                <button \n                  style={{ \n                    padding: '4px 12px', \n                    borderRadius: 4, \n                    background: '#4b1c1c', \n                    color: '#ff8f40', \n                    fontSize: 12, \n                    border: 'none',\n                    cursor: 'pointer',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }} \n                  onClick={handleDisconnect}\n                >\n                  DISCONNECT\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}